[{"E:\\FYP_WebApp\\fyp\\src\\index.js":"1","E:\\FYP_WebApp\\fyp\\src\\App.js":"2","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\SocketContext.js":"3","E:\\FYP_WebApp\\fyp\\src\\Confirmed_Patients.jsx":"4","E:\\FYP_WebApp\\fyp\\src\\View_Details.jsx":"5","E:\\FYP_WebApp\\fyp\\src\\Delete_Hospital.jsx":"6","E:\\FYP_WebApp\\fyp\\src\\Current_Cases.jsx":"7","E:\\FYP_WebApp\\fyp\\src\\View_Edit.jsx":"8","E:\\FYP_WebApp\\fyp\\src\\Report_Issue.jsx":"9","E:\\FYP_WebApp\\fyp\\src\\Compaign_Request.jsx":"10","E:\\FYP_WebApp\\fyp\\src\\Hospital_List.jsx":"11","E:\\FYP_WebApp\\fyp\\src\\Complaints.jsx":"12","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\New_Complaint.jsx":"13","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\View_All_Camplaints.jsx":"14","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Communication.jsx":"15","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Doctor_Complaint_Details.jsx":"16","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Display_All_Cases.jsx":"17","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Patient_Details.jsx":"18","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Doctor_Dashboard.jsx":"19","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Display_Current_Cases.jsx":"20","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Add_Person.jsx":"21","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Admin_Dashboard.jsx":"22","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Delete_Record.jsx":"23","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Add_Institute.jsx":"24","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Display_Record_Details.jsx":"25","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Display_All_Records.jsx":"26","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\View_All_Reports.jsx":"27","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Report_Details_Screen.jsx":"28","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Request_Details_Screen.jsx":"29","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Update_Record.jsx":"30","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\View_All_Campaign_Requests.jsx":"31","E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\Home.jsx":"32","E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\Forgot_Password_Screen.jsx":"33","E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\Login.jsx":"34","E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\UserProfile.jsx":"35","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_All_Camplaints.jsx":"36","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Data_Visualization.jsx":"37","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_Complaint_Details.jsx":"38","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_New_Complaint.jsx":"39","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_Dashboard.jsx":"40","E:\\FYP_WebApp\\fyp\\src\\Navbar.jsx":"41","E:\\FYP_WebApp\\fyp\\src\\Buttons.jsx":"42","E:\\FYP_WebApp\\fyp\\src\\Datatables.jsx":"43","E:\\FYP_WebApp\\fyp\\src\\Details.jsx":"44","E:\\FYP_WebApp\\fyp\\src\\Deletion_Form.jsx":"45","E:\\FYP_WebApp\\fyp\\src\\DropDown.jsx":"46","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\SnackBar.jsx":"47","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Banner.jsx":"48","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Loading.jsx":"49","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\DialogBox.jsx":"50","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\COMPONENTS\\CallNotification.jsx":"51","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\CardButton.jsx":"52","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Display_Person_Record.jsx":"53","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Update_User_Profile.jsx":"54","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Update_Institute_Record.jsx":"55","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Display_Institute_Record.jsx":"56","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Update_Person_Record.jsx":"57","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Reply_Form.jsx":"58","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Institiute_RegistrationForm.jsx":"59","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Display_Patient_Record.jsx":"60","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Person_RegistrationForm.jsx":"61","E:\\FYP_WebApp\\fyp\\src\\DATA\\Villages.js":"62","E:\\FYP_WebApp\\fyp\\src\\DATA\\Cities.js":"63","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\datePicker.jsx":"64"},{"size":723,"mtime":1621455336000,"results":"65","hashOfConfig":"66"},{"size":5785,"mtime":1621455948000,"results":"67","hashOfConfig":"66"},{"size":3666,"mtime":1620338534000,"results":"68","hashOfConfig":"66"},{"size":2927,"mtime":1615658722000,"results":"69","hashOfConfig":"66"},{"size":3189,"mtime":1615658722000,"results":"70","hashOfConfig":"66"},{"size":1117,"mtime":1615658722000,"results":"71","hashOfConfig":"66"},{"size":2902,"mtime":1615658722000,"results":"72","hashOfConfig":"66"},{"size":8564,"mtime":1615658722000,"results":"73","hashOfConfig":"66"},{"size":2354,"mtime":1615658722000,"results":"74","hashOfConfig":"66"},{"size":1051,"mtime":1615658722000,"results":"75","hashOfConfig":"66"},{"size":1101,"mtime":1615658722000,"results":"76","hashOfConfig":"66"},{"size":2886,"mtime":1615658722000,"results":"77","hashOfConfig":"66"},{"size":11121,"mtime":1620765216000,"results":"78","hashOfConfig":"66"},{"size":14677,"mtime":1620765298000,"results":"79","hashOfConfig":"66"},{"size":19962,"mtime":1620766406000,"results":"80","hashOfConfig":"66"},{"size":11433,"mtime":1620765088000,"results":"81","hashOfConfig":"66"},{"size":9624,"mtime":1620764880000,"results":"82","hashOfConfig":"66"},{"size":16409,"mtime":1620765214000,"results":"83","hashOfConfig":"66"},{"size":5222,"mtime":1620763364000,"results":"84","hashOfConfig":"66"},{"size":7498,"mtime":1620764960000,"results":"85","hashOfConfig":"66"},{"size":5110,"mtime":1619638142000,"results":"86","hashOfConfig":"66"},{"size":5596,"mtime":1619746160000,"results":"87","hashOfConfig":"66"},{"size":19865,"mtime":1619783126000,"results":"88","hashOfConfig":"66"},{"size":4837,"mtime":1619641394000,"results":"89","hashOfConfig":"66"},{"size":13827,"mtime":1619644168000,"results":"90","hashOfConfig":"66"},{"size":16949,"mtime":1619643490000,"results":"91","hashOfConfig":"66"},{"size":14277,"mtime":1619817898000,"results":"92","hashOfConfig":"66"},{"size":15555,"mtime":1619732732000,"results":"93","hashOfConfig":"66"},{"size":15526,"mtime":1619741210000,"results":"94","hashOfConfig":"66"},{"size":10327,"mtime":1619718628000,"results":"95","hashOfConfig":"66"},{"size":14041,"mtime":1619750276000,"results":"96","hashOfConfig":"66"},{"size":2679,"mtime":1619972734000,"results":"97","hashOfConfig":"66"},{"size":5728,"mtime":1619831696000,"results":"98","hashOfConfig":"66"},{"size":6732,"mtime":1619972732000,"results":"99","hashOfConfig":"66"},{"size":7804,"mtime":1619835502000,"results":"100","hashOfConfig":"66"},{"size":14709,"mtime":1620765504000,"results":"101","hashOfConfig":"66"},{"size":5843,"mtime":1621458506000,"results":"102","hashOfConfig":"66"},{"size":11449,"mtime":1620765558000,"results":"103","hashOfConfig":"66"},{"size":11154,"mtime":1620765672000,"results":"104","hashOfConfig":"66"},{"size":4038,"mtime":1621456050000,"results":"105","hashOfConfig":"66"},{"size":3180,"mtime":1619831452000,"results":"106","hashOfConfig":"66"},{"size":460,"mtime":1619972828000,"results":"107","hashOfConfig":"66"},{"size":3957,"mtime":1615658722000,"results":"108","hashOfConfig":"66"},{"size":3204,"mtime":1615658722000,"results":"109","hashOfConfig":"66"},{"size":5328,"mtime":1615658722000,"results":"110","hashOfConfig":"66"},{"size":721,"mtime":1615658722000,"results":"111","hashOfConfig":"66"},{"size":1309,"mtime":1619485600000,"results":"112","hashOfConfig":"66"},{"size":1099,"mtime":1617389856000,"results":"113","hashOfConfig":"66"},{"size":1032,"mtime":1617389844000,"results":"114","hashOfConfig":"66"},{"size":1974,"mtime":1618687760000,"results":"115","hashOfConfig":"66"},{"size":2017,"mtime":1620575794000,"results":"116","hashOfConfig":"66"},{"size":1607,"mtime":1617397026000,"results":"117","hashOfConfig":"66"},{"size":8006,"mtime":1619829462000,"results":"118","hashOfConfig":"66"},{"size":14422,"mtime":1619834026000,"results":"119","hashOfConfig":"66"},{"size":15042,"mtime":1619559186000,"results":"120","hashOfConfig":"66"},{"size":4666,"mtime":1617224854000,"results":"121","hashOfConfig":"66"},{"size":30848,"mtime":1619717378000,"results":"122","hashOfConfig":"66"},{"size":7445,"mtime":1619712494000,"results":"123","hashOfConfig":"66"},{"size":16133,"mtime":1619551696000,"results":"124","hashOfConfig":"66"},{"size":7242,"mtime":1619754034000,"results":"125","hashOfConfig":"66"},{"size":31339,"mtime":1619717398000,"results":"126","hashOfConfig":"66"},{"size":14481,"mtime":1619486258000,"results":"127","hashOfConfig":"66"},{"size":1061,"mtime":1619493530000,"results":"128","hashOfConfig":"66"},{"size":1665,"mtime":1617389850000,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"q6uxpj",{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"132"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"132"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"132"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"132"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"132"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"132"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"132"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"132"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"132"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"132"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"132"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"132"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"132"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"132"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"132"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"132"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"132"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"132"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"132"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"132"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"132"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"132"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"132"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"132"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"132"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"132"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"132"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"132"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"132"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"132"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"132"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"132"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"132"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"132"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"132"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"132"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"132"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"132"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"132"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"132"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"132"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"132"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"132"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"132"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"132"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"132"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"132"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"132"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"132"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"132"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"302"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"132"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"132"},"E:\\FYP_WebApp\\fyp\\src\\index.js",[],["313","314"],"E:\\FYP_WebApp\\fyp\\src\\App.js",["315","316","317"],"import './App.css';\nimport { Redirect, Route, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport { ContextProvider } from './DOCTOR_SCREENS/SocketContext';\n\nimport { TinyButton as ScrollUpButton } from \"react-scroll-up-button\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\";\n\n\nimport Add_Person from \"./ADMIN_SCREENS/Add_Person\";\nimport Add_Institute from './ADMIN_SCREENS/Add_Institute';\nimport Admin_Dashboard from './ADMIN_SCREENS/Admin_Dashboard';\n\nimport Communication from './DOCTOR_SCREENS/Communication';\n\nimport Delete_Record from './ADMIN_SCREENS/Delete_Record';\nimport Display_All_Records from './ADMIN_SCREENS/Display_All_Records';\nimport Data_Visualization from './RESEARCHER_SCREENS/Data_Visualization';\nimport Display_Record_Details from './ADMIN_SCREENS/Display_Record_Details';\nimport Doctor_Complaint_Details from './DOCTOR_SCREENS/Doctor_Complaint_Details';\n\n\nimport Forgot_Password_Screen from './COMMON_SCREENS/Forgot_Password_Screen';\n\nimport Home from './COMMON_SCREENS/Home';\n\nimport Login from './COMMON_SCREENS/Login';\n\nimport Report_Details_Screen from './ADMIN_SCREENS/Report_Details_Screen';\nimport Request_Details_Screen from './ADMIN_SCREENS/Request_Details_Screen';\nimport Researcher_All_Camplaints from './RESEARCHER_SCREENS/Researcher_All_Camplaints';\n\nimport UserProfile from './COMMON_SCREENS/UserProfile';\nimport Update_Record from './ADMIN_SCREENS/Update_Record';\n\nimport View_All_Reports from './ADMIN_SCREENS/View_All_Reports';\nimport View_All_Campaign_Requests from './ADMIN_SCREENS/View_All_Campaign_Requests';\n\n\nimport Doctor_Dashboard from './DOCTOR_SCREENS/Doctor_Dashboard';\nimport Display_All_Cases from './DOCTOR_SCREENS/Display_All_Cases';\nimport Display_Current_Cases from './DOCTOR_SCREENS/Display_Current_Cases';\nimport View_All_Camplaints from './DOCTOR_SCREENS/View_All_Camplaints';\nimport New_Complaint from './DOCTOR_SCREENS/New_Complaint';\nimport Patient_Details from './DOCTOR_SCREENS/Patient_Details';\n\nimport Researcher_Dashboard from './RESEARCHER_SCREENS/Researcher_Dashboard';\nimport Researcher_New_Complaint from './RESEARCHER_SCREENS/Researcher_New_Complaint';\nimport Researcher_Complaint_Details from './RESEARCHER_SCREENS/Researcher_Complaint_Details';\n\nimport Confirmed_Patients from './Confirmed_Patients';\nimport Current_Cases from './Current_Cases';\nimport Delete_Hospital from './Delete_Hospital';\nimport View_Details from './View_Details';\nimport Hospital_List from './Hospital_List';\nimport Complaints from './Complaints';\nimport Report_Issue from './Report_Issue';\nimport View_Edit from \"./View_Edit\";\nimport Compaign_Request from \"./Compaign_Request\";\n\n\nconst App = () => {\n  return (\n    <>\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/Admin_Dashboard/' component={Admin_Dashboard} />\n        <Route exact path='/Add_Person/' component={Add_Person} />\n        <Route exact path='/Add_Institute/' component={Add_Institute} />\n\n        <Route exact path='/Compaign_Request/' component={Compaign_Request} />\n        <Route exact path='/Complaints/' component={Complaints} />\n        <Route exact path='/Confirmed_Patients/' component={Confirmed_Patients} />\n        <Route exact path='/Current_Cases/' component={Current_Cases} />\n        <Route exact path='/Communication/' component={Communication} />\n\n        <Route exact path='/Delete_Record/' component={Delete_Record} />\n        <Route exact path='/Doctor_Dashboard/' component={Doctor_Dashboard} />\n        <Route exact path='/Doctor_New_Complaint/' component={New_Complaint} />\n        <Route exact path='/Display_All_Cases/' component={Display_All_Cases} />\n        <Route exact path='/Data_Visualization/' component={Data_Visualization} />\n        <Route exact path='/Display_All_Records/' component={Display_All_Records} />\n        <Route exact path='/Display_Current_Cases/' component={Display_Current_Cases} />\n        <Route exact path='/Display_Record_Details/' component={Display_Record_Details} />\n        <Route exact path='/Doctor_Complaint_Details/' component={Doctor_Complaint_Details} />\n\n        <Route exact path='/Forgot_Password_Screen/' component={Forgot_Password_Screen} />\n\n        <Route exact path='/Login/' component={Login} />\n\n        <Route exact path='/Patient_Details/' component={Patient_Details} />\n\n        <Route exact path='/Researcher_Dashboard/' component={Researcher_Dashboard} />\n        <Route exact path='/Report_Details_Screen/' component={Report_Details_Screen} />\n        <Route exact path='/Request_Details_Screen/' component={Request_Details_Screen} />\n        <Route exact path='/Researcher_New_Complaint/' component={Researcher_New_Complaint} />\n        <Route exact path='/Researcher_All_Camplaints/' component={Researcher_All_Camplaints} />\n        <Route exact path='/Researcher_Complaint_Details/' component={Researcher_Complaint_Details} />\n\n        <Route exact path='/UserProfile/' component={UserProfile} />\n        <Route exact path='/Update_Record/' component={Update_Record} />\n\n        <Route exact path='/View_All_Camplaints/' component={View_All_Camplaints} />\n        <Route exact path='/View_All_Reports/' component={View_All_Reports} />\n        <Route exact path='/View_All_Campaign_Requests/' component={View_All_Campaign_Requests} />\n\n        <Route exact path='/Delete_Hospital/' component={Delete_Hospital} />\n        <Route exact path='/View_Details/' component={View_Details} />\n        <Route exact path='/Hospital_List/' component={Hospital_List} />\n        <Route exact path='/View_Edit/' component={View_Edit} />\n\n\n        <Route exact path='/Report_Issue/' component={Report_Issue} />\n      </Switch>\n      <ScrollUpButton style={{ backgroundColor: \"white\" }} />\n    </>\n  );\n};\n\nexport default App;\n","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\SocketContext.js",[],"E:\\FYP_WebApp\\fyp\\src\\Confirmed_Patients.jsx",["318"],"\nimport React from 'react';\nimport Navbar from './Navbar';\nconst Confirmed_Patients = () =>{\n    return(\n        <>\n            <div className=\"container-fluid\"> \n                <div className=\"row\" >\n                    <div className=\"col-12\">\n                        <Navbar/>\n                    </div>\n                    <div id=\"background\"className=\"\"style={{height:\"90vh\"}} >\n                        <div id = \"foreground\" \n                        className=\"col-md-10\">\n                            <div className=\"col-12 mb-lg-2\" \n                            style={{ height:'15%',backgroundColor:\"skyblue\" }}>\n                                <h1 className=\"text-center\"\n                                style={{padding:\"10px\", color:\"white\"}}>\n                                Confirmed Patients\n                                </h1>\n                            </div>\n                            <Confirmed_PatientsTable/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Confirmed_Patients;\n\n\n\n\n\n\n\n\nexport class Confirmed_PatientsTable extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        users: [],\n        isLoading: false,\n        isError: false\n      }\n    }\n    async componentDidMount() {\n      this.setState({ isLoading: true })\n      const response = await fetch('https://jsonplaceholder.typicode.com/users')\n      if (response.ok) {\n        const users = await response.json()\n        this.setState({ users, isLoading: false })\n      } else {\n        this.setState({ isError: true, isLoading: false })\n      }\n    }\n    render() {\n      const { users, isLoading, isError } = this.state\n      if (isLoading) {\n        return <div>Loading...</div>\n      }\n      if (isError) {\n        return <div>Error</div>\n      }\n      return users.length > 0\n        ? (\n          <table className=\"table table-hover table-bordered-primary mt-5\">\n            <thead>\n              <tr>\n                {this.renderTableHeader()}\n              </tr>\n            </thead>\n            <tbody>\n              {this.renderTableRows()}\n            </tbody>\n          </table>\n        ) : (\n          <div>\n            No users.\n        </div>\n        )\n    }\n    renderTableHeader = () => {\n      return Object.keys(this.state.users[0]).map(attr => <th className=\"my-5\" key={attr}>{attr.toUpperCase()}</th>)\n    }\n    renderTableRows = () => {\n      return this.state.users.map(user => {\n        return (\n          <tr key={user.id}>\n            <td>{user.id}</td>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>{user.email}</td>\n            <td>{`${user.address.street}, ${user.address.city}`}</td>\n            <td>{user.phone}</td>\n            <td>{user.website}</td>\n            <td>{user.company.name}</td>\n          </tr>\n        )\n      })\n    }\n  }","E:\\FYP_WebApp\\fyp\\src\\View_Details.jsx",["319","320"],"import React ,{Component} from 'react';\nimport Navbar from './Navbar';\nimport Datatables ,{HDatatables}from \"./Datatables\";\nimport Details from \"./Details\";\n\n\nclass View_Details extends Component {\n    state = {\n      SelectedOption: ''\n    };\n    render(){\n      return (\n          <>             \n              <div className=\"container-fluid\" \n                  style={{backgroundColor:\"\"}}> \n                  <div className=\"row\">\n                      <div className=\"col-12\">\n                          <Navbar/>\n                      </div>\n                      <div id=\"background\"className=\"\">\n                          <div id = \"foreground\" \n                          className=\"col-md-10\">\n                              <div className=\"col-12 mb-lg-3\" \n                              style={{ height:'15%',backgroundColor:\"skyblue\" }}>\n                                  <h1 className=\"text-center\"\n                                  style={{padding:\"50px\", color:\"white\"}}>\n                                      Details\n                                  </h1>\n                              </div>\n                                  <form className=\"col-12 mx-auto \">\n                                      <section className=\"\">\n                                          {this.renderSelector()}\n                                          <div className=\"\">\n                                              {this.renderSelected(this.state.SelectedOption)}\n                                          </div>\n                                      </section>\n                                  </form>\n                              </div>\n                          </div>\n                      </div>\n                  </div>\n          </>\n      );\n     }\n      renderSelector() {\n          return (\n            <div className=\"form-group mt-5\">\n              <label \n                  className=\"form-label\">\n                      Select what you want to view\n              </label>\n              <select className=\"form-control\"\n                onChange={(e) => this.setState({ SelectedOption: e.target.value })}\n                style={{color:\"GrayText\"}}>\n                  <option selected disabled=\"disabled\" value=\"1\" hidden=\"hidden\">-- Select --</option>\n                  <option value=\"2\">Doctor</option>\n                  <option value=\"3\">Health-Worker</option>\n                  <option value=\"4\">Researcher</option> \n                  <option value=\"5\">Hospital</option>\n                  <option value=\"6\">Dispensary</option> \n              </select>\n            </div>\n          );\n      }\n        renderSelected(SelectedOption) {\n          if (!SelectedOption)\n          return <h1 text= \"Select an option\" />;\n          else if(SelectedOption===\"2\")\n              return <Datatables />;\n              \n          else if(SelectedOption===\"3\")\n          return <Datatables/>;\n          else if(SelectedOption===\"4\")\n              return <Datatables />;\n              else if(SelectedOption===\"5\")\n                  return <HDatatables />;\n                  else if(SelectedOption===\"6\")\n                      return <HDatatables />\n        }\n  };\nexport default View_Details;\n","E:\\FYP_WebApp\\fyp\\src\\Delete_Hospital.jsx",["321"],"import React from 'react';\nimport Navbar from './Navbar';\nimport {HDeletion_Form} from './Deletion_Form';\n\nconst Delete_Hospital = () =>{\n    return(\n        <>\n            <div className=\"container-fluid\"> \n                <div className=\"row\" >\n                    <div className=\"col-12\">\n                        <Navbar/>\n                    </div>\n                    <div id=\"background\"className=\"\"style={{height:\"90vh\"}} >\n                        <div id = \"foreground\" \n                        className=\"col-md-10\">\n                            <div className=\"col-12 mb-lg-2\" \n                            style={{ height:'15%',backgroundColor:\"skyblue\" }}>\n                                <h1 className=\"text-center\"\n                                style={{padding:\"10px\", color:\"white\"}}>\n                                Deletion Form\n                                </h1>\n                            </div>\n                            <HDeletion_Form/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Delete_Hospital;","E:\\FYP_WebApp\\fyp\\src\\Current_Cases.jsx",["322"],"\nimport React from 'react';\nimport Navbar from './Navbar';\nconst Current_Cases = () =>{\n    return(\n        <>\n            <div className=\"container-fluid\"> \n                <div className=\"row\" >\n                    <div className=\"col-12\">\n                        <Navbar/>\n                    </div>\n                    <div id=\"background\"className=\"\"style={{height:\"90vh\"}} >\n                        <div id = \"foreground\" \n                        className=\"col-md-10\">\n                            <div className=\"col-12 mb-lg-2\" \n                            style={{ height:'15%',backgroundColor:\"skyblue\" }}>\n                                <h1 className=\"text-center\"\n                                style={{padding:\"10px\", color:\"white\"}}>\n                                Current Cases\n                                </h1>\n                            </div>\n                            <Current_CasesTable/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Current_Cases;\n\n\n\n\n\n\n\n\nexport class Current_CasesTable extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        users: [],\n        isLoading: false,\n        isError: false\n      }\n    }\n    async componentDidMount() {\n      this.setState({ isLoading: true })\n      const response = await fetch('https://jsonplaceholder.typicode.com/users')\n      if (response.ok) {\n        const users = await response.json()\n        this.setState({ users, isLoading: false })\n      } else {\n        this.setState({ isError: true, isLoading: false })\n      }\n    }\n    render() {\n      const { users, isLoading, isError } = this.state\n      if (isLoading) {\n        return <div>Loading...</div>\n      }\n      if (isError) {\n        return <div>Error</div>\n      }\n      return users.length > 0\n        ? (\n          <table className=\"table table-hover table-bordered-primary mt-5\">\n            <thead>\n              <tr>\n                {this.renderTableHeader()}\n              </tr>\n            </thead>\n            <tbody>\n              {this.renderTableRows()}\n            </tbody>\n          </table>\n        ) : (\n          <div>\n            No users.\n        </div>\n        )\n    }\n    renderTableHeader = () => {\n      return Object.keys(this.state.users[0]).map(attr => <th className=\"my-5\" key={attr}>{attr.toUpperCase()}</th>)\n    }\n    renderTableRows = () => {\n      return this.state.users.map(user => {\n        return (\n          <tr key={user.id}>\n            <td>{user.id}</td>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>{user.email}</td>\n            <td>{`${user.address.street}, ${user.address.city}`}</td>\n            <td>{user.phone}</td>\n            <td>{user.website}</td>\n            <td>{user.company.name}</td>\n          </tr>\n        )\n      })\n    }\n  }","E:\\FYP_WebApp\\fyp\\src\\View_Edit.jsx",["323"],"import React from \"react\";\nimport DropDown from './DropDown';\nimport Navbar from './Navbar';\nimport profile from \"./images/profile.png\";\nimport { NavLink, Redirect } from \"react-router-dom\";\n\nclass View_Edit extends React.Component{\n    constructor(props){\n      super(props)\n          this.state={      \n        id: \"1\",\n        name: \"Sumayya  \",        \n        email:\"sumayya@gmail.com\",\n          Cnic:\"1234512345671\",\n          address:\"rawalpindi\",\n          dob:\"18/11/1987\",\n          username:\"sumayya12344\",\n          Cno:\"0300-1234567\",\n          type:\"button\",\n          btnname:\"Edit\",\n        editModeEnabled: false,        \n        img:profile,\n      }\n    }\n    handleEditClick(){\n      this.setState({\n        editModeEnabled: !this.state.editModeEnabled,\n        enable:!this.state.enable,\n        disable: !this.state.disable,\n        type:\"submit\",\n        btnname:\"Update\"\n      })}\n    // }    \n    // selected(){\n    //   return<Redirect to =\"/View_Edit\"/>\n    // }\n    InputEvent= (event) =>{\n        const { name , value} = event.target;\n        this.setState((preVal)=>{            \n        return{\n            ...preVal,\n            [name] : value,\n        };\n        });\n    };\n    formSubmit = (e) => {\n        e.preventDefault();\n        alert('Ho gya Update :)');\n    };\n    render(){\n      return(\n          <>           \n          \n            <div className=\"container-fluid\" \n            style={{backgroundColor:\"white\"}}> \n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <Navbar/>\n                    </div>\n                    <div className=\"col-10 mx-auto mb-lg-2 mt-5\" \n                    style={{ height:'15%',backgroundColor:\"skyblue\" }}>\n                        <h1 className=\"text-center\"\n                        style={{padding:\"10px\", color:\"white\"}}>\n                        Details\n                        </h1>\n                    </div>\n                    <section className=\"d-flex align-items-center pt-4 mt-5 mb-1\">\n                        <div className=\"container-fluid nav_bg\">\n                            <div className=\"row\">\n                                <div className=\"col-12 mx-auto\">\n                                    <div className=\"row\">\n                                        <div className=\"col-lg-5 pt-5 pt-lg-0 order-1 order-lg-2 d-flex justify-content-center\">\n                                            <img className=\"img-flud\" src={this.state.img} alt=\"\" style={{height:\"80%\", width:\"80%\", borderRadius:\"50%\"}}/>\n                                        </div>\n                                        <div className=\"col-md-7 pt-5 pt-lg-0 order-1 order-lg-2\" >\n                                          <form onSubmit={this.formSubmit} className=\"col-10 mx-auto\">\n                                            <label className=\"col-3 mt-3\">Name</label>\n                                            <input className=\"col-4\"\n                                            type=\"text\" \n                                            id=\"Fname\" \n                                            name=\"Fname\"   \n                                            placeholder={this.state.name} \n                                            onChange={InputEvent}\n                                            disabled={!this.state.editModeEnabled}/>\n                                            <br/>                    \n                                              <label className=\"col-3 mt-3\"> Username</label>\n                                              <input className=\"col-4\"\n                                              type=\"username\" \n                                              id=\"username\" \n                                              name=\"username\"  \n                                              placeholder={this.state.username}\n                                              onChange={InputEvent} \n                                              disabled={!this.state.editModeEnabled}/>\n                                              <br/>  \n                                            <label className=\"col-3 mt-3\"> Date of Birth</label>\n                                              <input className=\"col-4\"\n                                              type=\"text\" \n                                              id=\"dob\" \n                                              name=\"dob\"\n                                              placeholder={this.state.dob} \n                                              disabled={!this.state.editModeEnabled}\n                                              onChange={InputEvent}/>\n                                              <br/>                      \n                                              <label className=\"col-3 mt-3\"> Email</label>\n                                              <input className=\"col-4\" \n                                              type=\"email\"\n                                              id=\"email\" \n                                              name=\"email\"    \n                                              placeholder={this.state.email}\n                                              onChange={InputEvent} \n                                              disabled={!this.state.editModeEnabled} \n                                              pattern=\"[a-zA-Z0-9.!# $ % &'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\" />\n                                              <br/>\n                                              \n                                              <label className=\"col-3 mt-3\"> CNIC</label>\n                                              <input className=\"col-4\"\n                                              type=\"text\" \n                                              id=\"cnic\" \n                                              name=\"cnic\"  \n                                              placeholder={this.state.Cnic} \n                                              onChange={InputEvent} \n                                              disabled={!this.state.editModeEnabled} />\n                                              <br/>\n                                              <label className=\"col-3 mt-3\"> Contact No</label>\n                                              <input className=\"col-4\" type=\"text\" id=\"Cno\" name=\"Cno\"  placeholder={this.state.Cno} disabled={!this.state.editModeEnabled}  patterrn=\"^(0)((3[0-6][0-9]))(\\d{7})$\"/>\n                                              <br/>\n                                              <label className=\"col-3 mt-3\"> Address</label>\n                                              <input className=\"col-4\" \n                                              type=\"address\"\n                                              id=\"address\" \n                                              name=\"address\"    \n                                              placeholder={this.state.address}\n                                              onChange={InputEvent} \n                                              disabled={!this.state.editModeEnabled} \n                                              pattern=\"[a-zA-Z0-9.!# $ % &'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\" />\n                                              <br/>\n                                              <label className=\"col-3 mt-3\"> City</label>                                               \n                                              <div className=\"col-md-4 col-lg-4\" style={{marginLeft:\"25%\"}}> \n                                              <DropDown \n                                              disabled={!this.state.editModeEnabled} style={{width:\"50px\"}}/>\n                                                               </div>\n                                                               <br/>\n                                        <div className=\"modal-footer\">\n                                          <NavLink type=\"button\" className=\"btn btn-secondary\" to='/View_Details/'>Cancel</NavLink>\n                                          <NavLink type={this.state.type} id=\"btn\" className=\"btn btn-primary\" to=\"\"  \n                                          onClick={() => this.handleEditClick()}> \n                                          {this.state.btnname}</NavLink> \n                        </div></form>\n                        </div>\n                        </div>\n                      </div></div></div></section>\n                    </div>\n                </div>\n          </>\n      );\n  }\n  }\n  export default View_Edit;","E:\\FYP_WebApp\\fyp\\src\\Report_Issue.jsx",["324"],"import React from 'react';\nimport Navbar from './Navbar';\nimport Buttons from './Buttons';\n\nconst Report_Issue = () =>{\n    return(\n        <>\n            <div className=\"container-fluid\"> \n                <div className=\"row\" >\n                    <div className=\"col-12\">\n                        <Navbar/>\n                    </div>\n                    <div id=\"background\"className=\"\"style={{height:\"90vh\"}} >\n                        <div id = \"foreground\" \n                        className=\"col-md-10\">\n                            <div className=\"col-12 mb-lg-2\" \n                            style={{ height:'15%',backgroundColor:\"skyblue\" }}>\n                                <h1 className=\"text-center\"\n                                style={{padding:\"10px\", color:\"white\"}}>\n                                Report Your Issue\n                                </h1>\n                            </div>\n                        <form className=\"col-8 mx-auto pt-3 my-5\">\n                        <label for=\"subject\" \n                        className=\"form-label\">\n                            Subject\n                        </label>\n                        <input type=\"text\" \n                        className=\"form-control\" \n                        name=\"subject\"\n                        id =\"subject\"\n                        required/>\n                        <label for=\"report\" \n                        className=\"form-label\">\n                            Subject\n                        </label>\n                        <textarea type=\"textarea\" \n                        className=\"form-control\" \n                        name=\"report\"\n                        id =\"report\"\n                        required/>\n                        </form>\n                        {/* <div className=\"d-flex flex-lg-row flex-md-column ml-5\">\n                         */}\n                         <div className=\"col-10 d-grid gap-5 d-md-flex justify-content-md-end\">\n                            <button type=\"button\" className=\"btn btn-secondary \">Cancel</button>\n                            <button type=\"submit\" className=\"btn btn-primary\" >Submit</button>\n                        \n                        </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Report_Issue;\n","E:\\FYP_WebApp\\fyp\\src\\Compaign_Request.jsx",[],"E:\\FYP_WebApp\\fyp\\src\\Hospital_List.jsx",["325"],"import React from 'react';\nimport Navbar from './Navbar';\nimport {Hospital_Details} from './Details';\n\nconst Member_List = () =>{\n    return(\n        <>\n            <div className=\"container-fluid\"> \n                <div className=\"row\" >\n                    <div className=\"col-12\">\n                        <Navbar/>\n                    </div>\n                    <div id=\"background\"className=\"\"style={{height:\"90vh\"}} >\n                        <div id = \"foreground\" \n                        className=\"col-md-10\">\n                            <div className=\"col-12 mb-lg-2\" \n                            style={{ height:'15%',backgroundColor:\"skyblue\" }}>\n                                <h1 className=\"text-center\"\n                                style={{padding:\"10px\", color:\"white\"}}>\n                                Details\n                                </h1>\n                            </div>\n                            <Hospital_Details/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Member_List;","E:\\FYP_WebApp\\fyp\\src\\Complaints.jsx",[],"E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\New_Complaint.jsx",["326","327","328","329","330","331"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\nimport moment from 'moment';\r\n\r\n//COMPONENTS\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\n\r\nconst New_Complaint = (props) => {\r\n\r\n    let date = moment().format('DD-MM-YYYY');\r\n    const [authorized, setAuthorized] = useState();\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    const [data, setData] = useState({\r\n        subject: \"\",\r\n        reportMessage: \"\",\r\n        reporterName: '',\r\n        reporterID: '',\r\n        reporterRole: 'doctor',\r\n        reportDate: date,\r\n        reportStatus: 'pending',\r\n        subjectError: false,\r\n        reportMessageError: false,\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setData({\r\n            ...data,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    \r\n    let userRole = '';\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo && userRole === 'doctor') {\r\n            setAuthorized(true)\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    })\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        await getUserInfoFromLocalStorage()\r\n        await fetch(`http://localhost:3000/addReport?role=doctor`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + parsedUserInfo.authToken,\r\n            },\r\n            body: JSON.stringify({\r\n                subject: data.subject,\r\n                reportMessage: data.reportMessage,\r\n                reporterName: parsedUserInfo.name,\r\n                reporterID: parsedUserInfo._id,\r\n                reporterRole: data.reporterRole,\r\n                reportDate: data.reportDate,\r\n                reportStatus: data.reportStatus\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                if (data.error) {\r\n                    setSnackBar({\r\n                        isError: true,\r\n                        showSnackBar: true,\r\n                        snackBarMessage: data.error\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                } else {\r\n                    setSnackBar({\r\n                        isError: false,\r\n                        showSnackBar: true,\r\n                        snackBarMessage: data.message\r\n                    });\r\n                    setData((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            subject: \"\",\r\n                            reportMessage: \"\",\r\n                            subjectError: false,\r\n                            reportMessageError: false,\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar({ showSnackBar: false });\r\n    }\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Navbar />\r\n                        </div>\r\n\r\n                        <div id=\"foreground\" className=\"col-md-10\"\r\n                            style={{\r\n                                marginTop: '5%',\r\n                                padding: 0,\r\n                            }}>\r\n                            <div\r\n                                className=\"col-12\"\r\n                                style={{\r\n                                    paddingLeft: '4%',\r\n                                    paddingRight: '4%',\r\n                                }}\r\n                            >\r\n                                <Banner formName=\"New Complaint\" bannerHeight={150} />\r\n\r\n                                <div\r\n                                    style={{\r\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                        margin: 15,\r\n                                    }}\r\n                                >\r\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <form onSubmit={handleSubmit} method=\"POST\">\r\n                                <div className=\"d-flex flex-column mx-5 \" >\r\n                                    <div className=\"col-md-12 mx-5\" >\r\n                                        <div style={styles.filedsDivStyling}>\r\n                                            <TextField\r\n                                                variant=\"standard\"\r\n                                                label=\"subject\"\r\n                                                style={{ width: '50%' }}\r\n                                                InputLabelProps={{\r\n                                                    style: {\r\n                                                        color: data.subjectError ? 'red' : '#4169e1',\r\n                                                        fontSize: 20,\r\n                                                        textTransform: 'uppercase',\r\n                                                        fontWeight: 'bold',\r\n                                                    }\r\n                                                }}\r\n                                                required={true}\r\n                                                value={data.subject}\r\n                                                name=\"subject\"\r\n                                                onChange={handleChange}\r\n                                                error={data.subjectError}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-12 mx-5\" >\r\n                                        <div style={styles.filedsDivStyling}>\r\n                                            <TextField\r\n                                                required={true}\r\n                                                variant=\"standard\"\r\n                                                label=\"Message\"\r\n                                                multiline\r\n                                                value={data.reportMessage}\r\n                                                rows={7}\r\n                                                rowsMax={Infinity}\r\n                                                style={{ width: '50%', marginBottom: 15 }}\r\n                                                InputLabelProps={{\r\n                                                    style: {\r\n                                                        color: data.reportMessageError ? 'red' : '#4169e1',\r\n                                                        fontSize: 22,\r\n                                                        textTransform: 'uppercase',\r\n                                                        fontWeight: 'bold'\r\n                                                    }\r\n                                                }}\r\n                                                name=\"reportMessage\"\r\n                                                inputProps={{ maxLength: 250 }}\r\n                                                onChange={handleChange}\r\n                                                error={data.reportMessageError}\r\n                                                helperText={`${data.reportMessage.length} / 250`}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12\"\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        marginBottom: '4%'\r\n                                    }}\r\n                                >\r\n                                    <div style={styles.buttonsDivStyling}>\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            style={styles.buttonStyling}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            type=\"submit\"\r\n                                            style={styles.buttonStyling}\r\n                                        >\r\n                                            Register\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(New_Complaint);\r\n\r\nlet styles = {\r\n    filedsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        width: '70%'\r\n    },\r\n    buttonStyling: {\r\n        width: '40%',\r\n        marginTop: '7%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold'\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\View_All_Camplaints.jsx",["332","333","334","335","336"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n//ICONS\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst View_All_Camplaints = (props) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hasDeleted, setHasDeleted] = useState(false);\r\n    const [specificData, setSpecificData] = useState([]);\r\n    const [recordToDelete, SetRecordToDelete] = useState('');\r\n    const [selectedOption, setSelectedOption] = useState('all');\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    let userRole = '';\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage()\r\n        if (parsedUserInfo && userRole === 'doctor') {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/fetchSpecificReports?reporterID=${parsedUserInfo._id}&role=doctor`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    setData(data);\r\n                    setSpecificData(data);\r\n                });\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, [hasDeleted]);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption === 'all') {\r\n            setSpecificData(data);\r\n        } else {\r\n            setSpecificData(data.filter(item => {\r\n                return item.reportStatus === selectedOption\r\n            }))\r\n        }\r\n    }, [selectedOption]);\r\n\r\n    const handleWhichRecordsToDisplayChange = (e) => {\r\n        setSelectedOption(e.target.value);\r\n    }\r\n\r\n    const handleDeleteIconClick = (reportID) => {\r\n        SetRecordToDelete(reportID);\r\n        setHasDeleted(false);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleReportSubjectClick = async (complaint) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ complaint })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Doctor_Complaint_Details/');\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const renderTableHeader = () => {\r\n        return (\r\n            <thead >\r\n                <tr style={{ borderStyle: 'none' }}>\r\n                    <th style={styles.tableHeaderStyling}>sr. no</th>\r\n                    <th style={styles.tableHeaderStyling}>Subject</th>\r\n                    <th style={styles.tableHeaderStyling}>Status</th>\r\n                    <th style={styles.tableHeaderStyling}>Date</th>\r\n                    <th style={styles.tableHeaderStyling}></th>\r\n                </tr>\r\n            </thead >\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        return specificData.map((item, index) => {\r\n            return (\r\n                <tr style={{ borderRightStyle: 'none' }}>\r\n                    <td>{index + 1}</td>\r\n                    <td><a onClick={() => handleReportSubjectClick(item)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.subject}</a></td>\r\n                    <td style={styles.tableRowStyling}>{item.reportStatus}</td>\r\n                    <td style={styles.tableRowStyling}>{item.date}</td>\r\n                    <td style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <DeleteIcon\r\n                            style={{ color: '#4169e1', fontSize: 26, cursor: 'pointer' }}\r\n                            onClick={() => handleDeleteIconClick(item._id)}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneReport?id=${recordToDelete}&role=doctor`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                } else {\r\n                    setHasDeleted(true);\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12 mb-lg-3\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '4%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"All Camplaints\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '1%',\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                flexDirection: 'row',\r\n                                                justifyContent: 'space-between'\r\n                                            }}\r\n                                        >\r\n                                            <FormControl style={{ width: '75%' }}>\r\n                                                <InputLabel\r\n                                                    style={{\r\n                                                        fontSize: 20,\r\n                                                        color: '#4169e1',\r\n                                                        fontWeight: 'bold',\r\n                                                        marginBottom: 4\r\n                                                    }}\r\n                                                    htmlFor=\"outlined-age-native-simple\">Select Which Complaints To Display</InputLabel>\r\n                                                <NativeSelect\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(e) => handleWhichRecordsToDisplayChange(e)}\r\n                                                    label=\"select\"\r\n                                                    style={{ width: '100%' }}\r\n                                                    inputProps={{\r\n                                                        name: 'select',\r\n                                                        id: 'outlined-age-native-simple',\r\n                                                    }}\r\n                                                >\r\n                                                    <option value=\"all\">All</option>\r\n                                                    <option value=\"pending\">Pending</option>\r\n                                                    <option value=\"resolved\">Resolved</option>\r\n                                                </NativeSelect>\r\n                                            </FormControl>\r\n\r\n                                            <Button\r\n                                                variant=\"outline-primary\"\r\n                                                style={styles.buttonStyling}\r\n                                                onClick={() => props.history.push('/Doctor_New_Complaint')}\r\n                                            >\r\n                                                New Complaint\r\n                                            </Button>\r\n                                        </div>\r\n                                        <div\r\n                                            style={{\r\n                                                paddingLeft: 15,\r\n                                                paddingRight: 15,\r\n                                                marginTop: 20,\r\n                                                visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                            }}\r\n                                        >\r\n                                            <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{ marginBottom: 20 }}>\r\n                                        {data.length !== 0 ?\r\n                                            <Table bordered style={{ borderStyle: 'none' }}>\r\n                                                {renderTableHeader()}\r\n                                                <tbody style={{ fontSize: 16 }}>\r\n                                                    {renderTableData()}\r\n                                                </tbody>\r\n\r\n                                            </Table>\r\n                                            :\r\n                                            <p\r\n                                                style={{\r\n                                                    textAlign: 'center',\r\n                                                    fontSize: 22,\r\n                                                    fontWeight: 'bold',\r\n                                                    fontFamily: 'sans-serif',\r\n                                                    textTransform: 'capitalize'\r\n                                                }}\r\n                                            >No Records to display</p>\r\n                                        }\r\n\r\n                                        <DialogBox\r\n                                            open={open}\r\n                                            title=\"Are You Sure You Want To Delete This Complaint?\"\r\n                                            content=\"By Cliking on 'YES' this Complaint will be deleted permanently\"\r\n                                            leftButtonName=\"No\"\r\n                                            rightButtonName=\"Yes\"\r\n                                            handleClose={() => setOpen(false)}\r\n                                            handleDelete={handleDialogBoxYesButton}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(View_All_Camplaints);\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    buttonStyling: {\r\n        width: '20%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold'\r\n    }\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Communication.jsx",["337","338","339","340","341","342"],"import React, { useEffect, useState, useRef, } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport { Howl } from 'howler'\r\n\r\n//ICONS\r\nimport DuoIcon from '@material-ui/icons/Duo';\r\nimport CallEndIcon from '@material-ui/icons/CallEnd';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport MicOffIcon from '@material-ui/icons/MicOff';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\r\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\r\nimport VideoCallOutlined from '@material-ui/icons/VideoCallOutlined';\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport ringtone from './Sounds/ringtone.mp3';\r\nimport CallNotification from './COMPONENTS/CallNotification';\r\n\r\n\r\nconst ringtoneSound = new Howl({\r\n    src: [ringtone],\r\n    loop: true,\r\n    preload: true\r\n})\r\n\r\nconst Communication = (props) => {\r\n\r\n    const socket = useRef();\r\n    const myPeer = useRef();\r\n    const myVideo = useRef();\r\n    const partnerVideo = useRef();\r\n\r\n    const [authorized, setAuthorized] = useState();\r\n\r\n    const [myID, setMyID] = useState(\"\");\r\n    const [stream, setStream] = useState();\r\n    const [caller, setCaller] = useState(\"\");\r\n    const [calling, setCalling] = useState(false);\r\n    const [callerName, setCallerName] = useState(\"\");\r\n    const [callerSignal, setCallerSignal] = useState();\r\n    const [audioMuted, setAudioMuted] = useState(false)\r\n    const [videoMuted, setVideoMuted] = useState(false)\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callRejected, setCallRejected] = useState(false);\r\n    const [connectedUsers, setConnectedUsers] = useState([]);\r\n    const [isReceivingCall, setIsReceivingCall] = useState(false);\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            let userInfo = await JSON.parse(localStorage.getItem('userInfo'));\r\n            let userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n            console.log(userRole)\r\n            console.log(userInfo)\r\n            if (!userInfo || userRole !== 'doctor') {\r\n                setAuthorized(false)\r\n                setTimeout(() => {\r\n                    props.history.push('/')\r\n                }, 2000);\r\n            }\r\n            else {\r\n                setAuthorized(true)\r\n                socket.current = io.connect(\"http://localhost:5000\");\r\n                socket.current.emit('userInfo', { name: userInfo.name, userRole: 'doctor' })\r\n\r\n                socket.current.on(\"yourID\", (id) => {\r\n                    setMyID(id);\r\n                })\r\n                socket.current.on(\"allUsers\", (users) => {\r\n                    setConnectedUsers(users);\r\n                })\r\n\r\n                socket.current.on(\"callComing\", (data) => {\r\n                    setIsReceivingCall(true);\r\n                    ringtoneSound.play();\r\n                    setCaller(data.callerID);\r\n                    setCallerName(data.callerName)\r\n                    setCallerSignal(data.signal);\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        // \"http://192.168.10.8:5000\"\r\n    }, []);\r\n\r\n    function makeCall(id) {\r\n        // alert(id)\r\n        if (id !== '' && id !== myID) {\r\n            navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n                setStream(stream);\r\n                setCalling(true)\r\n                setCaller(id)\r\n                if (myVideo.current) {\r\n                    console.log('make call my stream: ', stream)\r\n                    myVideo.current.srcObject = stream;\r\n                }\r\n                const peer = new Peer({\r\n                    initiator: true,\r\n                    trickle: false,\r\n                    config: {\r\n\r\n                        iceServers: [\r\n                            { url: 'stun:stun01.sipphone.com' },\r\n                            { url: 'stun:stun.ekiga.net' },\r\n                            { url: 'stun:stun.fwdnet.net' },\r\n                            { url: 'stun:stun.ideasip.com' },\r\n                            { url: 'stun:stun.iptel.org' },\r\n                            { url: 'stun:stun.rixtelecom.se' },\r\n                            { url: 'stun:stun.schlund.de' },\r\n                            { url: 'stun:stun.l.google.com:19302' },\r\n                            { url: 'stun:stun1.l.google.com:19302' },\r\n                            { url: 'stun:stun2.l.google.com:19302' },\r\n                            { url: 'stun:stun3.l.google.com:19302' },\r\n                            { url: 'stun:stun4.l.google.com:19302' },\r\n                            { url: 'stun:stunserver.org' },\r\n                            { url: 'stun:stun.softjoys.com' },\r\n                            { url: 'stun:stun.voiparound.com' },\r\n                            { url: 'stun:stun.voipbuster.com' },\r\n                            { url: 'stun:stun.voipstunt.com' },\r\n                            { url: 'stun:stun.voxgratia.org' },\r\n                            { url: 'stun:stun.xten.com' },\r\n                            {\r\n                                url: 'turn:numb.viagenie.ca',\r\n                                credential: 'muazkh',\r\n                                username: 'webrtc@live.com'\r\n                            },\r\n                            {\r\n                                url: 'turn:192.158.29.39:3478?transport=udp',\r\n                                credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n                                username: '28224511:1379330808'\r\n                            },\r\n                            {\r\n                                url: 'turn:192.158.29.39:3478?transport=tcp',\r\n                                credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n                                username: '28224511:1379330808'\r\n                            }\r\n                        ]\r\n                    },\r\n                    stream: stream,\r\n                });\r\n\r\n                myPeer.current = peer;\r\n\r\n                peer.on(\"signal\", data => {\r\n                    socket.current.emit(\"callUser\", { userToCall: id, signalData: data, callerID: myID, callerName: 'WAHB UR REHMAN' })\r\n                })\r\n\r\n                peer.on(\"stream\", stream => {\r\n                    if (partnerVideo.current) {\r\n                        partnerVideo.current.srcObject = stream;\r\n                    }\r\n                });\r\n\r\n                peer.on('error', (err) => {\r\n                    endCall()\r\n                })\r\n\r\n                socket.current.on(\"callAccepted\", signal => {\r\n                    setCallAccepted(true);\r\n                    peer.signal(signal);\r\n                })\r\n\r\n                socket.current.on('close', () => {\r\n                    window.location.reload()\r\n                })\r\n\r\n                socket.current.on('rejected', () => {\r\n                    window.location.reload()\r\n                })\r\n            })\r\n                .catch(() => {\r\n                    alert('audio and video permissions are not granted')\r\n                })\r\n        } else {\r\n            alert('you cannot make a call to yourself')\r\n            return\r\n        }\r\n    }\r\n\r\n    function acceptCall() {\r\n        ringtoneSound.unload();\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n            setStream(stream);\r\n            if (myVideo.current) {\r\n                console.log('in call my stream: ', stream)\r\n                myVideo.current.srcObject = stream;\r\n            }\r\n            setCallAccepted(true);\r\n            const peer = new Peer({\r\n                initiator: false,\r\n                trickle: false,\r\n                stream: stream,\r\n            });\r\n\r\n            myPeer.current = peer\r\n\r\n            peer.on(\"signal\", data => {\r\n                socket.current.emit(\"acceptCall\", { signal: data, to: caller })\r\n            })\r\n\r\n            peer.on(\"stream\", stream => {\r\n                partnerVideo.current.srcObject = stream;\r\n            });\r\n\r\n            peer.on('error', (err) => {\r\n                endCall()\r\n            })\r\n\r\n            peer.signal(callerSignal);\r\n\r\n            socket.current.on('close', () => {\r\n                window.location.reload()\r\n            })\r\n        })\r\n            .catch(() => {\r\n                console.log('audio and video permissions are not granted')\r\n                alert('audio and video permissions are not granted')\r\n            })\r\n    }\r\n\r\n    function declineCall() {\r\n        ringtoneSound.unload();\r\n        setCallRejected(true)\r\n        socket.current.emit('rejected', { to: caller })\r\n        window.location.reload()\r\n    }\r\n\r\n    function endCall() {\r\n        myPeer.current.destroy()\r\n        socket.current.emit('close', { to: caller })\r\n        window.location.reload()\r\n    }\r\n\r\n    function handleAudio() {\r\n        if (stream) {\r\n            setAudioMuted(!audioMuted)\r\n            stream.getAudioTracks()[0].enabled = audioMuted\r\n        }\r\n    }\r\n\r\n    function handleVideo() {\r\n        if (stream) {\r\n            setVideoMuted(!videoMuted)\r\n            stream.getVideoTracks()[0].enabled = videoMuted\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Navbar />\r\n                        </div>\r\n\r\n                        <div id=\"foreground\" className=\"col-md-10\"\r\n                            style={{\r\n                                marginTop: '5%',\r\n                                padding: 0,\r\n                            }}>\r\n                            <div\r\n                                className=\"col-12\"\r\n                                style={{\r\n                                    paddingLeft: '4%',\r\n                                    paddingRight: '4%',\r\n                                    paddingBottom: '2%'\r\n                                }}\r\n                            >\r\n                                <Banner formName=\"Communication\" bannerHeight={150} />\r\n                            </div>\r\n\r\n                            <div\r\n                                style={{\r\n                                    // borderWidth: 2,\r\n                                    // borderColor: 'green',\r\n                                    // borderStyle: 'double',\r\n                                    marginInline: '4%',\r\n                                    marginBottom: 40,\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    justifyContent: 'space-between'\r\n                                }}\r\n                            >\r\n                                <div style={styles.containerDiv} >\r\n                                    {stream && !callAccepted && (\r\n                                        <div style={styles.videoPlayerDiv}>\r\n                                            <h5 style={styles.h5}>Calling ....</h5>\r\n                                            <video playsInline muted ref={myVideo} autoPlay />\r\n                                            <div style={styles.iconDivContainer} >\r\n                                                <div style={styles.iconDiv} onClick={endCall}>\r\n                                                    <CallEndIcon style={{ ...styles.incallIcon, color: 'red' }} />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {callAccepted && (\r\n                                        <div style={styles.videoPlayerDiv}>\r\n                                            <h5 style={styles.h5}>{callerName}</h5>\r\n                                            <video style={styles.myVideo} playsInline muted ref={myVideo} autoPlay />\r\n                                            <video style={{ borderRadius: 10 }} playsInline muted ref={partnerVideo} autoPlay />\r\n                                            <div style={styles.iconDivContainer} >\r\n                                                <div style={styles.iconDiv} onClick={handleAudio}>\r\n                                                    {audioMuted ?\r\n                                                        <MicOffIcon style={styles.incallIcon} />\r\n                                                        :\r\n                                                        <MicIcon style={styles.incallIcon} />\r\n                                                    }\r\n                                                </div>\r\n\r\n                                                <div style={styles.iconDiv} onClick={handleVideo}>\r\n                                                    {videoMuted ?\r\n                                                        <VideocamOffIcon style={styles.incallIcon} />\r\n                                                        :\r\n                                                        <VideocamIcon style={styles.incallIcon} />\r\n                                                    }\r\n                                                </div>\r\n\r\n                                                <div style={styles.iconDiv} onClick={endCall}>\r\n                                                    <CallEndIcon style={{ ...styles.incallIcon, color: 'red' }} />\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div style={styles.contactsDivContainer}>\r\n                                    <h5 style={styles.contactsH5}>Active Users</h5>\r\n                                    <div style={styles.contactsSection}>\r\n                                        {\r\n                                            connectedUsers && (connectedUsers.map((user, index) => {\r\n                                                if (user.userID !== myID) {\r\n                                                    return (\r\n                                                        <div key={index} style={styles.contactDiv}>\r\n                                                            <div style={styles.contactName}>{user.name}</div>\r\n                                                            <div onClick={() => makeCall(user.userID)}>\r\n                                                                <VideoCallOutlined\r\n                                                                    key={user.userName}\r\n                                                                    style={styles.icon}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            }))\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n            <CallNotification\r\n                open={isReceivingCall && !callAccepted && !callRejected}\r\n                handleClose={declineCall}\r\n                title=\"Incoming Call\"\r\n                content={`${callerName} is calling`}\r\n                leftButtonName=\"decline\"\r\n                rightButtonName=\"Accept\"\r\n                handleAccept={acceptCall}\r\n            />\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Communication;\r\n\r\nconst styles = {\r\n    containerDiv: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        marginBottom: 20,\r\n        width: '70%',\r\n        // borderStyle: 'dashed',\r\n        // borderWidth: 2,\r\n        // borderColor: 'blue'\r\n    },\r\n    h5: {\r\n        textAlign: 'center',\r\n        backgroundColor: '#4169e1',\r\n        fontSize: 24,\r\n        color: '#ffffff',\r\n        paddingBlock: 5,\r\n        fontFamily: 'sans-serif',\r\n        borderRadius: 10\r\n    },\r\n    myVideo: {\r\n        width: '18%',\r\n        height: '20%',\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        top: '23.5%',\r\n        left: 50,\r\n        backgroundColor: '#000000',\r\n        borderRadius: 10\r\n        // borderStyle: 'dashed',\r\n        // borderWidth: 2,\r\n        // borderColor: 'blue'\r\n    },\r\n    videoPlayerDiv: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '100%',\r\n    },\r\n    iconDivContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#4169e1',\r\n        paddingBlock: 3,\r\n        marginTop: 10,\r\n        borderRadius: 10\r\n    },\r\n    incallIcon: {\r\n        color: '#4169e1',\r\n        fontSize: 30\r\n    },\r\n    iconDiv: {\r\n        backgroundColor: '#ffffff',\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 20,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginLeft: 40\r\n    },\r\n    contactsDivContainer: {\r\n        width: '25%',\r\n        height: '',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'flex-start',\r\n        // borderStyle: 'dashed',\r\n        // borderWidth: 2,\r\n        // borderColor: 'green'\r\n    },\r\n    contactsH5: {\r\n        textAlign: 'center',\r\n        fontFamily: 'sans-serif',\r\n        color: '#ffffff',\r\n        backgroundColor: '#4169e1',\r\n        paddingBlock: 5,\r\n        borderRadius: 5\r\n    },\r\n    contactsSection: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        // borderStyle: 'dashed',\r\n        // borderWidth: 2,\r\n        // borderColor: 'green'\r\n    },\r\n    contactDiv: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        paddingInline: 15,\r\n        alignItems: 'center',\r\n        marginBottom: 5\r\n    },\r\n    contactName: {\r\n        fontSize: 20,\r\n        color: '#4169e1',\r\n        fontFamily: 'sans-serif',\r\n        textTransfrom: 'capitalize',\r\n        fontWeight: 'bold'\r\n    },\r\n    icon: {\r\n        fontSize: 40,\r\n        color: '#4169e1'\r\n    }\r\n}\r\n\r\n// const styles = {\r\n//     contactsDivContainer: {\r\n//         width: '25%',\r\n//         display: 'flex',\r\n//         flexDirection: 'column',\r\n//         justifyContent: 'space-between',\r\n//         // borderStyle: 'dashed',\r\n//         // borderWidth: 2,\r\n//         // borderColor: 'green'\r\n//     },\r\n//     contactsH5: {\r\n//         textAlign: 'center',\r\n//         fontFamily: 'sans-serif',\r\n//         color: '#ffffff',\r\n//         backgroundColor: '#4169e1',\r\n//         paddingBlock: 5\r\n//     },\r\n//     contactsSection: {\r\n//         display: 'flex',\r\n//         flexDirection: 'column',\r\n//         rderStyle: 'dashed',\r\n//         borderWidth: 2,\r\n//         borderColor: 'green'\r\n//     },\r\n//     contactDiv: {\r\n//         display: 'flex',\r\n//         flexDirection: 'row',\r\n//         justifyContent: 'space-between',\r\n//         paddingInline: 15,\r\n//         alignItems: 'center',\r\n//         marginBottom: 5\r\n//     },\r\n//     contactName: {\r\n//         fontSize: 20,\r\n//         color: '#4169e1',\r\n//         fontFamily: 'sans-serif',\r\n//         textTransfrom: 'capitalize',\r\n//         fontWeight: 'bold'\r\n//     },\r\n//     icon: {\r\n//         fontSize: 40,\r\n//         color: '#4169e1'\r\n//     }\r\n// }","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Doctor_Complaint_Details.jsx",["343","344"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n//COMPONENTS\r\n\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\n\r\nconst Doctor_Complaint_Details = (props) => {\r\n\r\n    const [data, setData] = useState();\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState(true);\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n    let userRole = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            parsedInfo = JSON.parse(info);\r\n            parsedInfo = parsedInfo.complaint\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo && userRole === 'doctor') {\r\n            setAuthorized(true)\r\n            if (parsedInfo) {\r\n                setData(parsedInfo)\r\n            } else {\r\n                setSnackBar({\r\n                    snackBarMessage: 'Complaint Not Found !!',\r\n                    isError: true,\r\n                    showSnackBar: true\r\n                });\r\n                setTimeout(() => {\r\n                    setSnackBar({\r\n                        showSnackBar: false\r\n                    })\r\n                }, 3000)\r\n            }\r\n\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, [])\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar({ showSnackBar: false });\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneReport?id=${parsedInfo._id}&role=doctor`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(async data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 2000)\r\n                } else {\r\n                    await localStorage.removeItem('recordsPassToNextScreen')\r\n                    setData('');\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 2000)\r\n                }\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Navbar />\r\n                        </div>\r\n\r\n                        <div id=\"foreground\" className=\"col-md-10\"\r\n                            style={{\r\n                                marginTop: '5%',\r\n                                padding: 0,\r\n                            }}>\r\n                            <div\r\n                                className=\"col-12\"\r\n                                style={{\r\n                                    paddingLeft: '4%',\r\n                                    paddingRight: '4%',\r\n                                }}\r\n                            >\r\n                                <Banner formName=\"New Complaint\" bannerHeight={150} />\r\n\r\n                                <div\r\n                                    style={{\r\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                        margin: 15,\r\n                                    }}\r\n                                >\r\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            {data ?\r\n                                <div className=\"d-flex flex-column mx-5 \" >\r\n                                    <div style={styles.filedsDivStyling}>\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"subject\"\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.subject}\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"status\"\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.reportStatus}\r\n                                        />\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"date\"\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.date}\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"complaint\"\r\n                                            multiline\r\n                                            rows={8}\r\n                                            rowsMax={Infinity}\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.reportMessage}\r\n                                        />\r\n\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            style={styles.buttonStyling}\r\n                                            onClick={() => setOpen(true)}\r\n                                        >\r\n                                            Delete\r\n                                            </Button>\r\n                                    </div>\r\n\r\n                                    <DialogBox\r\n                                        open={open}\r\n                                        title=\"Are You Sure You Want To Delete This Complaint?\"\r\n                                        content=\"By Cliking on 'YES' this Complaint will be deleted permanently.\"\r\n                                        leftButtonName=\"No\"\r\n                                        rightButtonName=\"Yes\"\r\n                                        handleClose={() => setOpen(false)}\r\n                                        handleDelete={handleDialogBoxYesButton}\r\n                                    />\r\n                                </div>\r\n                                :\r\n                                null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Doctor_Complaint_Details);\r\n\r\nlet styles = {\r\n    filedsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        marginBottom: '2.5%'\r\n    },\r\n    buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        width: '70%'\r\n    },\r\n    buttonStyling: {\r\n        width: '30%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        marginTop: 10\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Display_All_Cases.jsx",["345","346","347","348","349","350","351","352","353","354","355"],"import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n//ICONS\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\n\r\nconst Display_All_Cases = (props) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [specificData, setSpecificData] = useState([]);\r\n    const [selectedOption, setSelectedOption] = useState('all');\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n\r\n    let parsedUserInfo = '';\r\n    let userRole = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo && userRole === 'doctor') {\r\n            setAuthorized(true)\r\n            await fetch(`http://localhost:3000/fetchSpecificHospitalPatients?recommendedHospital=${parsedUserInfo.hospital}`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    console.log(data);\r\n                    setSpecificData(data);\r\n                    setData(data);\r\n                    setIsLoading(false);\r\n                });\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption === 'all') {\r\n            setSpecificData(data);\r\n        } else {\r\n            setSpecificData(data.filter(item => {\r\n                return item.dengueStatus === selectedOption\r\n            }))\r\n        }\r\n    }, [selectedOption]);\r\n\r\n    const handleNameClick = async (patientID) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ patientID })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Patient_Details/');\r\n    }\r\n\r\n\r\n    const renderTableHeader = () => {\r\n        return (\r\n            <thead >\r\n                <tr style={{ borderStyle: 'none' }}>\r\n                    <th style={styles.tableHeaderStyling}>Sr. No</th>\r\n                    <th style={styles.tableHeaderStyling}>Patient Name</th>\r\n                    <th style={styles.tableHeaderStyling}>Case ID</th>\r\n                    <th style={styles.tableHeaderStyling}>Age</th>\r\n                    <th style={styles.tableHeaderStyling}>Gender</th>\r\n                    <th style={styles.tableHeaderStyling}>Dengue Status</th>\r\n                    <th style={styles.tableHeaderStyling}>Date</th>\r\n                </tr>\r\n            </thead>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        return specificData.map((item, index) => {\r\n            return (\r\n                <tr style={{ borderRightStyle: 'none' }}>\r\n                    <td style={styles.tableRowStyling}>{index + 1}</td>\r\n                    <td><a onClick={() => handleNameClick(item._id)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.name}</a></td>\r\n                    <td style={styles.tableRowStyling}>{item.caseID}</td>\r\n                    <td style={styles.tableRowStyling}>{item.age}</td>\r\n                    <td style={styles.tableRowStyling}>{item.gender}</td>\r\n                    <td style={styles.tableRowStyling}>{item.dengueStatus}</td>\r\n                    <td style={styles.tableRowStyling}>{item.date}</td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '2%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"All Cases\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n\r\n                                    <FormControl style={{ width: '97%' }}>\r\n                                        <InputLabel\r\n                                            style={{\r\n                                                fontSize: 20,\r\n                                                color: '#4169e1',\r\n                                                fontWeight: 'bold',\r\n                                                marginBottom: 0\r\n                                            }}\r\n                                            htmlFor=\"outlined-age-native-simple\">Select Which Records To Display</InputLabel>\r\n                                        <NativeSelect\r\n                                            variant=\"outlined\"\r\n                                            onChange={(e) => setSelectedOption(e.target.value)}\r\n                                            label=\"select\"\r\n                                            style={{ width: '100%', marginBottom: 25 }}\r\n                                            inputProps={{\r\n                                                name: 'select',\r\n                                                id: 'outlined-age-native-simple',\r\n                                            }}\r\n                                        >\r\n                                            <option selected value=\"all\">All</option>\r\n                                            <option value=\"negative\">Negative</option>\r\n                                            <option value=\"positive\">Positive</option>\r\n                                            <option value=\"suspected\">Suspected</option>\r\n                                        </NativeSelect>\r\n                                    </FormControl>\r\n\r\n                                    <div style={{ marginBottom: 20 }}>\r\n\r\n                                        {data.length !== 0 ?\r\n                                            <Table bordered style={{ borderStyle: 'none' }}>\r\n                                                {renderTableHeader()}\r\n                                                <tbody style={{ fontSize: 16 }}>\r\n                                                    {renderTableData()}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                            :\r\n                                            <p style={styles.noRecordTextStyling}>\r\n                                                No Case to display\r\n                                    </p>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Display_All_Cases);\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    tableIconStyling: {\r\n        color: '#4169e1',\r\n        fontSize: 26,\r\n        cursor: 'pointer'\r\n    },\r\n    noRecordTextStyling: {\r\n        textAlign: 'center',\r\n        fontSize: 22,\r\n        fontWeight: 'bold',\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'capitalize'\r\n\r\n    }\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Patient_Details.jsx",["356","357","358","359"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n//BOOTSTRAP\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n//COMPONENTS\r\nimport Navbar from \"../Navbar\";\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport Display_Patient_Record from './Display_Patient_Record';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst Patient_Details = (props) => {\r\n\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showSection, setshowSection] = useState(false);\r\n    const [buttonText, setbuttonText] = useState(\"WRITE RESPONSE\");\r\n    const [newDengueStatus, setNewDengueStatus] = useState('negative');\r\n    const ShowHideSection = () => {\r\n        if (buttonText === \"WRITE RESPONSE\") {\r\n            setshowSection(true)\r\n            setbuttonText(\"HIDE RESPONSE\")\r\n\r\n        }\r\n\r\n        else {\r\n            setbuttonText(\"WRITE RESPONSE\")\r\n            setshowSection(false)\r\n        }\r\n    }\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    const [patientInfo, setPatientInfo] = useState({\r\n        cassID: '',\r\n        name: '',\r\n        gender: '',\r\n        age: '',\r\n        district: '',\r\n        homeTown: '',\r\n        dengueStatus: '',\r\n        dispensary: '',\r\n        date: '',\r\n        symptoms: '',\r\n        symptomsImage: '',\r\n        message: '',\r\n        messageError: false,\r\n    });\r\n    \r\n    let userRole = '';\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n    const getpatientInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            parsedInfo = JSON.parse(info);\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getpatientInfoFromLocalStorage();\r\n        if (parsedUserInfo && userRole === 'doctor') {\r\n            setAuthorized(true)\r\n            await fetch(`http://localhost:3000/findOnePatientsRecord?id=${parsedInfo.patientID}&role=doctor`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    if (data.error) {\r\n                        console.log(data);\r\n                    } else {\r\n                        console.log(data);\r\n                        setPatientInfo({\r\n                            caseID: data.caseID,\r\n                            name: data.name,\r\n                            gender: data.gender,\r\n                            age: data.age,\r\n                            district: data.district,\r\n                            homeTown: data.homeTown,\r\n                            dengueStatus: data.dengueStatus,\r\n                            dispensary: data.dispensary,\r\n                            date: data.date,\r\n                            symptoms: data.symptoms,\r\n                            symptomsImage: data.symptomsImage\r\n                        });\r\n                        setIsLoading(false);\r\n                    }\r\n                });\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        await getpatientInfoFromLocalStorage();\r\n        await fetch(`http://localhost:3000/updateOnePatientRecord?role=doctor`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + parsedUserInfo.authToken\r\n            },\r\n            body: JSON.stringify({\r\n                patientID: parsedInfo.patientID,\r\n                dengueStatus: newDengueStatus,\r\n                doctorResponse: patientInfo.message,\r\n                respondedBy: parsedUserInfo._id,\r\n                caseStatus: 'newForHealthWorker'\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar({\r\n                        isError: true,\r\n                        showSnackBar: true,\r\n                        snackBarMessage: data.error\r\n                    });\r\n                } else {\r\n                    setPatientInfo({ ...patientInfo, message: '' })\r\n                    setSnackBar({\r\n                        isError: false,\r\n                        showSnackBar: true,\r\n                        snackBarMessage: data.message\r\n                    });\r\n                }\r\n                setTimeout(() => {\r\n                    setSnackBar({ showSnackBar: false })\r\n                    setbuttonText(\"WRITE RESPONSE\")\r\n                    setshowSection(false)\r\n                }, 4000)\r\n            }).catch(error => {\r\n                console.log('catch error: ', error);\r\n            })\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar({ showSnackBar: false });\r\n    }\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '8%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div id=\"banner\"\r\n                                    className=\"col-12 mb-lg-3\"\r\n                                    style={{ paddingLeft: '4%', paddingRight: '4%', marginBottom: 20 }}\r\n                                >\r\n                                    <Banner\r\n                                        formName=\"Patient Details\"\r\n                                        bannerHeight={150}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-12\" id=\"patientInfo\">\r\n                                <div\r\n                                    style={{\r\n                                        paddingLeft: '9%',\r\n                                        paddingRight: '9%',\r\n                                        marginBottom: 20\r\n                                    }}\r\n                                >\r\n\r\n                                    {patientInfo ?\r\n                                        <Display_Patient_Record\r\n                                            caseID={patientInfo.caseID}\r\n                                            name={patientInfo.name}\r\n                                            gender={patientInfo.gender}\r\n                                            age={patientInfo.age}\r\n                                            district={patientInfo.district}\r\n                                            homeTown={patientInfo.homeTown}\r\n                                            dengueStatus={patientInfo.dengueStatus}\r\n                                            dispensary={patientInfo.dispensary}\r\n                                            date={patientInfo.date}\r\n                                            symptoms={patientInfo.symptoms}\r\n                                            symptomsImage={patientInfo.symptomsImage}\r\n                                        />\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div\r\n                                className=\"col-12\"\r\n                                style={{ marginBottom: '1%', display: 'flex', justifyContent: 'center' }}\r\n                            >\r\n                                <Button\r\n                                    href={showSection ? '#form' : '#banner'}\r\n                                    variant=\"outline-primary\"\r\n                                    style={styles.deleteButtonStyling}\r\n                                    onClick={() => ShowHideSection()}\r\n                                >\r\n                                    {buttonText}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            showSection ?\r\n                                <>\r\n                                    <div className=\"row col-6 mx-auto\">\r\n                                        <div>\r\n                                            <div\r\n                                                style={{\r\n                                                    visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                                    marginBottom: 10\r\n                                                }}\r\n                                            >\r\n                                                <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                            </div>\r\n                                            <form id=\"form\"\r\n                                                onSubmit={handleSubmit}\r\n                                                method=\"POST\"\r\n                                                style={{ marginBottom: '5%' }}\r\n                                            >\r\n                                                <InputLabel\r\n                                                    style={{\r\n                                                        fontSize: 24,\r\n                                                        color: '#4169e1',\r\n                                                        fontWeight: 'bold',\r\n                                                    }}\r\n                                                    htmlFor=\"outlined-age-native-simple\">Select status</InputLabel>\r\n                                                <NativeSelect\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(e) => setNewDengueStatus(e.target.value)}\r\n                                                    label=\"select\"\r\n                                                    style={{ width: '100%' }}\r\n                                                    inputProps={{\r\n                                                        name: 'select',\r\n                                                        id: 'outlined-age-native-simple',\r\n                                                    }}\r\n                                                >\r\n                                                    <option value=\"negative\">Negative</option>\r\n                                                    <option value=\"positive\">Positive</option>\r\n                                                    <option value=\"suspected\">Suspected</option>\r\n                                                </NativeSelect>\r\n                                                <TextField\r\n                                                    required\r\n                                                    variant=\"standard\"\r\n                                                    label=\"Message\"\r\n                                                    multiline\r\n                                                    value={patientInfo.message}\r\n                                                    contentEditable={false}\r\n                                                    rows={7}\r\n                                                    rowsMax={Infinity}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{\r\n                                                        style:\r\n                                                        {\r\n                                                            color: patientInfo.messageError ? 'red' : '#4169e1',\r\n\r\n                                                            fontSize: 22, textTransform: 'uppercase'\r\n                                                        }\r\n                                                    }}\r\n                                                    name=\"Message\"\r\n                                                    inputProps={{ maxLength: 250 }}\r\n                                                    onChange={e => setPatientInfo({ ...patientInfo, message: e.target.value })}\r\n                                                    error={patientInfo.messageError}\r\n                                                    helperText={patientInfo.message ? `${patientInfo.message.length} / 250` : 0 / 250}\r\n\r\n                                                />\r\n\r\n                                                <div className=\"col-md-12\"\r\n                                                    style={{\r\n                                                        display: 'flex',\r\n                                                        justifyContent: 'center',\r\n                                                    }}\r\n                                                >\r\n                                                    <div style={styles.buttonsDivStyling}>\r\n                                                        <Button\r\n                                                            variant=\"outline-primary\"\r\n                                                            style={styles.buttonStyling}\r\n                                                        >\r\n                                                            Discard\r\n                                                    </Button>\r\n\r\n                                                        <Button\r\n                                                            variant=\"outline-primary\"\r\n                                                            type=\"submit\"\r\n                                                            style={styles.buttonStyling}\r\n                                                        >\r\n                                                            send\r\n                                                    </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </form>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </>\r\n                                :\r\n                                null\r\n                        }\r\n\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Patient_Details;\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    deleteButtonStyling: {\r\n        width: 220,\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    dialogBoxbuttonStyling: {\r\n        width: '22%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    }, buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        width: '70%'\r\n    },\r\n    buttonStyling: {\r\n        width: '40%',\r\n        marginTop: '7%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold'\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Doctor_Dashboard.jsx",["360","361"],"import React, { useState, useEffect } from \"react\";\nimport { withRouter } from 'react-router-dom';\n\n//COMPONENTS\nimport Navbar from \"../Navbar\";\nimport Card from \"../COMPONENTS/CardButton\";\n\n//ICONS\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DialpadIcon from '@material-ui/icons/Dialpad';\nimport PageviewIcon from '@material-ui/icons/Pageview';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst Doctor_Dashboard = (props) => {\n\n    const [authorized, setAuthorized] = useState();\n\n    useEffect(async () => {\n        try {\n            let getUserInfo = await localStorage.getItem('userInfo');\n            let userRole = await localStorage.getItem('userRole');\n            console.log(userRole)\n            console.log(getUserInfo)\n            if (!getUserInfo && userRole !== 'doctor') {\n                setAuthorized(false)\n                setTimeout(() => {\n                    props.history.push('/')\n                }, 2000);\n            }\n            else {\n                setAuthorized(true)\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n    }, [])\n\n    const handleCardButton = (buttonName) => {\n        props.history.push(buttonName);\n    }\n    return (\n        <>\n            {authorized ?\n                <div className=\"container-fluid\"\n                    style={{\n                        backgroundColor: \"white\",\n                    }}\n                >\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Navbar />\n                        </div>\n                        <div\n                            className=\"row\"\n                            style={styles.dashBoardRowStyling}>\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"Current cases\"\n                                    icon={<VisibilityIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Display_Current_Cases/')}\n                                />\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"All cases\"\n                                    icon={<PageviewIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Display_All_Cases/')}\n                                />\n\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"Communication\"\n                                    icon={<DialpadIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Communication/')}\n                                />\n\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"Complaint\"\n                                    icon={<AddCircleIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Doctor_New_Complaint/')}\n                                />\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"All Complaints\"\n                                    icon={<InboxIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/View_All_Camplaints/')}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                :\n                <p>You Must Be Logged In With An Authorized Account!!</p>\n            }\n        </>\n    );\n};\nexport default withRouter(Doctor_Dashboard);\n\nconst styles = {\n    dashBoardRowStyling: {\n        marginTop: '10%',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        paddingLeft: '12%',\n        paddingRight: '12%',\n        marginBottom: 20\n        // borderColor: 'blue',\n        // borderWidth: 5,\n        // borderStyle: 'dashed'\n    },\n    buttonDivStyling: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n    },\n    iconStyling: {\n        width: '60%',\n        height: '60%',\n        color: '#4169e1',\n    }\n}","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Display_Current_Cases.jsx",["362","363","364"],"import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\n\r\nconst Display_Current_Cases = (props) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n\r\n\r\n    let parsedUserInfo = '';\r\n    let userRole = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo && userRole === 'doctor') {\r\n            setAuthorized(true)\r\n            await fetch(`http://localhost:3000/fetchSpecificHospitalPatients?recommendedHospital=${parsedUserInfo.hospital}`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    console.log(data);\r\n                    setData(data.filter(item => {\r\n                        return item.caseStatus === 'newForDoctor'\r\n                    }));\r\n                    setIsLoading(false);\r\n                });\r\n\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, []);\r\n\r\n    const handleNameClick = async (patientID) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ patientID })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Patient_Details/');\r\n    }\r\n\r\n    const renderTableHeader = () => {\r\n        return (\r\n            <thead >\r\n                <tr style={{ borderStyle: 'none' }}>\r\n                    <th style={styles.tableHeaderStyling}>Sr. No</th>\r\n                    <th style={styles.tableHeaderStyling}>Patient Name</th>\r\n                    <th style={styles.tableHeaderStyling}>Case ID</th>\r\n                    <th style={styles.tableHeaderStyling}>Age</th>\r\n                    <th style={styles.tableHeaderStyling}>Gender</th>\r\n                    <th style={styles.tableHeaderStyling}>Dengue Status</th>\r\n                    <th style={styles.tableHeaderStyling}>Date</th>\r\n                </tr>\r\n            </thead>\r\n        );\r\n    }\r\n\r\n    const renderTableData = () => {\r\n        return data.map((item, index) => {\r\n            return (\r\n                <tr style={{ borderRightStyle: 'none' }}>\r\n                    <td style={styles.tableRowStyling}>{index + 1}</td>\r\n                    <td><a onClick={() => handleNameClick(item._id)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.name}</a></td>\r\n                    <td style={styles.tableRowStyling}>{item.caseID}</td>\r\n                    <td style={styles.tableRowStyling}>{item.age}</td>\r\n                    <td style={styles.tableRowStyling}>{item.gender}</td>\r\n                    <td style={styles.tableRowStyling}>{item.dengueStatus}</td>\r\n                    <td style={styles.tableRowStyling}>{item.date}</td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '2%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"Current Cases\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '1%',\r\n                                        }}\r\n                                    >\r\n                                    </div>\r\n\r\n                                    <div style={{ marginBottom: 20 }}>\r\n\r\n                                        {data.length !== 0 ?\r\n                                            <Table bordered style={{ borderStyle: 'none' }}>\r\n                                                {renderTableHeader()}\r\n                                                <tbody style={{ fontSize: 16 }}>\r\n                                                    {renderTableData()}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                            :\r\n                                            <p style={styles.noRecordTextStyling}>\r\n                                                No Case to display\r\n                                            </p>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Display_Current_Cases);\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    tableIconStyling: {\r\n        color: '#4169e1',\r\n        fontSize: 26,\r\n        cursor: 'pointer'\r\n    },\r\n    noRecordTextStyling: {\r\n        textAlign: 'center',\r\n        fontSize: 22,\r\n        fontWeight: 'bold',\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'capitalize'\r\n\r\n    }\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Add_Person.jsx",["365","366","367","368","369"],"import React, { useState, Fragment, Component } from 'react';\n\n\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\n\n\n//COMPONENTS\nimport Navbar from '../Navbar';\nimport Banner from '../COMPONENTS/Banner';\nimport Person_RegistrationForm from \"../COMPONENTS/Person_RegistrationForm\";\n\nclass Add_Person extends Component {\n\n    state = {\n        authorized: '',\n        selectedOption: 'healthWorker'\n    };\n\n    componentDidMount() {\n        try {\n            if (localStorage.getItem('userInfo')) {\n                this.setState({ authorized: true })\n            }\n            else {\n                this.setState({ authorized: false })\n                setTimeout(() => {\n                    this.props.history.push('/')\n                }, 2000)\n\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    render() {\n        return (\n            <>\n                {this.state.authorized ?\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <Navbar />\n                            </div>\n\n                            <div id=\"foreground\" className=\"col-md-10\"\n                                style={{\n                                    marginTop: '5%',\n                                    padding: 0,\n                                }}>\n                                <div\n                                    className=\"col-12 mb-lg-3\"\n                                    style={{ paddingLeft: '4%', paddingRight: '4%' }}\n                                >\n                                    <Banner\n                                        bannerTitle={this.state.selectedOption}\n                                        formName=\"Registeration Form\"\n                                        bannerHeight={150}\n                                    />\n                                </div>\n\n                                <div style={{\n                                    padding: '6%'\n                                }}>\n                                    <FormControl style={{ width: '100%' }}>\n                                        <InputLabel\n                                            style={{\n                                                fontSize: 20,\n                                                color: '#4169e1',\n                                                fontWeight: 'bold',\n                                                textTransform: 'uppercase',\n                                            }}\n                                            htmlFor=\"outlined-age-native-simple\">Select What To Register</InputLabel>\n                                        <NativeSelect\n                                            variant=\"outlined\"\n                                            onChange={(e) => this.setState({ selectedOption: e.target.value })}\n                                            label=\"select\"\n                                            style={{\n                                                width: '100%',\n                                                marginBottom: 15\n                                            }}\n                                            inputProps={{\n                                                name: 'select',\n                                                id: 'outlined-age-native-simple',\n                                            }}\n                                        >\n                                            {/* <option aria-label=\"None\" value=\"\" /> */}\n                                            <option selected value=\"healthWorker\">Health-Worker</option>\n                                            <option value=\"doctor\">Doctor</option>\n                                            <option value=\"researcher\">Researcher</option>\n                                        </NativeSelect>\n                                    </FormControl>\n\n                                    {this.state.selectedOption === 'healthWorker' ?\n                                        <Person_RegistrationForm institute=\"Dispensary\" actor=\"HealthWorker\" />\n                                        :\n                                        this.state.selectedOption === 'doctor' ?\n                                            <Person_RegistrationForm institute=\"Hospital\" actor=\"Doctor\" />\n                                            :\n                                            this.state.selectedOption === 'researcher' ?\n                                                <Person_RegistrationForm actor=\"Researcher\" />\n                                                :\n                                                null\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    :\n                    <p>You Must Be Logged In!!</p>\n                }\n            </>\n        );\n    }\n}\nexport default Add_Person;","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Admin_Dashboard.jsx",["370","371"],"import React, { useState,useEffect } from \"react\";\nimport { withRouter } from 'react-router-dom';\n\n//COMPONENTS\nimport Navbar from \"../Navbar\";\nimport Card from \"../COMPONENTS/CardButton\";\n\n//ICONS\nimport AddIcon from '@material-ui/icons/Add';\nimport MailIcon from '@material-ui/icons/Mail';\nimport PageviewIcon from '@material-ui/icons/Pageview';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\n\n\n\n\nconst Admin_Dashboard = (props) => {\n\n    const [authorized, setAuthorized] = useState();\n\n    useEffect(async () => {\n        try {\n            let getUserInfo = await localStorage.getItem('userInfo');\n            if (!getUserInfo) {\n                setAuthorized(false)\n                setTimeout(() => {\n                    props.history.push('/')\n                }, 2000);\n            }\n            else {\n                setAuthorized(true)\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n    })\n\n    const handleCardButton = (buttonName) => {\n        props.history.push(buttonName);\n    }\n    return (\n        <>\n            {authorized ?\n                <div className=\"container-fluid\"\n                    style={{\n                        backgroundColor: \"white\",\n                    }}\n                >\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Navbar />\n                        </div>\n                        <div\n                            className=\"row\"\n                            style={styles.dashBoardRowStyling}>\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"Add Person\"\n                                    icon={<PersonAddIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Add_Person/')}\n                                />\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"Add institute\"\n                                    icon={<AddIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Add_institute/')}\n                                />\n\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"view records\"\n                                    icon={<VisibilityIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Display_All_Records/')}\n                                />\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"delete record\"\n                                    icon={<DeleteSweepIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/delete_record/')}\n                                />\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"view reports\"\n                                    icon={<PageviewIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/View_All_Reports/')}\n                                />\n                            </div>\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"campaign requests\"\n                                    icon={<MailIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/View_All_Campaign_Requests/')}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                :\n                <p>You Must Be Logged In!!</p>\n            }\n        </>\n    );\n};\nexport default withRouter(Admin_Dashboard);\n\nconst styles = {\n    dashBoardRowStyling: {\n        marginTop: '10%',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        paddingLeft: '12%',\n        paddingRight: '12%',\n        marginBottom: 20\n        // borderColor: 'blue',\n        // borderWidth: 5,\n        // borderStyle: 'dashed'\n    },\n    buttonDivStyling: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n    },\n    iconStyling: {\n        width: '60%',\n        height: '60%',\n        color: '#4169e1',\n    }\n}","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Delete_Record.jsx",["372","373","374","375","376","377","378","379"],"import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport Slide from '@material-ui/core/Slide';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContentText from '@material-ui/core/DialogContentText';\n\n\n\n//COMPONENTS\nimport Navbar from '../Navbar';\nimport Banner from '../COMPONENTS/Banner';\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\nimport Display_Person_Record from '../COMPONENTS/Display_Person_Record';\nimport Display_Institute_Record from '../COMPONENTS/Display_Institute_Record';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst Delete_Member = (props) => {\n\n\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const [data, setData] = useState([]);\n    const [value, setValue] = useState('');\n    const [open, setOpen] = useState(false);\n    const [authorized, setAuthorized] = useState();\n    const [displayRecord, setDisplayRecord] = useState(false);\n    const [selectedOption, setSelectedOption] = useState('Dispensaries');\n\n    const [snackBar, setSnackBar] = useState({\n        snackBarMessage: '',\n        showSnackBar: false,\n        isError: false\n    });\n\n    const [userInfo, setUserInfo] = useState({\n        name: '',\n        userName: '',\n        gender: '',\n        dob: '',\n        email: '',\n        city: '',\n        cnic: '',\n        contactNo: '',\n        address: '',\n        instituteName: '',\n        status: '',\n        joiningDate: '',\n        dp: ''\n    });\n\n    function resetStates() {\n        setUserInfo((prevState) => {\n            return {\n                ...prevState,\n                name: '',\n                userName: '',\n                gender: '',\n                dob: '',\n                email: '',\n                city: '',\n                cnic: '',\n                contactNo: '',\n                address: '',\n                instituteName: '',\n                status: '',\n                joiningDate: '',\n                dp: ''\n            }\n        });\n    }\n\n    let parsedUserInfo = '';\n    const getUserInfoFromLocalStorage = async () => {\n        try {\n            let userInfo = await localStorage.getItem('userInfo');\n            parsedUserInfo = JSON.parse(userInfo);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    let fetchUrl = `http://localhost:3000/fetchAll${selectedOption}`;\n\n    useEffect(async () => {\n        await getUserInfoFromLocalStorage()\n        if (parsedUserInfo) {\n            setAuthorized(true);\n            fetch(`http://localhost:3000/fetchAll${selectedOption}`, {\n                method: \"GET\",\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\n            })\n                .then(result => result.json())\n                .then(data => {\n                    setData(data);\n                }).catch(error => {\n                    console.log(error);\n                })\n        } else {\n            setAuthorized(false);\n            setTimeout(() => {\n                props.history.push('/');\n            }, 2000)\n        }\n    }, [selectedOption]);\n\n    useEffect(async () => {\n        if (value) {\n            await getUserInfoFromLocalStorage();\n            fetch(`http://localhost:3000/findOne${selectedOption}Record?id=${value}`, {\n                method: \"GET\",\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\n            })\n                .then(result => result.json())\n                .then(data => {\n                    console.log(data)\n                    setDisplayRecord(true);\n                    if (selectedOption === 'Dispensaries' || selectedOption === \"Hospitals\") {\n                        setUserInfo((prevState) => {\n                            return {\n                                name: data.name,\n                                email: data.email,\n                                contactNo: data.contactNo,\n                                city: data.city,\n                                address: data.address,\n                                status: data.status,\n                                joiningDate: data.joiningDate\n                            }\n                        });\n                    } else {\n                        setUserInfo((prevState) => {\n                            return {\n                                name: data.name,\n                                userName: data.userName,\n                                gender: data.gender,\n                                dob: data.dob,\n                                email: data.email,\n                                contactNo: data.contactNo,\n                                cnic: data.cnic,\n                                city: data.city,\n                                address: data.address,\n                                instituteName: selectedOption === 'Doctors' ? data.hospital : data.dispensary,\n                                status: data.status,\n                                joiningDate: data.joiningDate,\n                                dp: data.dp\n                            }\n                        });\n                    }\n\n\n                });\n        }\n        else {\n            console.log('not value ')\n        }\n    }, [value]);\n\n    const handleWhatToDeleteChange = (e) => {\n        setSelectedOption(e.target.value);\n        setDisplayRecord(false);\n        setSnackBar((prevState) => { return { ...prevState, showSnackBar: false, } });\n        resetStates();\n    }\n\n    const handleSearchBar = (v) => {\n        if (v) {\n            setValue(v._id);\n            setSnackBar((prevState) => { return { ...prevState, showSnackBar: false, } });\n            // setSearchBarClear(false);\n        }\n        else if (v === '') {\n            setValue('')\n        }\n\n    }\n\n    const handleDeleteButton = async () => {\n        await getUserInfoFromLocalStorage();\n        setOpen(false);\n        fetch(`http://localhost:3000/DeleteOne${selectedOption}Record?id=${value}`, {\n            method: \"DELETE\",\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\n        })\n            .then(result => result.json())\n            .then(data => {\n                if (data.error) {\n                    setSnackBar((prevState) => {\n                        return {\n                            ...prevState,\n                            snackBarMessage: data.error,\n                            showSnackBar: true,\n                            isError: true\n                        }\n                    });\n\n                } else {\n                    setDisplayRecord(false);\n                    resetStates();\n                    setSnackBar((prevState) => {\n                        return {\n                            ...prevState,\n                            snackBarMessage: data.message,\n                            showSnackBar: true,\n                            isError: false\n                        }\n                    });\n                }\n            });\n    }\n\n    const handleSnackBar = () => {\n        setSnackBar(prevState => {\n            return {\n                ...prevState,\n                showSnackBar: false,\n                isError: false\n            }\n        });\n    }\n\n    return (\n        <>\n            {authorized ?\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Navbar />\n                        </div>\n\n                        <div id=\"foreground\" className=\"col-md-10\"\n                            style={{\n                                marginTop: '5%',\n                                padding: 0,\n                            }}>\n                            <div\n                                className=\"col-12\"\n                                style={{\n                                    paddingLeft: '4%',\n                                    paddingRight: '4%',\n                                    paddingBottom: '4%'\n                                }}\n                            >\n                                <Banner formName=\"Record deletion Form\" bannerHeight={150} />\n                            </div>\n\n                            <div\n                                className=\"row\"\n                                style={styles.rowStyling}\n                            >\n\n                                <FormControl\n                                    className=\"col-md-6 col-sm-12\"\n                                    style={{\n                                        paddingRight: '2%',\n                                        marginBottom: '1%',\n                                    }}\n                                >\n                                    <InputLabel\n                                        style={{\n                                            fontSize: 20,\n                                            color: '#4169e1',\n                                            fontWeight: 'bold'\n                                        }}\n                                        htmlFor=\"outlined-age-native-simple\">Select What To Delete</InputLabel>\n                                    <NativeSelect\n                                        variant=\"outlined\"\n                                        onChange={(e) => handleWhatToDeleteChange(e)}\n                                        label=\"select\"\n                                        style={{ width: '100%' }}\n                                        inputProps={{\n                                            name: 'select',\n                                            id: 'outlined-age-native-simple',\n                                        }}\n                                    >\n                                        {/* <option aria-label=\"None\" value=\"\" /> */}\n                                        <option selected value=\"Dispensaries\">Dispensary</option>\n                                        <option value=\"Doctors\">Doctor</option>\n                                        <option value=\"HealthWorkers\">Health Worker</option>\n                                        <option value=\"Hospitals\">Hospital</option>\n                                        <option value=\"Researchers\">Researcher</option>\n                                    </NativeSelect>\n                                </FormControl>\n\n\n                                <div\n                                    className=\"col-md-6 col-sm-12\"\n                                    style={{\n                                        paddingLeft: '2%',\n                                        marginBottom: '1%',\n                                    }}>\n                                    <Autocomplete\n                                        id=\"country-select-demo\"\n                                        options={data}\n                                        autoHighlight\n                                        fullWidth={true}\n                                        style={{ width: '100%' }}\n                                        // getOptionLabel={(option) => option._id}\n                                        getOptionLabel={(option) => selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ? option.name : option.userName}\n                                        onChange={(event, value) => handleSearchBar(value)}\n                                        renderOption={(option) => (\n                                            <React.Fragment>\n                                                {selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ? option.name : option.userName}\n                                            </React.Fragment>\n                                        )}\n\n                                        renderInput={(params) => (\n                                            <TextField\n                                                {...params}\n                                                label={selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ? 'Name' : 'user-Name'}\n                                                variant=\"standard\"\n                                                InputLabelProps={{\n                                                    style:\n                                                    {\n                                                        fontSize: 20,\n                                                        color: '#4169e1',\n                                                        textTransform: 'uppercase',\n                                                        fontWeight: 'bold'\n                                                    }\n                                                }}\n                                            />\n                                        )}\n                                    />\n                                </div>\n\n                                <div\n                                    style={{\n                                        paddingLeft: 15,\n                                        paddingRight: 15,\n                                        marginTop: 10,\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\n                                    }}\n                                >\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\n                                </div>\n                            </div>\n\n\n\n                            {displayRecord ?\n                                <div\n                                    className=\"row\"\n                                    style={styles.rowStyling}\n                                >\n                                    <div\n                                        className=\"col-12\"\n                                        style={{ marginBottom: '2%' }}\n                                    >\n                                        <Banner bannerTitle={userInfo.name} />\n                                    </div>\n\n                                    <div\n                                        className=\"col-12\"\n                                        style={{ marginBottom: '1%' }}\n                                    >\n                                        {selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ?\n\n                                            <Display_Institute_Record\n                                                name={userInfo.name}\n                                                email={userInfo.email}\n                                                contactNo={userInfo.contactNo}\n                                                city={userInfo.city}\n                                                status={userInfo.status}\n                                                address={userInfo.address}\n                                                joiningDate={userInfo.joiningDate}\n                                            />\n                                            :\n                                            <Display_Person_Record\n                                                actor={selectedOption}\n                                                name={userInfo.name}\n                                                userName={userInfo.userName}\n                                                gender={userInfo.gender}\n                                                dob={userInfo.dob}\n                                                email={userInfo.email}\n                                                contactNo={userInfo.contactNo}\n                                                cnic={userInfo.cnic}\n                                                city={userInfo.city}\n                                                address={userInfo.address}\n                                                instituteName={userInfo.instituteName}\n                                                status={userInfo.status}\n                                                joiningDate={userInfo.joiningDate}\n                                                dp={userInfo.dp}\n                                            />\n                                        }\n                                    </div>\n\n                                    <div\n                                        className=\"col-12\"\n                                        style={{ marginBottom: '5%', display: 'flex', justifyContent: 'center' }}\n                                    >\n                                        <Button\n                                            variant=\"outline-primary\"\n                                            style={styles.deleteButtonStyling}\n                                            onClick={() => setOpen(true)}\n                                        >\n                                            DELETE\n                                </Button>\n                                    </div>\n                                </div>\n                                :\n                                null\n                            }\n                        </div>\n                    </div>\n                </div>\n                :\n                <p>You Must Be Logged In!!</p>\n            }\n            {authorized ?\n                <div>\n                    <Dialog\n                        open={open}\n                        TransitionComponent={Transition}\n                        keepMounted\n                        onClose={handleClose}\n                    >\n                        <DialogTitle>{'Are You Sure You Want To Delete This Record?'}</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText style={{ fontSize: 18, color: '#000000' }}>\n                                By clicking on 'Yes' this record will be permanently deleted.\n                    </DialogContentText>\n                        </DialogContent>\n                        <DialogActions style={{ display: 'flex', justifyContent: 'center' }}>\n                            <Button\n                                variant=\"outline-primary\"\n                                style={styles.dialogBoxbuttonStyling}\n                                onClick={() => handleClose()}\n                            >\n                                No\n                        </Button>\n                            <Button variant=\"outline-primary\"\n                                style={styles.dialogBoxbuttonStyling}\n                                onClick={() => handleDeleteButton()}>\n                                Yes\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                </div>\n                :\n                null\n            }\n        </>\n    );\n}\nexport default Delete_Member;\n\nconst styles = {\n    rowStyling: {\n        display: \"flex\",\n        flexDirection: 'row',\n        justifyContent: 'center',\n        paddingLeft: '6%',\n        paddingRight: '6%',\n    },\n    deleteButtonStyling: {\n        width: '35%',\n        textTransform: 'uppercase',\n        fontSize: 20,\n        fontFamily: 'sans-serif',\n    },\n    dialogBoxbuttonStyling: {\n        width: '22%',\n        textTransform: 'uppercase',\n        fontSize: 20,\n        fontFamily: 'sans-serif',\n    },\n}","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Add_Institute.jsx",["380","381"],"import React, { Component } from 'react';\n\n\nimport { InputLabel, NativeSelect, FormControl } from '@material-ui/core';\n\n//COMPONENTS\nimport Navbar from '../Navbar';\nimport Banner from '../COMPONENTS/Banner';\nimport Institiute_RegistrationForm from '../COMPONENTS/Institiute_RegistrationForm';\n\nclass Add_Institute extends Component {\n    state = {\n        authorized: '',\n        selectedOption: 'Dispensary',\n    };\n\n    componentDidMount() {\n        try {\n            if (localStorage.getItem('userInfo')) {\n                this.setState({ authorized: true })\n            }\n            else {\n                this.setState({ authorized: false })\n                setTimeout(() => {\n                    this.props.history.push('/')\n                }, 2000)\n\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    render() {\n        return (\n            <>  {this.state.authorized ?\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Navbar />\n                        </div>\n\n                        <div id=\"foreground\" className=\"col-md-10\"\n                            style={{\n                                marginTop: '5%',\n                                padding: 0,\n                            }}>\n                            <div\n                                className=\"col-12 mb-lg-3\"\n                                style={{ paddingLeft: '4%', paddingRight: '4%' }}\n                            >\n                                <Banner\n                                    bannerTitle={this.state.selectedOption}\n                                    formName=\"Registeration Form\"\n                                    bannerHeight={150}\n                                />\n                            </div>\n\n                            <div style={{\n                                padding: '6%',\n                            }}>\n                                <FormControl style={{ width: '100%' }}>\n                                    <InputLabel\n                                        style={{\n                                            fontSize: 20,\n                                            color: '#4169e1',\n                                            fontWeight: 'bold',\n\n                                        }}\n                                        htmlFor=\"outlined-age-native-simple\">Select What To Register</InputLabel>\n                                    <NativeSelect\n                                        variant=\"outlined\"\n                                        onChange={(e) => this.setState({ selectedOption: e.target.value })}\n                                        label=\"select\"\n                                        style={{\n                                            width: '100%',\n                                            marginBottom: 15\n                                        }}\n                                        inputProps={{\n                                            name: 'select',\n                                            id: 'outlined-age-native-simple',\n                                        }}\n                                    >\n                                        {/* <option aria-label=\"None\" value=\"\" /> */}\n                                        <option selected value=\"Dispensary\">Dispensary</option>\n                                        <option value=\"Hospital\">Hospital</option>\n\n                                    </NativeSelect>\n                                </FormControl>\n\n                                {this.state.selectedOption === 'Hospital' ?\n                                    <Institiute_RegistrationForm\n                                        selectedOption={this.state.selectedOption}\n                                        institute=\"Hospital\"\n                                        actor=\"doctor\"\n                                    />\n                                    :\n                                    this.state.selectedOption === 'Dispensary' ?\n                                        <Institiute_RegistrationForm\n                                            selectedOption={this.state.selectedOption}\n                                            institute=\"Dispensary\"\n                                            actor=\"healthWorker\"\n                                        />\n                                        :\n                                        null\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                :\n                <p>You Must Be Logged In!!</p>\n            }\n            </>\n        );\n    }\n};\nexport default Add_Institute;","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Display_Record_Details.jsx",["382","383","384","385"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\nimport Display_Person_Record from '../COMPONENTS/Display_Person_Record';\r\nimport Display_Institute_Record from '../COMPONENTS/Display_Institute_Record';\r\n\r\n\r\nconst Display_Record_Details = (props) => {\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [disableButton, setDisableButton] = useState(false);\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n    const [displayButtons, setDisplayButtons] = useState('');\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    const [userInfo, setUserInfo] = useState({\r\n        name: '',\r\n        userName: '',\r\n        gender: '',\r\n        dob: '',\r\n        email: '',\r\n        city: '',\r\n        cnic: '',\r\n        contactNo: '',\r\n        address: '',\r\n        instituteName: '',\r\n        status: '',\r\n        joiningDate: '',\r\n        dp: ''\r\n    });\r\n\r\n    function resetStates() {\r\n        setUserInfo((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                name: '',\r\n                userName: '',\r\n                gender: '',\r\n                dob: '',\r\n                email: '',\r\n                city: '',\r\n                cnic: '',\r\n                contactNo: '',\r\n                address: '',\r\n                instituteName: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                dp: ''\r\n            }\r\n        });\r\n    }\r\n\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedInfo = JSON.parse(info);\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            setDisplayButtons(parsedInfo.displayButtons);\r\n            setSelectedOption(parsedInfo.selectedOption);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //parsedInfo.userID\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo) {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/findOne${parsedInfo.selectedOption}Record?id=${parsedInfo.userID}`,\r\n                {\r\n                    method: \"GET\",\r\n                    headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n                })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    if (parsedInfo.selectedOption === 'Dispensaries' || parsedInfo.selectedOption === \"Hospitals\") {\r\n                        setUserInfo((prevState) => {\r\n                            return {\r\n                                name: data.name,\r\n                                email: data.email,\r\n                                contactNo: data.contactNo,\r\n                                city: data.city,\r\n                                address: data.address,\r\n                                status: data.status,\r\n                                joiningDate: data.joiningDate\r\n                            }\r\n                        });\r\n                    } else {\r\n                        setUserInfo((prevState) => {\r\n                            return {\r\n                                name: data.name,\r\n                                userName: data.userName,\r\n                                gender: data.gender,\r\n                                dob: data.dob,\r\n                                email: data.email,\r\n                                contactNo: data.contactNo,\r\n                                cnic: data.cnic,\r\n                                city: data.city,\r\n                                address: data.address,\r\n                                instituteName: parsedInfo.selectedOption === 'Doctors' ? data.hospital : data.dispensary,\r\n                                status: data.status,\r\n                                joiningDate: data.joiningDate,\r\n                                dp: data.dp\r\n                            }\r\n                        });\r\n                    }\r\n                }).catch(error => {\r\n                    console.log(error);\r\n                })\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, []);\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        setOpen(false);\r\n        await getUserInfoFromLocalStorage();\r\n        let deleteRecord = `http://localhost:3000/DeleteOne${parsedInfo.selectedOption}Record?id=${parsedInfo.userID}`;\r\n        await fetch(deleteRecord, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    setDisableButton(true);\r\n                    resetStates();\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleDialogBoxNoButton = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const handleUpdateRecordButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ userID: parsedInfo.userID, selectedOption, displayButtons: true })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Update_Record/');\r\n    }\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '1%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName={userInfo.name} bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    style={{\r\n                                        paddingInline: '5%',\r\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden'\r\n                                    }}\r\n                                >\r\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{ paddingInline: '5%', marginTop: 15 }}\r\n                                >\r\n                                    {selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ?\r\n\r\n                                        <Display_Institute_Record\r\n                                            name={userInfo.name}\r\n                                            email={userInfo.email}\r\n                                            contactNo={userInfo.contactNo}\r\n                                            city={userInfo.city}\r\n                                            address={userInfo.address}\r\n                                            status={userInfo.status}\r\n                                            joiningDate={userInfo.joiningDate}\r\n                                        />\r\n                                        :\r\n                                        <Display_Person_Record\r\n                                            actor={selectedOption}\r\n                                            name={userInfo.name}\r\n                                            userName={userInfo.userName}\r\n                                            gender={userInfo.gender}\r\n                                            dob={userInfo.dob}\r\n                                            email={userInfo.email}\r\n                                            contactNo={userInfo.contactNo}\r\n                                            cnic={userInfo.cnic}\r\n                                            city={userInfo.city}\r\n                                            address={userInfo.address}\r\n                                            instituteName={userInfo.instituteName}\r\n                                            status={userInfo.status}\r\n                                            joiningDate={userInfo.joiningDate}\r\n                                            dp={userInfo.dp}\r\n                                        />\r\n                                    }\r\n                                </div>\r\n                                {!displayButtons ?\r\n                                    null\r\n                                    :\r\n                                    <div\r\n                                        className=\"col-12\"\r\n                                        style={styles.buttonDivStyling}\r\n                                    >\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            style={styles.deleteButtonStyling}\r\n                                            onClick={handleUpdateRecordButton}\r\n                                            disabled={disableButton}\r\n                                        >\r\n                                            Update\r\n                                </Button>\r\n\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            style={styles.deleteButtonStyling}\r\n                                            onClick={() => setOpen(true)}\r\n                                            disabled={disableButton}\r\n                                        >\r\n                                            Delete\r\n                                </Button>\r\n                                    </div>\r\n                                }\r\n\r\n                                <DialogBox\r\n                                    open={open}\r\n                                    title=\"Are You Sure You Want To Delete This Record?\"\r\n                                    content=\"By Cliking on 'YES' this record will be permanently deleted.\"\r\n                                    leftButtonName=\"No\"\r\n                                    rightButtonName=\"Yes\"\r\n                                    handleClose={() => handleDialogBoxNoButton()}\r\n                                    handleDelete={() => handleDialogBoxYesButton()}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Display_Record_Details;\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    buttonDivStyling: {\r\n        // borderColor: 'blue',\r\n        // borderWidth: 5,\r\n        // borderStyle: 'dashed',\r\n        paddingInline: '20%',\r\n        marginBottom: '5%',\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n    deleteButtonStyling: {\r\n        width: '42%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    dialogBoxbuttonStyling: {\r\n        width: '22%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n}","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Display_All_Records.jsx",["386","387","388","389","390"],"import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n//ICONS\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst Display_All_Records = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hasDeleted, setHasDeleted] = useState(false);\r\n    const [recordToDelete, SetRecordToDelete] = useState('');\r\n    const [selectedOption, setSelectedOption] = useState('Dispensaries');\r\n\r\n    const [fetchedData, setFetchedData] = useState({\r\n        dispensaries: [],\r\n        hospitals: [],\r\n        healthWorkers: [],\r\n        doctors: [],\r\n        researchers: [],\r\n    })\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage()\r\n        if (parsedUserInfo) {\r\n            setAuthorized(true);\r\n            let headers = { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            Promise.all([\r\n                fetch(`http://localhost:3000/fetchAllDispensaries`, { headers })\r\n                    .then(value => value.json()),\r\n                fetch(`http://localhost:3000/fetchAllHospitals`, { headers })\r\n                    .then(value => value.json()),\r\n                fetch(`http://localhost:3000/fetchAllHealthWorkers`, { headers })\r\n                    .then(value => value.json()),\r\n                fetch(`http://localhost:3000/fetchAllDoctors`, { headers })\r\n                    .then(value => value.json()),\r\n                fetch(`http://localhost:3000/fetchAllResearchers`, { headers })\r\n                    .then(value => value.json()),\r\n            ])\r\n                .then(data => {\r\n                    console.log('value: ', data);\r\n                    setData(data[0]);\r\n                    setFetchedData({\r\n                        dispensaries: data[0],\r\n                        hospitals: data[1],\r\n                        healthWorkers: data[2],\r\n                        doctors: data[3],\r\n                        researchers: data[4],\r\n                    })\r\n                })\r\n                .catch((errro) => {\r\n                    console.log(errro);\r\n                });\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n\r\n    }, [hasDeleted]);\r\n\r\n    useEffect(() => {\r\n        switch (selectedOption) {\r\n            case 'Dispensaries': setData(fetchedData.dispensaries); break;\r\n            case 'Hospitals': setData(fetchedData.hospitals); break;\r\n            case 'HealthWorkers': setData(fetchedData.healthWorkers); break;\r\n            case 'Doctors': setData(fetchedData.doctors); break;\r\n            case 'Researchers': setData(fetchedData.researchers); break;\r\n        }\r\n    }, [selectedOption])\r\n\r\n    const handleWhichRecordsToDisplayChange = (e) => {\r\n        setSelectedOption(e.target.value);\r\n    }\r\n\r\n    const handleDeleteIconClick = (id) => {\r\n        SetRecordToDelete(id);\r\n        setHasDeleted(false);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleNameClick = async (id) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ userID: id, selectedOption, displayButtons: true })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Display_Record_Details/');\r\n    }\r\n\r\n    const handleUpdateIconClick = async (id) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ userID: id, selectedOption, displayButtons: true })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Update_Record/');\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const renderTableHeader = () => {\r\n        return (\r\n            <thead >\r\n                <tr style={{ borderStyle: 'none' }}>\r\n                    <th style={styles.tableHeaderStyling}>Sr. No</th>\r\n                    <th style={styles.tableHeaderStyling}>Name</th>\r\n                    <th\r\n                        style={styles.tableHeaderStyling}\r\n                        hidden={selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ? true : false}\r\n                    >\r\n                        User Name\r\n                    </th>\r\n                    <th style={styles.tableHeaderStyling}>Contact No</th>\r\n                    <th\r\n                        style={styles.tableHeaderStyling}\r\n                        hidden=\r\n                        {\r\n                            selectedOption === 'Dispensaries'\r\n                                || selectedOption === 'Hospitals'\r\n                                || selectedOption === 'Researchers' ? true : false\r\n                        }\r\n                    >\r\n                        Institute\r\n                    </th>\r\n                    <th style={styles.tableHeaderStyling}>status</th>\r\n                    <th style={styles.tableHeaderStyling}>joining date</th>\r\n                    <th style={styles.tableHeaderStyling}></th>\r\n                </tr>\r\n            </thead>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        return data.map((item, index) => {\r\n            return (\r\n                <tr style={{ borderRightStyle: 'none' }} key={index}>\r\n                    <td style={styles.tableRowStyling}>{index + 1}</td>\r\n                    <td><a onClick={() => handleNameClick(item._id)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.name}</a></td>\r\n                    <td\r\n                        style={styles.tableRowStyling}\r\n                        hidden={selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ? true : false}\r\n                    >\r\n                        {item.userName}\r\n                    </td>\r\n                    <td style={styles.tableRowStyling}>{item.contactNo}</td>\r\n                    <td\r\n                        style={styles.tableRowStyling}\r\n                        hidden=\r\n                        {\r\n                            selectedOption === 'Dispensaries'\r\n                                || selectedOption === 'Hospitals'\r\n                                || selectedOption === 'Researchers' ? true : false\r\n                        }\r\n                    >\r\n                        {selectedOption === 'Doctors' ? item.hospital : item.dispensary}\r\n                    </td>\r\n                    <td style={styles.tableRowStyling}>{item.status}</td>\r\n                    <td style={styles.tableRowStyling}>{item.joiningDate}</td>\r\n                    <td style={styles.tableRowStyling}>\r\n                        <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                            <DeleteIcon\r\n                                style={styles.tableIconStyling}\r\n                                onClick={() => handleDeleteIconClick(item._id)}\r\n                            />\r\n                            <UpdateIcon\r\n                                style={styles.tableIconStyling}\r\n                                onClick={() => handleUpdateIconClick(item._id)}\r\n                            />\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        setOpen(false);\r\n        await getUserInfoFromLocalStorage();\r\n        let deleteRecord = `http://localhost:3000/DeleteOne${selectedOption}Record?id=${recordToDelete}`;\r\n        await fetch(deleteRecord, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    setHasDeleted(true);\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleDialogBoxNoButton = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12 mb-lg-3\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '4%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"Display records\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '2%',\r\n                                        }}\r\n                                    >\r\n                                        <FormControl style={{ width: '100%' }}>\r\n                                            <InputLabel\r\n                                                style={{\r\n                                                    fontSize: 20,\r\n                                                    color: '#4169e1',\r\n                                                    fontWeight: 'bold'\r\n                                                }}\r\n                                                htmlFor=\"outlined-age-native-simple\">Select Which Record To Display</InputLabel>\r\n                                            <NativeSelect\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => handleWhichRecordsToDisplayChange(e)}\r\n                                                label=\"select\"\r\n                                                style={{ width: '100%' }}\r\n                                                inputProps={{\r\n                                                    name: 'select',\r\n                                                    id: 'outlined-age-native-simple',\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"Dispensaries\">Dispensary</option>\r\n                                                <option value=\"Doctors\">Doctor</option>\r\n                                                <option value=\"HealthWorkers\">Health Worker</option>\r\n                                                <option value=\"Hospitals\">Hospital</option>\r\n                                                <option value=\"Researchers\">Researcher</option>\r\n                                            </NativeSelect>\r\n                                        </FormControl>\r\n\r\n                                        <div\r\n                                            style={{\r\n                                                paddingLeft: 15,\r\n                                                paddingRight: 15,\r\n                                                marginTop: 20,\r\n                                                visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                            }}\r\n                                        >\r\n                                            <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{ marginBottom: 20 }}>\r\n\r\n                                        {data.length !== 0 ?\r\n                                            <Table bordered style={{ borderStyle: 'none' }}>\r\n                                                {renderTableHeader()}\r\n                                                <tbody style={{ fontSize: 16 }}>\r\n                                                    {renderTableData()}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                            :\r\n                                            <p style={styles.noRecordTextStyling}>\r\n                                                No Records to display\r\n                                    </p>\r\n                                        }\r\n                                        <DialogBox\r\n                                            open={open}\r\n                                            title=\"Are You Sure You Want To Delete This Record?\"\r\n                                            content=\"By Cliking on 'YES' this record will be deleted permanently\"\r\n                                            leftButtonName=\"No\"\r\n                                            rightButtonName=\"Yes\"\r\n                                            handleClose={() => handleDialogBoxNoButton()}\r\n                                            handleDelete={() => handleDialogBoxYesButton()}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                :\r\n                <p>You Must Be Logged In!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Display_All_Records);\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    tableIconStyling: {\r\n        color: '#4169e1',\r\n        fontSize: 26,\r\n        cursor: 'pointer'\r\n    },\r\n    noRecordTextStyling: {\r\n        textAlign: 'center',\r\n        fontSize: 22,\r\n        fontWeight: 'bold',\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'capitalize'\r\n\r\n    }\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\View_All_Reports.jsx",["391","392","393","394","395","396"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n//ICONS\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst View_All_Reports = (props) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hasDeleted, setHasDeleted] = useState(false);\r\n    const [specificData, setSpecificData] = useState([]);\r\n    const [recordToDelete, SetRecordToDelete] = useState('');\r\n    const [selectedOption, setSelectedOption] = useState('all');\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo) {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/fetchAllReports`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    setData(data);\r\n                    setSpecificData(data);\r\n                });\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, [hasDeleted]);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption === 'all') {\r\n            setSpecificData(data);\r\n        } else {\r\n            setSpecificData(data.filter(item => {\r\n                return item.reportStatus === selectedOption\r\n            }))\r\n        }\r\n    }, [selectedOption]);\r\n\r\n    const handleDeleteIconClick = (reportID) => {\r\n        SetRecordToDelete(reportID);\r\n        setHasDeleted(false);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleNameClick = (id, role) => {\r\n        let path = '';\r\n        if (role === 'doctor') {\r\n            path = 'doctors';\r\n        } else if (role === 'healthWorker') {\r\n            path = 'healthWorkers'\r\n        } else {\r\n            path = 'researchers';\r\n        }\r\n        try {\r\n            //Here Display Button is storing because on person details screen\r\n            //We don't want to set the option to delete the person record\r\n            localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ userID: id, selectedOption: path, displayButtons: false })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Display_Record_Details/');\r\n    }\r\n\r\n    const handleReportSubjectClick = async (reportID, reporterID) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ reportID, reporterID })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Report_Details_Screen/');\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const renderTableHeader = () => {\r\n        return (\r\n            <thead >\r\n                <tr style={{ borderStyle: 'none' }}>\r\n                    <th style={styles.tableHeaderStyling}>sr. no</th>\r\n                    <th style={styles.tableHeaderStyling}>Subject</th>\r\n                    <th style={styles.tableHeaderStyling}>Reported by</th>\r\n                    <th style={styles.tableHeaderStyling}>Reporter Role</th>\r\n                    <th style={styles.tableHeaderStyling}>Status</th>\r\n                    <th style={styles.tableHeaderStyling}>Date</th>\r\n                    <th style={styles.tableHeaderStyling}></th>\r\n                </tr>\r\n            </thead >\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        return specificData.map((item, index) => {\r\n            return (\r\n                <tr style={{ borderRightStyle: 'none' }}>\r\n                    <td>{index + 1}</td>\r\n                    <td><a onClick={() => handleReportSubjectClick(item._id, item.reporterID)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.subject}</a></td>\r\n                    <td><a onClick={() => handleNameClick(item.reporterID, item.reporterRole)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.reporterName}</a></td>\r\n                    <td style={styles.tableRowStyling}>{item.reporterRole}</td>\r\n                    <td style={styles.tableRowStyling}>{item.reportStatus}</td>\r\n                    <td style={styles.tableRowStyling}>{item.date}</td>\r\n                    <td style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <DeleteIcon\r\n                            style={{ color: '#4169e1', fontSize: 26, cursor: 'pointer' }}\r\n                            onClick={() => handleDeleteIconClick(item._id)}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneReport?id=${recordToDelete}&role=admin`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    setHasDeleted(true);\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleDialogBoxNoButton = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12 mb-lg-3\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '4%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"Reports\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '1%',\r\n                                        }}\r\n                                    >\r\n                                        <FormControl style={{ width: '100%' }}>\r\n                                            <InputLabel\r\n                                                style={{\r\n                                                    fontSize: 20,\r\n                                                    color: '#4169e1',\r\n                                                    fontWeight: 'bold',\r\n                                                    marginBottom: 0\r\n                                                }}\r\n                                                htmlFor=\"outlined-age-native-simple\">Select Which Records To Display</InputLabel>\r\n                                            <NativeSelect\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => setSelectedOption(e.target.value)}\r\n                                                label=\"select\"\r\n                                                style={{ width: '100%' }}\r\n                                                inputProps={{\r\n                                                    name: 'select',\r\n                                                    id: 'outlined-age-native-simple',\r\n                                                }}\r\n                                            >\r\n                                                <option selected value=\"all\">All</option>\r\n                                                <option value=\"pending\">Pending</option>\r\n                                                <option value=\"resolved\">Resolved</option>\r\n                                            </NativeSelect>\r\n                                        </FormControl>\r\n\r\n                                        <div\r\n                                            style={{\r\n                                                paddingLeft: 15,\r\n                                                paddingRight: 15,\r\n                                                marginTop: 20,\r\n                                                visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                            }}\r\n                                        >\r\n                                            <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{ marginBottom: 20 }}>\r\n                                        {data.length !== 0 ?\r\n                                            <Table bordered style={{ borderStyle: 'none' }}>\r\n                                                {renderTableHeader()}\r\n                                                <tbody style={{ fontSize: 16 }}>\r\n                                                    {renderTableData()}\r\n                                                </tbody>\r\n\r\n                                            </Table>\r\n                                            :\r\n                                            <p\r\n                                                style={{\r\n                                                    textAlign: 'center',\r\n                                                    fontSize: 22,\r\n                                                    fontWeight: 'bold',\r\n                                                    fontFamily: 'sans-serif',\r\n                                                    textTransform: 'capitalize'\r\n                                                }}\r\n                                            >No Records to display</p>\r\n                                        }\r\n\r\n                                        <DialogBox\r\n                                            open={open}\r\n                                            title=\"Are You Sure You Want To Delete This Report?\"\r\n                                            content=\"By Cliking on 'YES' this report will be deleted permanently\"\r\n                                            leftButtonName=\"No\"\r\n                                            rightButtonName=\"Yes\"\r\n                                            handleClose={() => handleDialogBoxNoButton()}\r\n                                            handleDelete={() => handleDialogBoxYesButton()}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(View_All_Reports);\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Report_Details_Screen.jsx",["397","398","399","400"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport Reply_Form from '../COMPONENTS/Reply_Form';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst Report_Details_Screen = (props) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [openForm, setOpenForm] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hasDeleted, setHasDeleted] = useState(false);\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n\r\n    const [report, setReport] = useState({\r\n        subject: '',\r\n        reporterName: '',\r\n        reporterRole: '',\r\n        reportMessage: '',\r\n        reportDate: '',\r\n    });\r\n\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedInfo = await JSON.parse(info);\r\n            parsedUserInfo = await JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedInfo && parsedUserInfo) {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/findOneReport?id=${parsedInfo.reportID}&role=admin`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    if (data.error) {\r\n                        setSnackBar(prevState => {\r\n                            setHasDeleted(true);\r\n                            return {\r\n                                ...prevState,\r\n                                snackBarMessage: data.error,\r\n                                isError: true,\r\n                                showSnackBar: true\r\n                            }\r\n                        });\r\n                    } else {\r\n                        setReport(prevState => {\r\n                            return {\r\n                                ...prevState,\r\n                                subject: data.subject,\r\n                                reporterName: data.reporterName,\r\n                                reporterRole: data.reporterRole,\r\n                                reportMessage: data.reportMessage,\r\n                                reportDate: data.date,\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, []);\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                snackBarMessage: '',\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneReport?id=${parsedInfo.reportID}&role=admin`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n                } else {\r\n                    setHasDeleted(true);\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleDialogBoxNoButton = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleFormCloseButton = (close, replySent) => {\r\n        if (close) {\r\n            setOpenForm(!close);\r\n            if (replySent) {\r\n                setSnackBar(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        snackBarMessage: 'Reply Sent Successfully!!',\r\n                        showSnackBar: true,\r\n                        isError: false\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                setSnackBar(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        snackBarMessage: 'Reply Could not be sent!!',\r\n                        showSnackBar: true,\r\n                        isError: true\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"Report Details\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '5%',\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column'\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                paddingLeft: 15,\r\n                                                paddingRight: 15,\r\n                                                marginBlock: 10,\r\n                                                visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                            }}\r\n                                        >\r\n                                            <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                        </div>\r\n\r\n                                        {hasDeleted ?\r\n                                            null\r\n                                            :\r\n                                            <div style={{ paddingInline: '1.5%', marginBottom: 5 }}>\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"Subject\"\r\n                                                    value={report.subject}\r\n                                                    contentEditable={false}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"From\"\r\n                                                    value={report.reporterName}\r\n                                                    contentEditable={false}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"Date\"\r\n                                                    value={report.reportDate}\r\n                                                    contentEditable={false}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"Message\"\r\n                                                    multiline\r\n                                                    value={report.reportMessage}\r\n                                                    contentEditable={false}\r\n                                                    rowsMax={Infinity}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n                                            </div>\r\n                                        }\r\n\r\n                                        {hasDeleted ?\r\n                                            null\r\n                                            :\r\n                                            <div\r\n                                                className=\"col-12\"\r\n                                                style={styles.buttonDivStyling}\r\n                                            >\r\n                                                <Button\r\n                                                    variant=\"outline-primary\"\r\n                                                    style={styles.deleteButtonStyling}\r\n                                                    disabled={hasDeleted}\r\n                                                    onClick={() => setOpen(true)}\r\n                                                >\r\n                                                    DELETE\r\n                                        </Button>\r\n\r\n                                                <Button\r\n                                                    variant=\"outline-primary\"\r\n                                                    style={styles.deleteButtonStyling}\r\n                                                    onClick={() => setOpenForm(true)}\r\n                                                >\r\n                                                    Reply\r\n                                           </Button>\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n\r\n                                    <DialogBox\r\n                                        open={open}\r\n                                        title=\"Are You Sure You Want To Delete This Report?\"\r\n                                        content=\"By Cliking on 'YES' this report will be deleted permanently\"\r\n                                        leftButtonName=\"No\"\r\n                                        rightButtonName=\"Yes\"\r\n                                        handleClose={() => handleDialogBoxNoButton()}\r\n                                        handleDelete={() => handleDialogBoxYesButton()}\r\n                                    />\r\n\r\n                                    < Reply_Form\r\n                                        open={openForm}\r\n                                        type=\"report\"\r\n                                        to={report.reporterName}\r\n                                        reporterRole={report.reporterRole}\r\n                                        messageMaxLength={250}\r\n                                        leftButtonName=\"Cancel\"\r\n                                        rightButtonName=\"Send\"\r\n                                        handleClose={handleFormCloseButton}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Report_Details_Screen;\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase', fontWeight: 'bold',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    buttonDivStyling: {\r\n        alignSelf: 'center',\r\n        width: '70%',\r\n        marginBlock: '2.5%',\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n    deleteButtonStyling: {\r\n        width: '50%',\r\n        textTransform: 'uppercase', fontWeight: 'bold',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        marginLeft: '2%'\r\n    },\r\n    dialogBoxbuttonStyling: {\r\n        width: '22%',\r\n        textTransform: 'uppercase', fontWeight: 'bold',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Request_Details_Screen.jsx",["401","402","403","404","405","406"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { TextField, InputLabel, NativeSelect } from '@material-ui/core';\r\n\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport Reply_Form from '../COMPONENTS/Reply_Form';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst Request_Details_Screen = (props) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [openForm, setOpenForm] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hasDeleted, setHasDeleted] = useState(false);\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n\r\n    const [request, setRequest] = useState({\r\n        subject: '',\r\n        requesterName: '',\r\n        requesterRole: '',\r\n        requestMessage: '',\r\n        requestDate: '',\r\n    });\r\n\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedInfo = await JSON.parse(info);\r\n            parsedUserInfo = await JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedInfo && parsedUserInfo) {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/findOneRequest?id=${parsedInfo.reportID}&role=admin`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    if (data.error) {\r\n                        setHasDeleted(true)\r\n                        setSnackBar(prevState => {\r\n                            return {\r\n                                ...prevState,\r\n                                snackBarMessage: data.error,\r\n                                isError: true,\r\n                                showSnackBar: true\r\n                            }\r\n                        });\r\n                    } else {\r\n                        setRequest(prevState => {\r\n                            return {\r\n                                ...prevState,\r\n                                subject: data.subject,\r\n                                requesterName: data.requesterName,\r\n                                requestMessage: data.requestMessage,\r\n                                requestDate: data.date,\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, []);\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                snackBarMessage: '',\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneRequest?id=${parsedInfo.reportID}&role=admin`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    setHasDeleted(true);\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleDialogBoxNoButton = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleFormCloseButton = (close, replySent) => {\r\n        if (close) {\r\n            setOpenForm(!close);\r\n            if (replySent) {\r\n                setSnackBar(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        snackBarMessage: 'Reply Sent Successfully!!',\r\n                        showSnackBar: true,\r\n                        isError: false\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                setSnackBar(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        snackBarMessage: 'Reply Could not be sent!!',\r\n                        showSnackBar: true,\r\n                        isError: true\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '1%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"Request Details\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '5%',\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column'\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                paddingLeft: 15,\r\n                                                paddingRight: 15,\r\n                                                marginBlock: 10,\r\n                                                visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                            }}\r\n                                        >\r\n                                            <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                        </div>\r\n\r\n                                        {hasDeleted ?\r\n                                            null\r\n                                            :\r\n                                            <div style={{ paddingInline: '1.5%', marginBottom: 5 }}>\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"Subject\"\r\n                                                    value={request.subject}\r\n                                                    contentEditable={false}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"From\"\r\n                                                    value={request.requesterName}\r\n                                                    contentEditable={false}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"Date\"\r\n                                                    value={request.requestDate}\r\n                                                    contentEditable={false}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    label=\"Message\"\r\n                                                    multiline\r\n                                                    value={request.requestMessage}\r\n                                                    contentEditable={false}\r\n                                                    rowsMax={Infinity}\r\n                                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                                    InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\r\n                                                />\r\n                                            </div>\r\n                                        }\r\n\r\n                                        {hasDeleted ?\r\n                                            null\r\n                                            :\r\n                                            <div\r\n                                                className=\"col-12\"\r\n                                                style={styles.buttonDivStyling}\r\n                                            >\r\n                                                <Button\r\n                                                    variant=\"outline-primary\"\r\n                                                    style={styles.deleteButtonStyling}\r\n                                                    disabled={hasDeleted}\r\n                                                    onClick={() => setOpen(true)}\r\n                                                >\r\n                                                    DELETE\r\n                                        </Button>\r\n\r\n                                                <Button\r\n                                                    variant=\"outline-primary\"\r\n                                                    style={styles.deleteButtonStyling}\r\n                                                    onClick={() => setOpenForm(true)}\r\n                                                >\r\n                                                    Reply\r\n                                           </Button>\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n\r\n                                    <DialogBox\r\n                                        open={open}\r\n                                        title=\"Are You Sure You Want To Delete This Request?\"\r\n                                        content=\"By Cliking on 'YES' this request will be deleted permanently\"\r\n                                        leftButtonName=\"No\"\r\n                                        rightButtonName=\"Yes\"\r\n                                        handleClose={() => handleDialogBoxNoButton()}\r\n                                        handleDelete={() => handleDialogBoxYesButton()}\r\n                                    />\r\n\r\n\r\n                                    < Reply_Form\r\n                                        open={openForm}\r\n                                        type=\"request\"\r\n                                        to={request.requesterName}\r\n                                        messageMaxLength={250}\r\n                                        leftButtonName=\"Cancel\"\r\n                                        rightButtonName=\"Send\"\r\n                                        handleClose={handleFormCloseButton}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Request_Details_Screen;\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase', fontWeight: 'bold',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    buttonDivStyling: {\r\n        alignSelf: 'center',\r\n        width: '70%',\r\n        marginBlock: '2.5%',\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n    deleteButtonStyling: {\r\n        width: '50%',\r\n        textTransform: 'uppercase', fontWeight: 'bold',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        marginLeft: '2%'\r\n    },\r\n    dialogBoxbuttonStyling: {\r\n        width: '22%',\r\n        textTransform: 'uppercase', fontWeight: 'bold',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\Update_Record.jsx",["407","408","409","410","411","412","413","414"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\nimport Display_Person_Record from '../COMPONENTS/Display_Person_Record';\r\nimport Update_Person_Record from '../COMPONENTS/Update_Person_Record';\r\nimport Update_Institute_Record from '../COMPONENTS/Update_Institute_Record';\r\n\r\n\r\nconst Update_Record = (props) => {\r\n\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isUpdated, setIsUpdated] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [userID, setUserID] = useState('');\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    const [userInfo, setUserInfo] = useState({\r\n        name: '',\r\n        userName: '',\r\n        gender: '',\r\n        dob: '',\r\n        email: '',\r\n        city: '',\r\n        cnic: '',\r\n        contactNo: '',\r\n        address: '',\r\n        instituteName: '',\r\n        status: '',\r\n        joiningDate: '',\r\n        dp: ''\r\n    });\r\n\r\n    function resetStates() {\r\n        setUserInfo((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                name: '',\r\n                userName: '',\r\n                gender: '',\r\n                dob: '',\r\n                email: '',\r\n                city: '',\r\n                cnic: '',\r\n                contactNo: '',\r\n                address: '',\r\n                instituteName: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                dp: ''\r\n            }\r\n        });\r\n    }\r\n\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedInfo = JSON.parse(info);\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            setUserID(parsedInfo.userID);\r\n            setSelectedOption(parsedInfo.selectedOption);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo) {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/findOne${parsedInfo.selectedOption}Record?id=${parsedInfo.userID}`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    if (parsedInfo.selectedOption === 'Dispensaries' || parsedInfo.selectedOption === \"Hospitals\") {\r\n                        setUserInfo((prevState) => {\r\n                            return {\r\n                                name: data.name,\r\n                                email: data.email,\r\n                                contactNo: data.contactNo,\r\n                                city: data.city,\r\n                                address: data.address,\r\n                                status: data.status,\r\n                                joiningDate: data.joiningDate\r\n                            }\r\n                        });\r\n                    } else {\r\n                        setUserInfo((prevState) => {\r\n                            return {\r\n                                name: data.name,\r\n                                userName: data.userName,\r\n                                gender: data.gender,\r\n                                dob: data.dob,\r\n                                email: data.email,\r\n                                contactNo: data.contactNo,\r\n                                cnic: data.cnic,\r\n                                city: data.city,\r\n                                address: data.address,\r\n                                instituteName: parsedInfo.selectedOption === 'Doctors' ? data.hospital : data.dispensary,\r\n                                status: data.status,\r\n                                joiningDate: data.joiningDate,\r\n                                dp: data.dp\r\n                            }\r\n                        });\r\n                    }\r\n                }).catch(error => {\r\n                    console.log(error)\r\n                })\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, [isUpdated]);\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleIsUpdated = (boolean) => {\r\n        setIsUpdated(boolean);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                    }}\r\n                                >\r\n                                    <Banner formName={userInfo.name} bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    style={{\r\n                                        paddingInline: '5%',\r\n                                        marginTop: 10,\r\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden'\r\n                                    }}\r\n                                >\r\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"col-12\"\r\n                                    style={{ paddingInline: '5%' }}\r\n                                >\r\n                                    {selectedOption === 'Dispensaries' || selectedOption === 'Hospitals' ?\r\n\r\n                                        <Update_Institute_Record\r\n                                            userID={userID}\r\n                                            selectedOption={selectedOption}\r\n                                            name={userInfo.name}\r\n                                            email={userInfo.email}\r\n                                            contactNo={userInfo.contactNo}\r\n                                            city={userInfo.city}\r\n                                            status={userInfo.status}\r\n                                            address={userInfo.address}\r\n                                            joiningDate={userInfo.joiningDate}\r\n                                            handleIsUpdated={handleIsUpdated}\r\n                                        />\r\n                                        :\r\n                                        <Update_Person_Record\r\n                                            userID={userID}\r\n                                            selectedOption={selectedOption}\r\n                                            name={userInfo.name}\r\n                                            userName={userInfo.userName}\r\n                                            gender={userInfo.gender}\r\n                                            dob={userInfo.dob}\r\n                                            email={userInfo.email}\r\n                                            contactNo={userInfo.contactNo}\r\n                                            cnic={userInfo.cnic}\r\n                                            city={userInfo.city}\r\n                                            address={userInfo.address}\r\n                                            instituteName={userInfo.instituteName}\r\n                                            status={userInfo.status}\r\n                                            joiningDate={userInfo.joiningDate}\r\n                                            dp={userInfo.dp}\r\n                                            handleIsUpdated={handleIsUpdated}\r\n                                        />\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Update_Record;\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    buttonDivStyling: {\r\n        // borderColor: 'blue',\r\n        // borderWidth: 5,\r\n        // borderStyle: 'dashed',\r\n        paddingInline: '20%',\r\n        marginBottom: '5%',\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n    deleteButtonStyling: {\r\n        width: '42%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    dialogBoxbuttonStyling: {\r\n        width: '22%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n}","E:\\FYP_WebApp\\fyp\\src\\ADMIN_SCREENS\\View_All_Campaign_Requests.jsx",["415","416","417","418","419","420"],"import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n//ICONS\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst View_All_Campaign_Requests = (props) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hasDeleted, setHasDeleted] = useState(false);\r\n    const [specificData, setSpecificData] = useState([]);\r\n    const [recordToDelete, SetRecordToDelete] = useState('');\r\n    const [selectedOption, setSelectedOption] = useState('all');\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo) {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/fetchAllRequests`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    setData(data);\r\n                    setSpecificData(data);\r\n                });\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, [hasDeleted]);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption === 'all') {\r\n            setSpecificData(data);\r\n        } else {\r\n            setSpecificData(data.filter(item => {\r\n                return item.requestStatus === selectedOption\r\n            }))\r\n        }\r\n    }, [selectedOption]);\r\n\r\n    const handleWhichRecordsToDisplayChange = (e) => {\r\n        setSelectedOption(e.target.value);\r\n    }\r\n\r\n    const handleDeleteIconClick = (requestID) => {\r\n        SetRecordToDelete(requestID);\r\n        setHasDeleted(false);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleNameClick = async (id) => {\r\n        try {\r\n            //Here Display Button is storing because on person details screen\r\n            //We don't want to set the option to delete the person record\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ userID: id, selectedOption: 'healthWorkers', displayButtons: false })\r\n            );\r\n            props.history.push('/Display_Record_Details/');\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleRequestSubjectClick = async (reportID, reporterID) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ reportID, reporterID })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Request_Details_Screen/');\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const renderTableHeader = () => {\r\n        return (\r\n            <thead >\r\n                <tr style={{ borderStyle: 'none' }}>\r\n                    <th style={styles.tableHeaderStyling}>sr. no</th>\r\n                    <th style={styles.tableHeaderStyling}>Subject</th>\r\n                    <th style={styles.tableHeaderStyling}>Requested by</th>\r\n                    <th style={styles.tableHeaderStyling}>Status</th>\r\n                    <th style={styles.tableHeaderStyling}>Date</th>\r\n                    <th style={styles.tableHeaderStyling}></th>\r\n                </tr>\r\n            </thead >\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        return specificData.map((item, index) => {\r\n            return (\r\n                <tr style={{ borderRightStyle: 'none' }}>\r\n                    <td>{index + 1}</td>\r\n                    <td><a onClick={() => handleRequestSubjectClick(item._id, item.requesterID)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.subject}</a></td>\r\n                    <td><a onClick={() => handleNameClick(item.requesterID)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.requesterName}</a></td>\r\n                    <td style={styles.tableRowStyling}>{item.requestStatus}</td>\r\n                    <td style={styles.tableRowStyling}>{item.date}</td>\r\n                    <td style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <DeleteIcon\r\n                            style={{ color: '#4169e1', fontSize: 26, cursor: 'pointer' }}\r\n                            onClick={() => handleDeleteIconClick(item._id)}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneRequest?id=${recordToDelete}&role=admin`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    setHasDeleted(true);\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleDialogBoxNoButton = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12 mb-lg-3\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '4%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"Campaing Requests\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '1%',\r\n                                        }}\r\n                                    >\r\n                                        <FormControl style={{ width: '100%' }}>\r\n                                            <InputLabel\r\n                                                style={{\r\n                                                    fontSize: 20,\r\n                                                    color: '#4169e1',\r\n                                                    fontWeight: 'bold',\r\n                                                    marginBottom: 0\r\n                                                }}\r\n                                                htmlFor=\"outlined-age-native-simple\">Select Which Records To Display</InputLabel>\r\n                                            <NativeSelect\r\n                                                variant=\"outlined\"\r\n                                                onChange={(e) => handleWhichRecordsToDisplayChange(e)}\r\n                                                label=\"select\"\r\n                                                style={{ width: '100%' }}\r\n                                                inputProps={{\r\n                                                    name: 'select',\r\n                                                    id: 'outlined-age-native-simple',\r\n                                                }}\r\n                                            >\r\n                                                <option selected value=\"all\">All</option>\r\n                                                <option value=\"pending\">Pending</option>\r\n                                                <option value=\"resolved\">Resolved</option>\r\n                                            </NativeSelect>\r\n                                        </FormControl>\r\n\r\n                                        <div\r\n                                            style={{\r\n                                                paddingLeft: 15,\r\n                                                paddingRight: 15,\r\n                                                marginTop: 20,\r\n                                                visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                            }}\r\n                                        >\r\n                                            <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{ marginBottom: 20 }}>\r\n                                        {data.length !== 0 ?\r\n                                            <Table bordered style={{ borderStyle: 'none' }}>\r\n                                                {renderTableHeader()}\r\n                                                <tbody style={{ fontSize: 16 }}>\r\n                                                    {renderTableData()}\r\n                                                </tbody>\r\n\r\n                                            </Table>\r\n                                            :\r\n                                            <p\r\n                                                style={{\r\n                                                    textAlign: 'center',\r\n                                                    fontSize: 22,\r\n                                                    fontWeight: 'bold',\r\n                                                    fontFamily: 'sans-serif',\r\n                                                    textTransform: 'capitalize'\r\n                                                }}\r\n                                            >No Records to display</p>\r\n                                        }\r\n\r\n                                        <DialogBox\r\n                                            open={open}\r\n                                            title=\"Are You Sure You Want To Delete This Request?\"\r\n                                            content=\"By Cliking on 'YES' this request will be deleted permanently\"\r\n                                            leftButtonName=\"No\"\r\n                                            rightButtonName=\"Yes\"\r\n                                            handleClose={() => handleDialogBoxNoButton()}\r\n                                            handleDelete={() => handleDialogBoxYesButton()}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(View_All_Campaign_Requests);\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\Home.jsx",[],"E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\Forgot_Password_Screen.jsx",["421","422","423"],"import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst Forgot_Password_Screen = (props) => {\r\n\r\n    const [userName, setUserName] = useState();\r\n    const [userNameError, setUserNameError] = useState(false);\r\n    const [actor, setActor] = useState(props.location.actor);\r\n\r\n    const [message, setMessage] = useState({\r\n        message: 'adasdsad',\r\n        showMessage: false,\r\n        isError: false,\r\n        disableButton: false,\r\n    });\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            if (await localStorage.getItem('userRole')) {\r\n                setActor(await JSON.parse(localStorage.getItem('userRole')));\r\n            } else {\r\n                props.history.push('/');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    })\r\n\r\n    const handleSubmit = async (e) => {\r\n        let userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        e.preventDefault()\r\n        fetch('http://localhost:3000/resetPassword', {\r\n            method: \"POST\",\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                actor: userRole,\r\n                userName: userName\r\n            })\r\n        })\r\n            .then(result => result.json())\r\n            .then(res => {\r\n                if (res.message) {\r\n                    setMessage((prevState) => {\r\n                        return {\r\n                            message: res.message,\r\n                            showMessage: true,\r\n                            isError: false,\r\n                            disableButton: true\r\n                        }\r\n                    });\r\n                } else if (res.error) {\r\n                    setMessage((prevState) => {\r\n                        return {\r\n                            message: res.error,\r\n                            showMessage: true,\r\n                            isError: true,\r\n                            disableButton: false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleResetPasswordButton = () => {\r\n        if (!userName) {\r\n            setUserNameError(true);\r\n        } else {\r\n            setUserNameError(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* {alert(actor)} */}\r\n            <div id=\"main_header\"\r\n                className=\"container-fluid\">\r\n                <div\r\n                    id=\"header\"\r\n                    className=\"col-md-10\"\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-around',\r\n                        alignItems: 'center'\r\n                    }}\r\n                >\r\n                    <h2 style={styles.headingStyling}>Enter Your User Name to reset password</h2>\r\n\r\n                    <p\r\n                        style={{\r\n                            visibility: message.showMessage ? 'visible' : 'hidden',\r\n                            fontWeight: 'bold',\r\n                            color: message.isError ? '#B72C1C' : '#4BB543',\r\n                            textTransform: 'capitalize',\r\n                            fontFamily: 'sans-serif',\r\n                            fontSize: 20\r\n                        }}\r\n                    >\r\n                        {message.message}\r\n                    </p>\r\n\r\n                    <form method=\"POST\" onSubmit={handleSubmit}\r\n\r\n                        style={\r\n                            {\r\n                                width: '100%',\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                alignItems: 'center',\r\n                            }\r\n                        }>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            label='userName'\r\n                            style={{ width: '40%' }}\r\n                            InputLabelProps={{ style: styles.textFieldStyling }}\r\n                            required\r\n                            value={userName}\r\n                            name=\"userName\"\r\n                            onChange={(e) => setUserName(e.target.value)}\r\n                            error={userNameError}\r\n                        />\r\n\r\n                        <Button\r\n                            variant=\"outline-primary\"\r\n                            type=\"submit\"\r\n                            onClick={() => handleResetPasswordButton()}\r\n                            style={styles.buttonStyling}\r\n                            disabled={message.disableButton}\r\n                        >\r\n                            Reset Password\r\n                         </Button>\r\n                    </form>\r\n\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(Forgot_Password_Screen);\r\n\r\n\r\nconst styles = {\r\n    headingStyling: {\r\n        fontWeight: 'bold',\r\n        color: '#4169e1',\r\n        textTransform: 'capitalize',\r\n        fontFamily: 'sans-serif'\r\n    },\r\n    buttonStyling: {\r\n        width: '25%',\r\n        marginTop: '2%',\r\n        textTransform: 'capitalize',\r\n        fontFamily: 'sans-serif',\r\n        fontSize: 22,\r\n    },\r\n    textFieldStyling: {\r\n        fontSize: 20,\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#ffffff',\r\n        paddingInline: 5\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\Login.jsx",["424","425"],"import React, { useState, useEffect } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport Button from 'react-bootstrap/Button';\n\n\nconst Login = (props) => {\n\n    const [actor, setActor] = useState('');\n\n\n    const [data, setData] = useState({\n        userName: \"\",\n        password: \"\",\n        userNameError: false,\n        passwordError: false\n    });\n\n    useEffect(async () => {\n        try {\n            if (await localStorage.getItem('userRole')) {\n                setActor(await JSON.parse(localStorage.getItem('userRole')));\n            } else {\n                props.history.push('/');\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    })\n\n\n    const InputEvent = (event) => {\n        const { name, value } = event.target;\n        setData((preVal) => {\n            return {\n                ...preVal,\n                [name]: value,\n            };\n        });\n        console.log(value);\n    };\n\n    const formSubmit = async (e) => {\n        e.preventDefault();\n        await fetch('http://localhost:3000/signIn', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                userName: data.userName,\n                password: data.password,\n                actor: actor\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data);\n                if (data.error) {\n                    alert('Invalid User Name or Password!!');\n                } else {\n                    storeUserInfoToLocalStorage(data)\n                    if (actor === 'admin') {\n                        props.history.push('/Admin_Dashboard')\n                    } else if (actor === 'doctor') {\n                        props.history.push('/Doctor_Dashboard')\n                    } else if (actor === 'researcher') {\n                        props.history.push('/Researcher_Dashboard')\n                    }\n                }\n            }).catch(error => {\n                console.log('catch error: ', error)\n            })\n\n    };\n\n    const storeUserInfoToLocalStorage = async userInfo => {\n        try {\n            userInfo.data.authToken = userInfo.token;\n            await localStorage.setItem('userInfo', JSON.stringify(userInfo.data));\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const handleLoginbutton = () => {\n        if (!data.userName) {\n            setData((prevState) => { return { ...prevState, userNameError: true } });\n        } else {\n            setData((prevState) => { return { ...prevState, userNameError: false } });\n        }\n\n        if (!data.password) {\n            setData((prevState) => { return { ...prevState, passwordError: true } });\n        } else {\n            setData((prevState) => { return { ...prevState, passwordError: false } });\n        }\n\n    };\n\n    const handleForgotPassword = async () => {\n        props.history.push('/Forgot_Password_Screen/');\n    }\n\n    return (\n        <>\n            {/* {alert(actor)} */}\n            <div className=\"parent \">\n                <div className=\"child order-2 order-lg-1 text-center\">\n                    <h1 style={{ marginTop: \"25%\" }}>FrameWork For Dengue Surveillence and Data Collection In Pakistan</h1>\n                </div>\n                <div className=\"child order-1 order-lg-2\">\n                    <form method=\"POST\" onSubmit={formSubmit} style={{ height: '100%', paddingInline: '5%' }}>\n                        <div style={\n                            {\n                                display: 'flex',\n                                flexDirection: 'column',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                height: '100%',\n                            }\n                        }\n                        >\n                            <TextField\n                                label='user name'\n                                style={{ width: '80%', marginBottom: 10 }}\n                                InputLabelProps={{ style: { fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\n                                required={true}\n                                value={data.userName}\n                                name=\"userName\"\n                                onChange={InputEvent}\n                                error={data.userNameError}\n                                onBlur={() => handleLoginbutton()}\n                            />\n\n                            <TextField\n                                variant=\"standard\"\n                                label=\"password\"\n                                style={{ width: '80%', marginBottom: 20 }}\n                                InputLabelProps={{ style: { fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold' } }}\n                                required={true}\n                                value={data.password}\n                                name=\"password\"\n                                type=\"password\"\n                                onChange={InputEvent}\n                                error={data.passwordError}\n                                onBlur={() => handleLoginbutton()}\n                            />\n\n                            <label style={\n                                {\n                                    fontSize: 18,\n                                    fontWeight: 'bold',\n                                    cursor: 'pointer',\n                                    color: '#4169e1',\n                                    fontFamily: 'sans-serif'\n                                }\n                            }\n                                onClick={() => handleForgotPassword()}\n                            >\n                                Forgot Password?\n                            </label>\n                            <Button\n                                variant=\"outline-primary\"\n                                type=\"submit\"\n                                onClick={() => handleLoginbutton()}\n                                style={{\n                                    width: '50%',\n                                    marginTop: 10,\n                                    fontSize: 20,\n                                    fontWeight: 'bold',\n                                    fontFamily: 'sans-serif'\n                                }}\n                            >\n                                Login\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Login;","E:\\FYP_WebApp\\fyp\\src\\COMMON_SCREENS\\UserProfile.jsx",["426","427","428","429","430"],"import React, { useState, useEffect } from \"react\";\n\n//BOOTSTRAP\nimport Button from 'react-bootstrap/Button';\n\n//COMPONENTS\nimport Navbar from \"../Navbar\";\nimport Banner from '../COMPONENTS/Banner';\nimport Loading from '../COMPONENTS/Loading';\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\nimport Update_Profile_Form from '../COMPONENTS/Update_User_Profile';\nimport Display_Person_Record from '../COMPONENTS/Display_Person_Record';\n\n\n\nconst UserProfile = (props) => {\n\n    const [userInfo, setUserInfo] = useState();\n    const [userRole, setUserRole] = useState();\n    const [authorized, setAuthorized] = useState();\n    const [isLoading, setIsLoading] = useState(false);\n    const [infoUpdated, setInfoUpdated] = useState(false);\n    const [dialogBoxOpen, setDialogBoxOpen] = useState(false);\n\n    const [snackBar, setSnackBar] = useState({\n        snackBarMessage: '',\n        showSnackBar: false,\n        isError: false\n    });\n\n    const handleDialogBoxClose = (status, serverResponse) => {\n        if (status) {\n            setInfoUpdated(infoUpdated ? false : true)\n            setSnackBar({\n                snackBarMessage: serverResponse,\n                showSnackBar: true,\n                isError: false\n            })\n            setDialogBoxOpen(false)\n            window.scrollTo(0, 200)\n            setTimeout(() => {\n                setSnackBar({ showSnackBar: false });\n            }, 4000)\n\n        }\n        else {\n            setSnackBar({\n                snackBarMessage: serverResponse,\n                showSnackBar: true,\n                isError: true\n            })\n            setDialogBoxOpen(false)\n            window.scrollTo(0, 200)\n            setTimeout(() => {\n                setSnackBar({ showSnackBar: false });\n            }, 4000)\n        }\n\n    }\n\n    let parsedUserRole = '';\n    let parsedUserInfo = '';\n    const getUserInfoFromLocalStorage = async () => {\n        try {\n            let userInfo = await localStorage.getItem('userInfo');\n            parsedUserInfo = JSON.parse(userInfo);\n            let userRole = await localStorage.getItem('userRole');\n            parsedUserRole = JSON.parse(userRole);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    useEffect(async () => {\n        await getUserInfoFromLocalStorage();\n        if (parsedUserInfo) {\n            setUserRole(parsedUserRole);\n            setUserInfo(parsedUserInfo);\n            setAuthorized(true);\n        } else {\n            setAuthorized(false);\n            setTimeout(() => {\n                props.history.push('/');\n            }, 2000)\n        }\n    }, [infoUpdated]);\n\n    const handleSnackBar = () => {\n        setSnackBar(false)\n    }\n\n    return (\n        <>\n            {authorized ?\n                isLoading ?\n                    <Loading />\n                    :\n                    <div className=\"container-fluid\">\n\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <Navbar />\n                            </div>\n\n                            <div id=\"foreground\" className=\"col-md-10\"\n                                style={{\n                                    marginTop: '8%',\n                                    padding: 0,\n                                }}>\n                                <div className=\"col-12\"\n                                    style={{\n                                        paddingLeft: '4%',\n                                        paddingRight: '4%',\n                                        marginBottom: 10\n                                    }}\n                                >\n                                    <Banner\n                                        formName=\"User Profile\"\n                                        bannerHeight={150}\n                                    />\n                                </div>\n\n                                <div\n                                    style={{\n                                        paddingInline: '5%',\n                                        marginTop: 10,\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\n                                    }}\n                                >\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\n                                </div>\n\n\n                            </div>\n\n                            <div className=\"col-12\">\n                                <div\n                                    style={{\n                                        paddingLeft: '9%',\n                                        paddingRight: '9%',\n                                        marginBottom: 20\n                                    }}\n                                >\n                                    <Display_Person_Record\n                                        actor={userRole === 'researcher' ? 'Researchers' : userRole}\n                                        name={userInfo.name}\n                                        userName={userInfo.userName}\n                                        gender={userInfo.gender}\n                                        dob={userInfo.dob}\n                                        email={userInfo.email}\n                                        contactNo={userInfo.contactNo}\n                                        cnic={userInfo.cnic}\n                                        city={userInfo.city}\n                                        address={userInfo.address}\n                                        instituteName={userInfo.hospital}\n                                        status={userInfo.status}\n                                        joiningDate={userInfo.joiningDate}\n                                        dp={userInfo.dp}\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className=\"col-12\"\n                                style={{ marginBottom: '5%', display: 'flex', justifyContent: 'center' }}\n                            >\n                                <Button\n                                    variant=\"outline-primary\"\n                                    style={styles.deleteButtonStyling}\n                                    onClick={() => setDialogBoxOpen(true)}\n                                >\n                                    Edit Profile\n                                </Button>\n                            </div>\n                        </div>\n\n                        <Update_Profile_Form\n                            userRole={userRole}\n                            authToken={userInfo.authToken}\n                            id={userInfo._id}\n                            contactNo={userInfo.contactNo}\n                            email={userInfo.email}\n                            password={userInfo.password}\n                            open={dialogBoxOpen}\n                            handleClose={handleDialogBoxClose}\n                        />\n                    </div>\n                :\n                <p>You Must Be Logged In!!</p>\n            }\n        </>\n    )\n};\n\nexport default UserProfile;\n\nconst styles = {\n    rowStyling: {\n        display: \"flex\",\n        flexDirection: 'row',\n        justifyContent: 'center',\n        paddingLeft: '6%',\n        paddingRight: '6%',\n    },\n    deleteButtonStyling: {\n        width: 220,\n        textTransform: 'uppercase',\n        fontSize: 20,\n        fontFamily: 'sans-serif',\n    },\n    dialogBoxbuttonStyling: {\n        width: '22%',\n        textTransform: 'uppercase',\n        fontSize: 20,\n        fontFamily: 'sans-serif',\n    },\n}","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_All_Camplaints.jsx",["431","432","433","434","435"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n//ICONS\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\n//COMPONENTS\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport Loading from '../COMPONENTS/Loading';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\n\r\nconst Researcher_All_Camplaints = (props) => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [hasDeleted, setHasDeleted] = useState(false);\r\n    const [specificData, setSpecificData] = useState([]);\r\n    const [recordToDelete, SetRecordToDelete] = useState('');\r\n    const [selectedOption, setSelectedOption] = useState('all');\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    let userRole = '';\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage()\r\n        if (parsedUserInfo && userRole === 'researcher') {\r\n            setAuthorized(true);\r\n            await fetch(`http://localhost:3000/fetchSpecificReports?reporterID=${parsedUserInfo._id}&role=researcher`, {\r\n                method: \"GET\",\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(result => result.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    setData(data);\r\n                    setSpecificData(data);\r\n                });\r\n            setIsLoading(false);\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, [hasDeleted]);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption === 'all') {\r\n            setSpecificData(data);\r\n        } else {\r\n            setSpecificData(data.filter(item => {\r\n                return item.reportStatus === selectedOption\r\n            }))\r\n        }\r\n    }, [selectedOption]);\r\n\r\n    const handleWhichRecordsToDisplayChange = (e) => {\r\n        setSelectedOption(e.target.value);\r\n    }\r\n\r\n    const handleDeleteIconClick = (reportID) => {\r\n        SetRecordToDelete(reportID);\r\n        setHasDeleted(false);\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleReportSubjectClick = async (complaint) => {\r\n        try {\r\n            await localStorage.setItem('recordsPassToNextScreen',\r\n                JSON.stringify({ complaint })\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        props.history.push('/Researcher_Complaint_Details/');\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar(prevState => {\r\n            return {\r\n                ...prevState,\r\n                showSnackBar: false,\r\n                isError: false\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const renderTableHeader = () => {\r\n        return (\r\n            <thead >\r\n                <tr style={{ borderStyle: 'none' }}>\r\n                    <th style={styles.tableHeaderStyling}>sr. no</th>\r\n                    <th style={styles.tableHeaderStyling}>Subject</th>\r\n                    <th style={styles.tableHeaderStyling}>Status</th>\r\n                    <th style={styles.tableHeaderStyling}>Date</th>\r\n                    <th style={styles.tableHeaderStyling}></th>\r\n                </tr>\r\n            </thead >\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        return specificData.map((item, index) => {\r\n            return (\r\n                <tr style={{ borderRightStyle: 'none' }}>\r\n                    <td>{index + 1}</td>\r\n                    <td><a onClick={() => handleReportSubjectClick(item)} style={{ cursor: 'pointer', fontFamily: 'sans-serif' }}>{item.subject}</a></td>\r\n                    <td style={styles.tableRowStyling}>{item.reportStatus}</td>\r\n                    <td style={styles.tableRowStyling}>{item.date}</td>\r\n                    <td style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <DeleteIcon\r\n                            style={{ color: '#4169e1', fontSize: 26, cursor: 'pointer' }}\r\n                            onClick={() => handleDeleteIconClick(item._id)}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneReport?id=${recordToDelete}&role=researcher`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                } else {\r\n                    setHasDeleted(true);\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                isLoading ?\r\n                    <Loading />\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <Navbar />\r\n                            </div>\r\n\r\n                            <div id=\"foreground\" className=\"col-md-10\"\r\n                                style={{\r\n                                    marginTop: '5%',\r\n                                    padding: 0,\r\n                                }}>\r\n                                <div\r\n                                    className=\"col-12 mb-lg-3\"\r\n                                    style={{\r\n                                        paddingLeft: '4%',\r\n                                        paddingRight: '4%',\r\n                                        paddingBottom: '4%'\r\n                                    }}\r\n                                >\r\n                                    <Banner formName=\"All Camplaints\" bannerHeight={150} />\r\n                                </div>\r\n\r\n                                <div\r\n                                    className=\"row\"\r\n                                    style={styles.rowStyling}\r\n                                >\r\n                                    <div\r\n                                        className=\"col-md-12 col-sm-12\"\r\n                                        style={{\r\n                                            paddingRight: '2%',\r\n                                            marginBottom: '1%',\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                flexDirection: 'row',\r\n                                                justifyContent: 'space-between'\r\n                                            }}\r\n                                        >\r\n                                            <FormControl style={{ width: '75%' }}>\r\n                                                <InputLabel\r\n                                                    style={{\r\n                                                        fontSize: 20,\r\n                                                        color: '#4169e1',\r\n                                                        fontWeight: 'bold',\r\n                                                        marginBottom: 4\r\n                                                    }}\r\n                                                    htmlFor=\"outlined-age-native-simple\">Select Which Complaints To Display</InputLabel>\r\n                                                <NativeSelect\r\n                                                    variant=\"outlined\"\r\n                                                    onChange={(e) => handleWhichRecordsToDisplayChange(e)}\r\n                                                    label=\"select\"\r\n                                                    style={{ width: '100%' }}\r\n                                                    inputProps={{\r\n                                                        name: 'select',\r\n                                                        id: 'outlined-age-native-simple',\r\n                                                    }}\r\n                                                >\r\n                                                    <option value=\"all\">All</option>\r\n                                                    <option value=\"pending\">Pending</option>\r\n                                                    <option value=\"resolved\">Resolved</option>\r\n                                                </NativeSelect>\r\n                                            </FormControl>\r\n\r\n                                            <Button\r\n                                                variant=\"outline-primary\"\r\n                                                style={styles.buttonStyling}\r\n                                                onClick={() => props.history.push('/Researcher_New_Complaint')}\r\n                                            >\r\n                                                New Complaint\r\n                                            </Button>\r\n                                        </div>\r\n                                        <div\r\n                                            style={{\r\n                                                paddingLeft: 15,\r\n                                                paddingRight: 15,\r\n                                                marginTop: 20,\r\n                                                visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                            }}\r\n                                        >\r\n                                            <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{ marginBottom: 20 }}>\r\n                                        {data.length !== 0 ?\r\n                                            <Table bordered style={{ borderStyle: 'none' }}>\r\n                                                {renderTableHeader()}\r\n                                                <tbody style={{ fontSize: 16 }}>\r\n                                                    {renderTableData()}\r\n                                                </tbody>\r\n\r\n                                            </Table>\r\n                                            :\r\n                                            <p\r\n                                                style={{\r\n                                                    textAlign: 'center',\r\n                                                    fontSize: 22,\r\n                                                    fontWeight: 'bold',\r\n                                                    fontFamily: 'sans-serif',\r\n                                                    textTransform: 'capitalize'\r\n                                                }}\r\n                                            >No Records to display</p>\r\n                                        }\r\n\r\n                                        <DialogBox\r\n                                            open={open}\r\n                                            title=\"Are You Sure You Want To Delete This Complaint?\"\r\n                                            content=\"By Cliking on 'YES' this Complaint will be deleted permanently\"\r\n                                            leftButtonName=\"No\"\r\n                                            rightButtonName=\"Yes\"\r\n                                            handleClose={() => setOpen(false)}\r\n                                            handleDelete={handleDialogBoxYesButton}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Researcher_All_Camplaints);\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    tableHeaderStyling: {\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#4169e1',\r\n    },\r\n    tableRowStyling: {\r\n        textTransform: 'capitalize',\r\n        fontSize: 17,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    buttonStyling: {\r\n        width: '20%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold'\r\n    }\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Data_Visualization.jsx",["436","437","438","439","440","441","442","443","444","445","446","447"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport { Doughnut, Pie } from 'react-chartjs-2';\r\n\r\n//COMPONENTS\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\n\r\nconst Data_Visualization = (props) => {\r\n\r\n    let date = moment().format('DD-MM-YYYY');\r\n    const [authorized, setAuthorized] = useState();\r\n\r\n    let userRole = '';\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo && userRole === 'researcher') {\r\n            setAuthorized(true)\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    })\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Navbar />\r\n                        </div>\r\n\r\n                        <div id=\"foreground\" className=\"col-md-10\"\r\n                            style={{\r\n                                marginTop: '5%',\r\n                                padding: 0,\r\n                            }}>\r\n                            <div\r\n                                className=\"col-12\"\r\n                                style={{\r\n                                    paddingLeft: '4%',\r\n                                    paddingRight: '4%',\r\n                                }}\r\n                            >\r\n                                <Banner formName=\"Data Visualization\" bannerHeight={150} />\r\n\r\n                                {/* <div\r\n                                    style={{\r\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                        margin: 15,\r\n                                    }}\r\n                                >\r\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                </div> */}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            style={{\r\n                                paddingLeft: '4%',\r\n                                paddingRight: '4%',\r\n                            }}\r\n                        >\r\n                            <Doughnut\r\n                                height={400}\r\n                                width={600}\r\n                                options={{\r\n                                    maintainAspectRatio: false\r\n                                }}\r\n                                data={{\r\n                                    labels: ['Multan', 'Attock', 'Bahawalpur', 'Lahore', 'Faisalabad', 'Rahim Yar Khan', 'Qasoor'],\r\n                                    datasets: [{\r\n                                        // label: '# of Votes',\r\n                                        data: [12, 19, 3, 5, 2, 3, 9],\r\n                                        backgroundColor: [\r\n                                            'rgba(255, 99, 132)',\r\n                                            'rgba(54, 162, 235)',\r\n                                            'rgba(255, 206, 86)',\r\n                                            'rgba(75, 192, 192)',\r\n                                            'rgba(153, 102, 255)',\r\n                                            'rgba(255, 159, 64)',\r\n                                            'rgba(255, 159, 92)'\r\n                                        ],\r\n                                        borderColor: [\r\n                                            '#ffffff',\r\n                                            '#ffffff',\r\n                                            '#ffffff',\r\n                                            '#ffffff',\r\n                                            '#ffffff',\r\n                                            '#ffffff',\r\n                                            '#ffffff'\r\n                                        ],\r\n                                        borderWidth: 4,\r\n                                        hoverOffset: 2\r\n                                    },\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Data_Visualization);\r\n\r\nlet styles = {\r\n    filedsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        width: '70%'\r\n    },\r\n    buttonStyling: {\r\n        width: '40%',\r\n        marginTop: '7%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold'\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_Complaint_Details.jsx",["448","449"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n//COMPONENTS\r\n\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\nimport DialogBox from '../COMPONENTS/DialogBox';\r\n\r\nconst Researcher_Complaint_Details = (props) => {\r\n\r\n    const [data, setData] = useState();\r\n    const [open, setOpen] = useState(false);\r\n    const [authorized, setAuthorized] = useState(true);\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    let userRole = '';\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            parsedInfo = JSON.parse(info);\r\n            parsedInfo = parsedInfo.complaint\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo && userRole === 'researcher') {\r\n            setAuthorized(true)\r\n            if (parsedInfo) {\r\n                setData(parsedInfo)\r\n            } else {\r\n                setSnackBar({\r\n                    snackBarMessage: 'Complaint Not Found !!',\r\n                    isError: true,\r\n                    showSnackBar: true\r\n                });\r\n                setTimeout(() => {\r\n                    setSnackBar({\r\n                        showSnackBar: false\r\n                    })\r\n                }, 3000)\r\n            }\r\n\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    }, [])\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar({ showSnackBar: false });\r\n    }\r\n\r\n    const handleDialogBoxYesButton = async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        setOpen(false);\r\n        await fetch(`http://localhost:3000/deleteOneReport?id=${parsedInfo._id}&role=researcher`, {\r\n            method: \"DELETE\",\r\n            headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n        })\r\n            .then(result => result.json())\r\n            .then(async data => {\r\n                if (data.error) {\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.error,\r\n                            showSnackBar: true,\r\n                            isError: true\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 2000)\r\n                } else {\r\n                    await localStorage.removeItem('recordsPassToNextScreen')\r\n                    setData('');\r\n                    setSnackBar((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            snackBarMessage: data.message,\r\n                            showSnackBar: true,\r\n                            isError: false\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 2000)\r\n                }\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Navbar />\r\n                        </div>\r\n\r\n                        <div id=\"foreground\" className=\"col-md-10\"\r\n                            style={{\r\n                                marginTop: '5%',\r\n                                padding: 0,\r\n                            }}>\r\n                            <div\r\n                                className=\"col-12\"\r\n                                style={{\r\n                                    paddingLeft: '4%',\r\n                                    paddingRight: '4%',\r\n                                }}\r\n                            >\r\n                                <Banner formName=\"New Complaint\" bannerHeight={150} />\r\n\r\n                                <div\r\n                                    style={{\r\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                        margin: 15,\r\n                                    }}\r\n                                >\r\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            {data ?\r\n                                <div className=\"d-flex flex-column mx-5 \" >\r\n                                    <div style={styles.filedsDivStyling}>\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"subject\"\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.subject}\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"status\"\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.reportStatus}\r\n                                        />\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"date\"\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.date}\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            variant=\"standard\"\r\n                                            label=\"complaint\"\r\n                                            multiline\r\n                                            rows={8}\r\n                                            rowsMax={Infinity}\r\n                                            style={{ width: '50%', marginBottom: '2%' }}\r\n                                            InputLabelProps={{\r\n                                                style: {\r\n                                                    color: '#4169e1',\r\n                                                    fontSize: 20,\r\n                                                    textTransform: 'uppercase',\r\n                                                    fontWeight: 'bold',\r\n                                                }\r\n                                            }}\r\n                                            contentEditable={false}\r\n                                            value={data.reportMessage}\r\n                                        />\r\n\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            style={styles.buttonStyling}\r\n                                            onClick={() => setOpen(true)}\r\n                                        >\r\n                                            Delete\r\n                                            </Button>\r\n                                    </div>\r\n\r\n                                    <DialogBox\r\n                                        open={open}\r\n                                        title=\"Are You Sure You Want To Delete This Complaint?\"\r\n                                        content=\"By Cliking on 'YES' this Complaint will be deleted permanently.\"\r\n                                        leftButtonName=\"No\"\r\n                                        rightButtonName=\"Yes\"\r\n                                        handleClose={() => setOpen(false)}\r\n                                        handleDelete={handleDialogBoxYesButton}\r\n                                    />\r\n                                </div>\r\n                                :\r\n                                null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Researcher_Complaint_Details);\r\n\r\nlet styles = {\r\n    filedsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        marginBottom: '2.5%'\r\n    },\r\n    buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        width: '70%'\r\n    },\r\n    buttonStyling: {\r\n        width: '30%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        marginTop: 10\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_New_Complaint.jsx",["450","451","452","453","454","455"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\nimport moment from 'moment';\r\n\r\n//COMPONENTS\r\n\r\nimport CustomSnackBar from '../COMPONENTS/SnackBar';\r\nimport Navbar from '../Navbar';\r\nimport Banner from '../COMPONENTS/Banner';\r\n\r\nconst Researcher_New_Complaint = (props) => {\r\n\r\n    let date = moment().format('DD-MM-YYYY');\r\n    const [authorized, setAuthorized] = useState();\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    const [data, setData] = useState({\r\n        subject: \"\",\r\n        reportMessage: \"\",\r\n        reporterName: '',\r\n        reporterID: '',\r\n        reporterRole: 'researcher',\r\n        reportDate: date,\r\n        reportStatus: 'pending',\r\n        subjectError: false,\r\n        reportMessageError: false,\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setData({\r\n            ...data,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    let userRole = '';\r\n    let parsedUserInfo = '';\r\n    const getUserInfoFromLocalStorage = async () => {\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n            userRole = await JSON.parse(localStorage.getItem('userRole'));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await getUserInfoFromLocalStorage();\r\n        if (parsedUserInfo  && userRole === 'researcher') {\r\n            setAuthorized(true)\r\n        } else {\r\n            setAuthorized(false);\r\n            setTimeout(() => {\r\n                props.history.push('/');\r\n            }, 2000)\r\n        }\r\n    })\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        await getUserInfoFromLocalStorage()\r\n        await fetch(`http://localhost:3000/addReport?role=researcher`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + parsedUserInfo.authToken,\r\n            },\r\n            body: JSON.stringify({\r\n                subject: data.subject,\r\n                reportMessage: data.reportMessage,\r\n                reporterName: parsedUserInfo.name,\r\n                reporterID: parsedUserInfo._id,\r\n                reporterRole: data.reporterRole,\r\n                reportDate: data.reportDate,\r\n                reportStatus: data.reportStatus\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                if (data.error) {\r\n                    setSnackBar({\r\n                        isError: true,\r\n                        showSnackBar: true,\r\n                        snackBarMessage: data.error\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                } else {\r\n                    setSnackBar({\r\n                        isError: false,\r\n                        showSnackBar: true,\r\n                        snackBarMessage: data.message\r\n                    });\r\n                    setData((prevState) => {\r\n                        return {\r\n                            ...prevState,\r\n                            subject: \"\",\r\n                            reportMessage: \"\",\r\n                            subjectError: false,\r\n                            reportMessageError: false,\r\n                        }\r\n                    });\r\n                    setTimeout(() => { setSnackBar({ showSnackBar: false }) }, 4000)\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar({ showSnackBar: false });\r\n    }\r\n    return (\r\n        <>\r\n            {authorized ?\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Navbar />\r\n                        </div>\r\n\r\n                        <div id=\"foreground\" className=\"col-md-10\"\r\n                            style={{\r\n                                marginTop: '5%',\r\n                                padding: 0,\r\n                            }}>\r\n                            <div\r\n                                className=\"col-12\"\r\n                                style={{\r\n                                    paddingLeft: '4%',\r\n                                    paddingRight: '4%',\r\n                                }}\r\n                            >\r\n                                <Banner formName=\"New Complaint\" bannerHeight={150} />\r\n\r\n                                <div\r\n                                    style={{\r\n                                        visibility: snackBar.showSnackBar ? 'visible' : 'hidden',\r\n                                        margin: 15,\r\n                                    }}\r\n                                >\r\n                                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <form onSubmit={handleSubmit} method=\"POST\">\r\n                                <div className=\"d-flex flex-column mx-5 \" >\r\n                                    <div className=\"col-md-12 mx-5\" >\r\n                                        <div style={styles.filedsDivStyling}>\r\n                                            <TextField\r\n                                                variant=\"standard\"\r\n                                                label=\"subject\"\r\n                                                style={{ width: '50%' }}\r\n                                                InputLabelProps={{\r\n                                                    style: {\r\n                                                        color: data.subjectError ? 'red' : '#4169e1',\r\n                                                        fontSize: 20,\r\n                                                        textTransform: 'uppercase',\r\n                                                        fontWeight: 'bold',\r\n                                                    }\r\n                                                }}\r\n                                                required={true}\r\n                                                value={data.subject}\r\n                                                name=\"subject\"\r\n                                                onChange={handleChange}\r\n                                                error={data.subjectError}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-12 mx-5\" >\r\n                                        <div style={styles.filedsDivStyling}>\r\n                                            <TextField\r\n                                                required={true}\r\n                                                variant=\"standard\"\r\n                                                label=\"Message\"\r\n                                                multiline\r\n                                                value={data.reportMessage}\r\n                                                rows={7}\r\n                                                rowsMax={Infinity}\r\n                                                style={{ width: '50%', marginBottom: 15 }}\r\n                                                InputLabelProps={{\r\n                                                    style: {\r\n                                                        color: data.reportMessageError ? 'red' : '#4169e1',\r\n                                                        fontSize: 22,\r\n                                                        textTransform: 'uppercase',\r\n                                                        fontWeight: 'bold'\r\n                                                    }\r\n                                                }}\r\n                                                name=\"reportMessage\"\r\n                                                inputProps={{ maxLength: 250 }}\r\n                                                onChange={handleChange}\r\n                                                error={data.reportMessageError}\r\n                                                helperText={`${data.reportMessage.length} / 250`}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12\"\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        marginBottom: '4%'\r\n                                    }}\r\n                                >\r\n                                    <div style={styles.buttonsDivStyling}>\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            style={styles.buttonStyling}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            type=\"submit\"\r\n                                            style={styles.buttonStyling}\r\n                                        >\r\n                                            Register\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <p>You Must Be Logged In With An Authorized Account!!</p>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Researcher_New_Complaint);\r\n\r\nlet styles = {\r\n    filedsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        width: '70%'\r\n    },\r\n    buttonStyling: {\r\n        width: '40%',\r\n        marginTop: '7%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold'\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\RESEARCHER_SCREENS\\Researcher_Dashboard.jsx",["456","457"],"import React, { useState, useEffect } from \"react\";\nimport { withRouter } from 'react-router-dom';\n\n//COMPONENTS\nimport Navbar from \"../Navbar\";\nimport Card from \"../COMPONENTS/CardButton\";\n\n//ICONS\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\n\n\nconst Researcher_Dashboard = (props) => {\n\n    const [authorized, setAuthorized] = useState();\n\n    useEffect(async () => {\n        try {\n            let getUserInfo = await localStorage.getItem('userInfo');\n            let userRole = await JSON.parse(localStorage.getItem('userRole'));\n            if (!getUserInfo || userRole !== 'researcher') {\n                setAuthorized(false)\n                setTimeout(() => {\n                    props.history.push('/')\n                }, 2000);\n            }\n            else {\n                setAuthorized(true)\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    })\n\n    const handleCardButton = (buttonName) => {\n        props.history.push(buttonName);\n    }\n    return (\n        <>\n            {authorized ?\n                <div className=\"container-fluid\"\n                    style={{\n                        backgroundColor: \"white\",\n                    }}\n                >\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Navbar />\n                        </div>\n                        <div\n                            className=\"row\"\n                            style={styles.dashBoardRowStyling}>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"Data Visualization\"\n                                    icon={<AssessmentIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Data_Visualization/')}\n                                />\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"New Complaint\"\n                                    icon={<AddCircleIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/New_Researcher_Complaint/')}\n                                />\n                            </div>\n\n                            <div className=\"col-lg-4 col-md-6 col-sm-12\"\n                                style={styles.buttonDivStyling}\n                            >\n                                <Card\n                                    buttonName=\"All Complaints\"\n                                    icon={<InboxIcon style={styles.iconStyling} />}\n                                    onClickButton={() => handleCardButton('/Researcher_All_Camplaints/')}\n                                />\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n                :\n                <p>You Must Be Logged In With An Authorized Account!!</p>\n            }\n        </>\n    );\n};\nexport default withRouter(Researcher_Dashboard);\n\nconst styles = {\n    dashBoardRowStyling: {\n        marginTop: '10%',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        paddingLeft: '12%',\n        paddingRight: '12%',\n        marginBottom: 20\n        // borderColor: 'blue',\n        // borderWidth: 5,\n        // borderStyle: 'dashed'\n    },\n    buttonDivStyling: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n    },\n    iconStyling: {\n        width: '60%',\n        height: '60%',\n        color: '#4169e1',\n    }\n}","E:\\FYP_WebApp\\fyp\\src\\Navbar.jsx",[],"E:\\FYP_WebApp\\fyp\\src\\Buttons.jsx",["458"],"import React from 'react';\nimport { NavLink, Redirect } from 'react-router-dom';\n\nconst Buttons = (props) => {\n    return (\n        <div id=\"btn\"\n            className=\"col-md-3 col-9 mx-md-5 my-1\">\n            <NavLink id={props.id} to={props.navigate}\n                type={props.type}\n                className=\"btn btn-outline-info btn-lg text-info\"  >\n                {props.name}\n\n            </NavLink>\n\n        </div>\n    );\n};\n\nexport default Buttons;","E:\\FYP_WebApp\\fyp\\src\\Datatables.jsx",["459","460"],"import React, {Component, useState} from 'react'\nimport { NavLink } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport View_Edit from './View_Edit'; \nclass Datatables extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      users: [],\n      isLoading: false,\n      isError: false,\n      addModalShow: false,\n      View_Edit :false      \n    };\n  }\n  checked(){\n      return <Redirect to ='/View_Edit/'/>\n  }\n  async componentDidMount() {\n    this.setState({ isLoading: true })\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\n    if (response.ok) {\n      const users = await response.json()\n      this.setState({ users, isLoading: false })\n    } else {\n      this.setState({ isError: true, isLoading: false })\n    }\n  }\n  render(){\n    const { users, isLoading, isError } = this.state\n    if (isLoading) {\n      return <div>Loading...</div>\n    }\n    if (isError) {\n      return <div>Error</div>\n    }\n    return users.length > 0\n      ? (\n        <table className=\"table table-hover table-bordered-primary mt-5\">\n          <thead>\n            <tr>\n              {this.renderTableHeader()}\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderTableRows()}\n          </tbody>\n        </table>\n      ) : (\n        <div>\n          No users.\n      </div>\n      )\n  }\n  \n  selected(){\n    return<Redirect to =\"/View_Edit\"/>\n  }\n  renderTableHeader = () => {\n    return Object.keys(this.state.users[0]).map(attr => <th className=\"my-5\" key={attr}>{attr.toUpperCase()}</th>\n    )\n  }\n  renderTableRows = () => {   \n    return this.state.users.map(user => {\n      return (\n        <>\n          <tr>\n          <NavLink to=\"/View_Edit/\" type=\"checkbox\" className=\"btn btn-primary btn-lg text-light btn-hover hover-text-light me-md-5 mt-1\" />\n          </tr>  \n          <tr>\n            <td>{user.id}</td>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>{user.email}</td>\n            <td>{`${user.address.street}, ${user.address.city}`}</td>\n            <td>{user.phone}</td>\n            <td>{user.website}</td>\n            <td>{user.company.name}</td>\n          </tr>\n        </>\n      )\n    })\n  }\n}\n\nexport class HDatatables extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      users: [],\n      isLoading: false,\n      isError: false\n    }\n  }\n  async componentDidMount() {\n    this.setState({ isLoading: true })\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\n    if (response.ok) {\n      const users = await response.json()\n      this.setState({ users, isLoading: false })\n    } else {\n      this.setState({ isError: true, isLoading: false })\n    }\n  }\n  render() {\n    const { users, isLoading, isError } = this.state\n    if (isLoading) {\n      return <div>Loading...</div>\n    }\n    if (isError) {\n      return <div>Error</div>\n    }\n    return users.length > 0\n      ? (\n        <table className=\"table table-hover table-bordered-primary mt-5\">\n          <thead>\n            <tr>\n              {this.renderTableHeader()}\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderTableRows()}\n          </tbody>\n        </table>\n      ) : (\n        <div>\n          No users.\n      </div>\n      )\n  }\n  renderTableHeader = () => {\n    return Object.keys(this.state.users[0]).map(attr => <th className=\"my-5\" key={attr}>{attr.toUpperCase()}</th>)\n  }\n  renderTableRows = () => {\n    return this.state.users.map(user => {\n      return (\n        <tr key={user.id}>\n          <td>{user.id}</td>\n          <td>{user.name}</td>\n          <td>{user.username}</td>\n          <td>{user.email}</td>\n          <td>{`${user.address.street}, ${user.address.city}`}</td>\n          <td>{user.phone}</td>\n          <td>{user.website}</td>\n          <td>{user.company.name}</td>\n        </tr>\n      )\n    })\n  }\n}\n\nexport default Datatables;","E:\\FYP_WebApp\\fyp\\src\\Details.jsx",["461","462","463"],"import React, { useState } from 'react';\nimport Buttons from './Buttons';\nimport Datatables ,{HDatatables} from \"./Datatables\";\nimport View_Edit from './View_Edit';\nconst Details = () =>{\n      return(\n        <>        \n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12 col-12 mx-auto gy-5\">\n                        <div className=\" table-responsive my-5\">\n                        <Datatables/>\n                        </div>\n                            <div className=\"d-flex flex-md-row flex-column\" style={{marginLeft:\"85%\", marginRight:\"10%\", padding:\"15px\"}}>\n                                {/* <Buttons name=\"Delete\" id=\"Delete\" type=\"submit\"/> */}\n                                <Buttons name=\"Cancel\" id=\"Cancel\" type=\"submit\"/>\n                            </div>\n                      \n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n  export class Hospital_Details extends React.Component{\n        state={\n            users:[],\n            SelectedOption: ''\n        }\n\n        componentDidMount(){\n            fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({users:users}))\n        }\n        render(){  \n        return(\n      <>        \n          <div className=\"container\">\n              <div className=\"row\">\n                  <div className=\"col-md-12 col-12 mx-auto gy-5\">\n                      <form >\n                          \n        <section className=\"\">\n                                          {this.renderSelector()}\n                                          <div className=\"\">\n                                              {this.renderSelected(this.state.SelectedOption)}\n                                          </div>\n                                      </section>\n             </form>\n                    <div className=\"d-flex flex-md-row flex-column\" style={{marginLeft:\"85%\", marginRight:\"10%\", padding:\"15px\"}}>\n                              {/* <Buttons name=\"Delete\" id=\"Delete\" type=\"submit\"/> */}\n                              <Buttons name=\"Cancel\" id=\"Cancel\" type=\"submit\"/>\n                    </div>\n                </div>\n            </div>\n          </div>\n      </>\n      );\n  \n}\n\nrenderSelector() {\n    return (\n      <div className=\"form-group mt-5\">\n        <label \n            className=\"form-label\">\n                Select what you want to view\n        </label>\n        <select className=\"form-control\"\n          onChange={(e) => this.setState({ SelectedOption: e.target.value })}\n          style={{color:\"GrayText\"}}>\n            <option selected disabled=\"disabled\" value=\"1\" hidden=\"hidden\">-- Select --</option>\n            <option value=\"2\">Hospital</option>\n            <option value=\"3\">Dispensary</option>\n            \n        </select>\n      </div>\n    );\n}\n  renderSelected(SelectedOption) {\n    if (!SelectedOption)\n    return <h1 text=\"Select an option\" />;\n    else if(SelectedOption===\"2\")\n        return <HDatatables />;\n        \n    else if(SelectedOption===\"3\")\n    return <HDatatables/>;\n  }\n\n\n\n};\n\nexport default Details;","E:\\FYP_WebApp\\fyp\\src\\Deletion_Form.jsx",["464","465"],"import React, { useState } from 'react';\nimport Buttons from './Buttons';\nconst Deletion_Form = () =>{\n    const [Deletion , setDeletion] = useState({\n        id:\"\",\n    });\n    const handleInput =() => {\n    \n      };\n const formSubmit = (e) => {\n    e.preventDefault();\n    alert('Yayyyy Login :)');\n  };\n      return(\n        <>        \n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-10 col-10 mx-auto gy-5\">\n                        <form >\n                            <label \n                                className=\"form-label\">\n                                    Select the person you want to delete\n                            </label>\n                            <select className=\"form-select\" aria-label=\"\" type=\"submit\" style={{color:\"GrayText\"}} required >                     \n                                <option selected disabled=\"disabled\" value=\"1\" hidden=\"hidden\">-- Select the person --</option>\n                                <option value=\"2\">Doctor</option>\n                                <option value=\"3\">Health-Worker</option>\n                                <option value=\"4\">Researcher</option>  \n                            </select>                           \n                        </form>\n                        <form onSubmit={formSubmit}>\n                            <div className=\"d-flex flex-md-row flex-column my-md-4 gy-lg-5\">\n                                <div className=\"col-md-12 me-5\">\n                                    <label for=\"Fname\" \n                                    className=\"form-label\">\n                                        ID\n                                    </label>\n                                    <input type=\"text\" \n                                    className=\"form-control\" \n                                    placeholder=\"Enter ID\"\n                                    name=\"id\"\n                                    id =\"id\"\n                                    value={Deletion.id}\n                                    onChange={handleInput}\n                                    required/>\n                                </div>              \n                            </div>                                \n                            <div className=\"d-flex flex-md-row flex-column\" style={{marginLeft:\"70%\", marginRight:\"10%\", padding:\"15px\"}}>\n                                <Buttons name=\"Delete\" id=\"Delete\" type=\"submit\"navigate=\"/Delete_Member/\"/>\n                                <Buttons name=\"Cancel\" id=\"Cancel\" type=\"submit\"navigate=\"/Delete_Member/\"/>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\n\nexport const HDeletion_Form = () =>{\n    const [Deletion , setDeletion] = useState({\n        id:\"\",\n    });\n    const handleInput =() => {\n    }\n      return(\n        <>        \n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-10 col-10 mx-auto gy-5\">\n                        <form >\n                            <label \n                                className=\"form-label\">\n                                    Select what you want to delete\n                            </label>\n                            <select className=\"form-select\" aria-label=\"\" type=\"submit\" style={{color:\"GrayText\"}} required >                     \n                                <option selected disabled=\"disabled\" value=\"1\" hidden=\"hidden\">-- Select --</option>\n                                <option value=\"2\">Hospital</option>\n                                <option value=\"3\">Dispensary</option> \n                            </select>                           \n                        </form>\n                        <form >\n                            <div className=\"d-flex flex-md-row flex-column my-md-4 gy-lg-5\">\n                                <div className=\"col-md-12 me-5\">\n                                    <label for=\"Fname\" \n                                    className=\"form-label\">\n                                        ID\n                                    </label>\n                                    <input type=\"text\" \n                                    className=\"form-control\" \n                                    placeholder=\"Enter ID\"\n                                    name=\"id\"\n                                    id =\"id\"\n                                    value={Deletion.id}\n                                    onChange={handleInput}\n                                    required/>\n                                </div>              \n                            </div>                                \n                            <div className=\"d-flex flex-md-row flex-column\" style={{marginLeft:\"70%\", marginRight:\"10%\", padding:\"15px\"}}>\n                                <Buttons name=\"Delete\" id=\"Delete\" type=\"submit\" navigate=\"/Delete_Member/\"/>\n                                <Buttons name=\"Cancel\" id=\"Cancel\" type=\"submit\" navigate=\"/Delete_Member/\"/>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\nexport default Deletion_Form;   ","E:\\FYP_WebApp\\fyp\\src\\DropDown.jsx",["466"],"import React,{Component} from 'react';\n\nclass DropDown extends React.Component{\n    state={\n        users:[]\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({users:users}))\n    }\n    render(){\n        return <div className=\"drop-down\">\n            <select className=\"form-select\" style={{color:\"GrayText\"}}>\n                <option selected disabled=\"disabled\" value=\"1\" hidden=\"hidden\">-- Select the City --</option> \n                {this.state.users.map(user => <option value =\"user.value\">{user.address.city}</option>)} \n            </select>\n        </div>    \n    }\n}\nexport default DropDown;","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\SnackBar.jsx",["467"],"import React, { useState } from 'react';\r\n\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nconst CustomSnackBar = (props) => {\r\n    return (\r\n        <>\r\n            <div style={{\r\n                justifySelf: 'center',\r\n                width: '100%',\r\n                backgroundColor: props.isError ? '#880808' : '#4BB543',\r\n                height: 40,\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                borderRadius: 10,\r\n            }}\r\n            >\r\n                {!props.isError ?\r\n                    <ThumbUpIcon style={{ color: '#ffffff', marginRight: 20 }} />\r\n                    :\r\n                    <ErrorIcon style={{ color: '#ffffff', marginRight: 20 }} />\r\n                }\r\n                <text style={{ color: '#ffffff', fontSize: 20, textTransform: 'uppercase' }}>{props.message}</text>\r\n                <CancelIcon\r\n                    style={{ color: '#ffffff', position: 'absolute', marginLeft: '82%' }}\r\n                    onClick={props.onClick}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CustomSnackBar;","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Banner.jsx",[],"E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Loading.jsx",["468","469","470","471"],"import React, { useState } from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\r\nimport CircleLoader from \"react-spinners/CircleLoader\";\r\n\r\n\r\nconst Loading = () => {\r\n    const screenHeight = window.innerHeight;\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            height: screenHeight\r\n        }}\r\n        >\r\n            {/* <Spinner animation=\"grow\" style={styles.SpinnerStyling} />\r\n            <Spinner animation=\"grow\" style={styles.SpinnerStyling} />\r\n            <Spinner animation=\"grow\" style={styles.SpinnerStyling} />\r\n            <Spinner animation=\"grow\" style={styles.SpinnerStyling} /> */}\r\n            <ClimbingBoxLoader size={40} color=\"#4169e1\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Loading;\r\n\r\nconst styles = {\r\n    SpinnerStyling: {\r\n        color: '#4169e1',\r\n        marginRight: 20,\r\n        marginLeft: 20,\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\DialogBox.jsx",[],"E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\COMPONENTS\\CallNotification.jsx",[],"E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\CardButton.jsx",["472"],"import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst CardButton = (props) => {\n    return (\n        <>\n            <div style={styles.cardDivStyling}\n            >\n                <div style={styles.iconDivStyling}\n                >\n                    {props.icon}\n                </div>\n\n                <div style={styles.textDivStyling}>\n                    <p\n                        style={styles.textStyling}\n                        onClick={props.onClickButton}\n                    >\n                        {props.buttonName}\n                    </p>\n                </div>\n            </div>\n        </>\n    );\n};\nexport default CardButton;\n\nconst styles = {\n    cardDivStyling: {\n        width: '90%',\n        height: 320,\n        marginBottom: 30,\n    },\n    iconDivStyling: {\n        width: '100%',\n        height: '70%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 2,\n        borderColor: '#4169e1',\n        borderStyle: 'solid',\n        borderTopLeftRadius: 15,\n        borderTopRightRadius: 15,\n    },\n    textDivStyling: {\n        width: '100%',\n        height: '30%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#4169e1',\n        borderBottomLeftRadius: 15,\n        borderBottomRightRadius: 15,\n    },\n    textStyling: {\n        flexShrink: 1,\n        fontSize: '110%',\n        color: '#ffffff',\n        cursor: 'pointer',\n        textTransform: 'uppercase',\n        fontFamily: 'sans-serif',\n        fontWeight: 'bold'\n    }\n}","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Display_Person_Record.jsx",["473","474"],"import React, { useState } from 'react';\r\n\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\n\r\nconst Display_Person_Record = (props) => {\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"row\"\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    paddingLeft: '3%'\r\n                }}\r\n            >\r\n\r\n                <div className=\"col-md-12 col-sm-12\"\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        justifyContent: 'center',\r\n                        marginBottom: 30,\r\n                        marginTop: 10\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={\"data:image/png;base64,\" + props.dp}\r\n                        style={{\r\n                            marginRight: 20,\r\n                            height: 270,\r\n                            width: 270\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"name\"\r\n                        value={props.name}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"user name\"\r\n                        value={props.userName}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"gender\"\r\n                        value={props.gender}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"dob\"\r\n                        value={props.dob}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"contact No\"\r\n                        value={props.contactNo}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"email\"\r\n                        value={props.email}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"cnic\"\r\n                        value={props.cnic}\r\n                        contentEditable={false}\r\n                        // disabled\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"city\"\r\n                        value={props.city}\r\n                        contentEditable={false}\r\n                        // disabled\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n                {props.actor !== 'Researchers' && props.actor !== 'admin' ?\r\n                    < div className=\"col-md-6 col-sm-12\"\r\n                        style={styles.textFieldDivStyling}>\r\n                        <TextField\r\n                            variant=\"standard\"\r\n                            label=\"institute name\"\r\n                            value={props.instituteName}\r\n                            contentEditable={false}\r\n                            // disabled\r\n                            style={{ width: '92%', marginBottom: 10 }}\r\n                            InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"status\"\r\n                        value={props.status}\r\n                        contentEditable={false}\r\n                        // disabled\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"joining date\"\r\n                        value={props.joiningDate}\r\n                        contentEditable={false}\r\n                        // disabled\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default Display_Person_Record;\r\n\r\nconst styles = {\r\n    textFieldDivStyling: {\r\n        marginBottom: '2.5%',\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Update_User_Profile.jsx",["475","476","477","478"],"import React, { useState } from 'react';\r\n\r\n\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\n\r\n\r\n\r\n//COMPONENTS\r\nimport Button from 'react-bootstrap/Button';\r\nimport { TextField, InputLabel, NativeSelect } from '@material-ui/core';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function Update_Profile_Form(props) {\r\n\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [updateImage, setUpdateImage] = useState(false);\r\n    const [passwordError, setPasswordError] = useState(false);\r\n\r\n    // alert(props.id);\r\n    // alert(props.password);\r\n    // alert(props.contactNo);\r\n    // alert(props.email);\r\n    const [userInfo, setUserInfo] = useState({\r\n        contactNo: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        dp: ''\r\n    });\r\n\r\n    const handleSubmitForm = async (e) => {\r\n        alert('?')\r\n        e.preventDefault();\r\n        if (userInfo.password !== userInfo.confirmPassword) {\r\n            setPasswordError(true);\r\n            setErrorMessage('Password does not match!!');\r\n        }\r\n        else {\r\n            if (!userInfo.contactNo && !userInfo.email && !userInfo.password && !userInfo.dp) {\r\n                props.handleClose();\r\n            }\r\n            else if (\r\n                userInfo.contactNo === props.contactNo &&\r\n                userInfo.email === props.email &&\r\n                userInfo.password === props.contactNo\r\n            ) { setErrorMessage('You\\'ve entered same data!!'); }\r\n            else {\r\n                if (updateImage) {\r\n                    const formData = new FormData();\r\n                    formData.append(\"id\", props.id);\r\n                    formData.append(\"contactNo\", userInfo.contactNo !== '' ? userInfo.contactNo : props.contactNo);\r\n                    formData.append(\"email\", userInfo.email !== '' ? userInfo.email : props.email);\r\n                    if (userInfo.password) {\r\n                        formData.append(\"password\", userInfo.password)\r\n                    }\r\n                    formData.append(\"dp\", userInfo.dp);\r\n                    await fetch(`http://localhost:3000/update${props.userRole}Profile`, {\r\n                        method: 'PUT',\r\n                        headers: { 'Authorization': 'Bearer ' + props.authToken },\r\n                        body: formData\r\n                    }).then(result => result.json())\r\n                        .then(data => {\r\n                            console.log('data: ', data)\r\n                            if (data.error) {\r\n                                console.log(data.error)\r\n                                props.handleClose(false, data.error);\r\n                            } else {\r\n                                console.log('data message: ', data.message)\r\n                                handleProfileUpdateSuccess(data);\r\n                            }\r\n                        }).catch(error => {\r\n                            console.log('catch error: ', error)\r\n                        })\r\n                }\r\n                else {\r\n                    fetch(`http://localhost:3000/update${props.userRole}Profile`, {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Authorization': 'Bearer ' + props.authToken\r\n                        },\r\n                        body: JSON.stringify({\r\n                            id: props.id,\r\n                            contactNo: userInfo.contactNo !== '' ? userInfo.contactNo : props.contactNo,\r\n                            email: userInfo.email !== '' ? userInfo.email : props.email,\r\n                            password: userInfo.password !== '' ? userInfo.password : undefined,\r\n                        })\r\n                    }).then(result => result.json())\r\n                        .then(data => {\r\n                            if (data.error) {\r\n                                console.log(data.error)\r\n                                props.handleClose(false, data.error);\r\n                            } else {\r\n                                console.log(data.message)\r\n                                handleProfileUpdateSuccess(data);\r\n                            };\r\n                        }).catch(error => {\r\n                            console.log('catch error: ', error)\r\n                        })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleProfileUpdateSuccess = async (receivedDataFromServer) => {\r\n        console.log('receivedDataFromServer: ', receivedDataFromServer)\r\n        try {\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            let parsedUserInfo = JSON.parse(userInfo);\r\n            receivedDataFromServer.userInfo.authToken = parsedUserInfo.authToken\r\n            await localStorage.setItem('userInfo', JSON.stringify(receivedDataFromServer.userInfo))\r\n            props.handleClose(true, receivedDataFromServer.message);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleCancelButton = () => {\r\n        // setImageUrl('');\r\n        setErrorMessage('')\r\n        setPasswordError(false);\r\n        setUserInfo(prevState => {\r\n            return {\r\n                ...prevState,\r\n                contactNo: '',\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n                dp: null\r\n            }\r\n        });\r\n        props.handleClose()\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setUserInfo({\r\n            ...userInfo,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handleImageUpload = (e) => {\r\n        setUpdateImage(true);\r\n        setImageUrl(URL.createObjectURL(e.target.files[0]));\r\n        setUserInfo(prevState => { return { ...prevState, dp: e.target.files[0] } });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={props.open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={props.handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Update Profile\"}</DialogTitle>\r\n                <text style={styles.errorMessageStyling}>{errorMessage}</text>\r\n                <DialogContent>\r\n                    <form method=\"PUT\" onSubmit={handleSubmitForm}>\r\n                        <div className='row'>\r\n                            <div className=\"col-md-5 col-lg-5 col-sm-12\"\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    justifyContent: 'space-between',\r\n                                    marginBottom: 20,\r\n                                }}\r\n                            >\r\n                                <img src={imageUrl} width={150} heigh={100} style={{ alignSelf: 'center' }} />\r\n                                <input\r\n                                    type=\"file\"\r\n                                    onChange={e => handleImageUpload(e)}\r\n                                    accept=\"image/jpeg\"\r\n                                    style={{ marginLeft: '15%' }}\r\n                                />\r\n                            </div>\r\n\r\n                            <div\r\n                                className=\"col-md-7 col-lg-7 col-sm-12\"\r\n                                style={{ display: 'flex', flexDirection: 'column' }}\r\n                            >\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"contactNo\"\r\n                                    value={userInfo.contactNo}\r\n                                    inputProps={{ pattern: \"03[0-9]{9}\", maxLength: 11 }}\r\n                                    placeholder=\"03001234567\"\r\n                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            // color: data.contactNoError ? 'red' : '#d82fff',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase'\r\n                                        }\r\n                                    }}\r\n                                    name=\"contactNo\"\r\n                                    onChange={handleChange}\r\n                                // error={data.contactNoError}\r\n                                />\r\n\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"email\"\r\n                                    type=\"email\"\r\n                                    value={userInfo.email}\r\n                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            // color: data.emailError ? 'red' : '#d82fff',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase'\r\n                                        }\r\n                                    }}\r\n                                    // value={data.email}\r\n                                    name=\"email\"\r\n                                    onChange={handleChange}\r\n                                // error={data.emailError}\r\n                                />\r\n\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"password\"\r\n                                    value={userInfo.password}\r\n\r\n                                    inputProps={{ minLength: 8 }}\r\n                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            // color: data.emailError ? 'red' : '#d82fff',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase'\r\n                                        }\r\n                                    }}\r\n                                    // value={data.email}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    onChange={handleChange}\r\n                                // error={data.emailError}\r\n                                />\r\n\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"confirm password\"\r\n                                    value={userInfo.confirmPassword}\r\n                                    inputProps={{ minLength: 8 }}\r\n                                    style={{ width: '100%', marginBottom: 15 }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            // color: data.emailError ? 'red' : '#d82fff',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase'\r\n                                        }\r\n                                    }}\r\n                                    // value={data.email}\r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    onChange={handleChange}\r\n                                // error={data.emailError}\r\n                                />\r\n\r\n\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    width: '100%',\r\n                                    display: 'flex',\r\n                                    justifyContent: 'space-around',\r\n                                    marginBlock: 10,\r\n                                    paddingInline: 20\r\n                                }}\r\n                            >\r\n                                <Button\r\n                                    variant=\"outline-primary\"\r\n                                    style={styles.dialogBoxbuttonStyling}\r\n                                    onClick={handleCancelButton}\r\n                                >\r\n                                    cancel\r\n                                    </Button>\r\n                                <Button\r\n                                    variant=\"outline-primary\"\r\n                                    style={styles.dialogBoxbuttonStyling}\r\n                                    type=\"submit\"\r\n                                >\r\n                                    update\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n\r\n                </DialogContent>\r\n            </Dialog >\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst styles = {\r\n    rowStyling: {\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        paddingLeft: '6%',\r\n        paddingRight: '6%',\r\n    },\r\n    deleteButtonStyling: {\r\n        width: 220,\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    dialogBoxbuttonStyling: {\r\n        width: '47%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n    errorMessageStyling: {\r\n        textAlign: 'center',\r\n        fontSize: 18,\r\n        fontFamily: 'sans-serif',\r\n        fontWeight: 'bold',\r\n        color: 'red'\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Update_Institute_Record.jsx",["479","480","481"],"import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport { TextField, InputLabel, NativeSelect } from '@material-ui/core';\r\n\r\n\r\n//COMPONENTS\r\nimport DialogBox from './DialogBox';\r\nimport CustomSnackBar from './SnackBar';\r\n\r\n\r\nconst Update_Institute_Record = (props) => {\r\n\r\n    let updateUrl = `http://localhost:3000/updateOne${props.selectedOption}Record`;\r\n    // alert(updateUrl);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    const [error, setError] = useState({\r\n        nameError: false,\r\n        emailError: false,\r\n        cityError: false,\r\n        contactNoError: false,\r\n        addressError: false,\r\n    });\r\n\r\n    const [userInfo, setUserInfo] = useState({\r\n        name: props.name,\r\n        email: props.email,\r\n        contactNo: props.contactNo,\r\n        city: props.city,\r\n        address: props.address,\r\n        status: props.status,\r\n        joiningDate: props.joiningDate,\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setUserInfo({\r\n            ...userInfo,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handleDialogBoxYesButton = () => {\r\n        setOpen(false);\r\n        setUserInfo(prevState => {\r\n            return {\r\n                ...prevState,\r\n                name: props.name,\r\n                email: props.email,\r\n                contactNo: props.contactNo,\r\n                city: props.city,\r\n                address: props.address,\r\n                status: props.status,\r\n                joiningDate: props.joiningDate,\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (\r\n            userInfo.name === props.name && userInfo.email === props.email\r\n            && userInfo.contactNo === props.contactNo && userInfo.city === props.city\r\n            && userInfo.address === props.address && userInfo.status === props.status\r\n        ) {\r\n            alert('same Data');\r\n        } else {\r\n            let parsedUserInfo = '';\r\n            try {\r\n                let userInfo = await localStorage.getItem('userInfo');\r\n                parsedUserInfo = JSON.parse(userInfo);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            alert('update else')\r\n            await fetch(updateUrl, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + parsedUserInfo.authToken\r\n                },\r\n                body: JSON.stringify({\r\n                    id: props.userID,\r\n                    name: userInfo.name === props.name ? props.name : userInfo.name,\r\n                    email: userInfo.email === props.email ? props.email : userInfo.email,\r\n                    city: userInfo.city === props.city ? props.city : userInfo.city,\r\n                    address: userInfo.address === props.address ? props.address : userInfo.address,\r\n                    contactNo: userInfo.contactNo === props.contactNo ? props.contactNo : userInfo.contactNo,\r\n                    status: userInfo.status === props.status ? props.status : userInfo.status,\r\n                    joiningDate: props.joiningDate\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(userInfo => {\r\n                    console.log(userInfo);\r\n                    if (userInfo.error) {\r\n                        setSnackBar((prevState) => {\r\n                            return {\r\n                                ...prevState,\r\n                                snackBarMessage: userInfo.error,\r\n                                isError: true,\r\n                                showSnackBar: true\r\n                            }\r\n                        });\r\n                    } else {\r\n                        props.handleIsUpdated(true);\r\n                        setSnackBar((prevState) => {\r\n                            return {\r\n                                ...prevState,\r\n                                snackBarMessage: userInfo.message,\r\n                                isError: false,\r\n                                showSnackBar: true\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    const handleRegisterButton = () => {\r\n        if (!userInfo.name) {\r\n            setError((prevState) => { return { ...prevState, nameError: true } });\r\n        }\r\n        if (!userInfo.contactNo) {\r\n            setError((prevState) => { return { ...prevState, contactNoError: true } });\r\n        }\r\n        if (userInfo.city.length === 0) {\r\n            setError((prevState) => { return { ...prevState, cityError: true } });\r\n        }\r\n        if (!userInfo.address) {\r\n            setError((prevState) => { return { ...prevState, addressError: true } });\r\n        }\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar((prevState) => { return { ...prevState, showSnackBar: false } });\r\n    }\r\n\r\n    const handleUpdateButton = () => {\r\n        // props.updateStatus(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ visibility: snackBar.showSnackBar ? 'visible' : 'hidden', marginBottom: 8 }}>\r\n                <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n            </div>\r\n\r\n            <form\r\n                className=\"row\"\r\n                onSubmit={handleSubmit}\r\n                method=\"PUT\"\r\n                style={{\r\n\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    paddingInline: '3%',\r\n                    marginBottom: '10%'\r\n                }}\r\n            >\r\n                <div className=\"col-md-6 col-lg-6 col-sm-12\" >\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label={props.selectedOption === 'Dispensaries' ? 'Dispensary' : \"Hospital\"}\r\n                        inputProps={{ pattern: '[a-z A-z -]{3,}' }}\r\n                        style={{ width: '92%' }}\r\n                        InputLabelProps={{\r\n                            style: {\r\n                                color: setError.nameError ? 'red' : '#4169e1',\r\n                                fontSize: 22,\r\n                                textTransform: 'uppercase',\r\n                                fontWeight: 'bold',\r\n                            }\r\n                        }}\r\n                        required={true}\r\n                        value={userInfo.name}\r\n                        name=\"name\"\r\n                        onChange={handleChange}\r\n                        error={setError.nameError}\r\n                    />\r\n                </div>\r\n\r\n                <div\r\n                    className=\"col-md-6 col-sm-12\"\r\n                >\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"email\"\r\n                        inputProps={{ pattern: \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\" }}\r\n                        style={{ width: '92%' }}\r\n                        InputLabelProps={{\r\n                            style: {\r\n                                color: setError.nameError ? 'red' : '#4169e1',\r\n                                fontSize: 22,\r\n                                textTransform: 'uppercase',\r\n                                fontWeight: 'bold',\r\n                            }\r\n                        }}\r\n                        value={userInfo.email}\r\n                        name=\"email\"\r\n                        onChange={handleChange}\r\n                        error={setError.emailError}\r\n                    />\r\n                </div>\r\n\r\n                <div\r\n                    className=\"col-md-6 col-sm-12\"\r\n                >\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"contactNo\"\r\n                        inputProps={{ pattern: \"([0-9]{4}[0-9]{7})|([0-9]{3}[0-9]{7})\" }}\r\n                        placeholder=\"e.g 0611234567 OR 03001234567\"\r\n                        style={{ width: '92%', marginTop: '3.2%' }}\r\n                        InputLabelProps={{\r\n                            style: {\r\n                                color: setError.contactNoError ? 'red' : '#4169e1',\r\n                                fontSize: 22,\r\n                                textTransform: 'uppercase',\r\n                                fontWeight: 'bold',\r\n                            }\r\n                        }}\r\n                        required={true}\r\n                        value={userInfo.contactNo}\r\n                        name=\"contactNo\"\r\n                        onChange={handleChange}\r\n                        error={setError.contactNoError}\r\n                    />\r\n\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={{ marginTop: '1.3%' }}\r\n                >\r\n                    <InputLabel\r\n                        required\r\n                        style={{\r\n                            fontSize: 20,\r\n                            marginBottom: 0,\r\n                            color: setError.cityError ? 'red' : '#4169e1',\r\n                            fontWeight: 'bold',\r\n                        }}\r\n                        htmlFor=\"city-dropdown\">\r\n                        City\r\n                    </InputLabel>\r\n                    <NativeSelect\r\n                        value={userInfo.city}\r\n                        onChange={handleChange}\r\n                        inputProps={{\r\n                            name: 'city',\r\n                            id: 'city-dropdown',\r\n                        }}\r\n                        style={{ width: '92%' }}\r\n                        required\r\n                        error={setError.cityError}\r\n                    >\r\n                        {/* <option arial-label=\"none\" value=\"\"></option> */}\r\n                        <option value=\"multan\">Multan</option>\r\n                        <option value=\"islamabad\">Islamabad</option>\r\n                        <option value=\"lahore\">Lahore</option>\r\n                        <option value=\"karachi\">Karachi</option>\r\n                        <option value=\"rawalpindi\">Rawalpindi</option>\r\n                    </NativeSelect>\r\n                </div>\r\n\r\n                <div\r\n                    className=\"col-md-6 col-sm-12\"\r\n                >\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"address\"\r\n                        inputProps={{ pattern: \"[a-zA-Z 0-9 . , - #]{5,40}\" }}\r\n                        style={{ width: '92%', marginTop: '3.2%' }}\r\n                        InputLabelProps={{\r\n                            style: {\r\n                                color: setError.addressError ? 'red' : '#4169e1',\r\n                                fontSize: 22,\r\n                                textTransform: 'uppercase',\r\n                                fontWeight: 'bold',\r\n                            }\r\n                        }}\r\n                        required={true}\r\n                        value={userInfo.address}\r\n                        name=\"address\"\r\n                        onChange={handleChange}\r\n                        error={setError.addressError}\r\n                    />\r\n                </div>\r\n\r\n                <div\r\n                    className=\"col-md-6 col-sm-12\"\r\n                    style={{ marginTop: '1.3%' }}\r\n                >\r\n                    <InputLabel style={{ fontWeight: 'bold', marginBottom: 0, fontSize: 20, color: '#4169e1' }} htmlFor=\"status-dropdown\">Status</InputLabel>\r\n                    <NativeSelect\r\n                        value={userInfo.status}\r\n                        onChange={handleChange}\r\n                        inputProps={{\r\n                            name: 'status',\r\n                            id: 'status-dropdown',\r\n                        }}\r\n                        style={{ width: '92%' }}\r\n                    >\r\n                        {/* <option aria-label=\"None\" value=\"\" /> */}\r\n                        <option value=\"active\">active</option>\r\n                        <option value=\"not active\">Not Active</option>\r\n                    </NativeSelect>\r\n                </div>\r\n\r\n                <div\r\n                    className=\"col-md-6 col-sm-12\"\r\n                    style={{ marginTop: '2.5%' }}\r\n                >\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"joining Date\"\r\n                        style={{ width: '92%' }}\r\n                        InputLabelProps={{ style: { fontWeight: 'bold', color: '#4169e1', fontSize: 22, textTransform: 'uppercase' } }}\r\n                        contentEditable={false}\r\n                        value={userInfo.joiningDate}\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={{\r\n                        position: 'absolute',\r\n                        marginTop: '23%',\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        marginRight: '4%',\r\n\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"outline-primary\"\r\n                        onClick={() => setOpen(true)}\r\n                        style={styles.buttonStyling}\r\n                    >\r\n                        Cancel\r\n                         </Button>\r\n\r\n                    <Button\r\n                        variant=\"outline-primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => handleUpdateButton()}\r\n                        style={styles.buttonStyling}\r\n                    >\r\n                        Update\r\n                         </Button>\r\n                </div>\r\n            </form>\r\n\r\n            <DialogBox\r\n                open={open}\r\n                title=\"Are You Sure You Want To Discard Changes?\"\r\n                content=\"By Cliking on 'YES' All changes will be discarded.\"\r\n                leftButtonName=\"No\"\r\n                rightButtonName=\"Yes\"\r\n                handleClose={() => setOpen(false)}\r\n                handleDelete={() => handleDialogBoxYesButton()}\r\n            />\r\n        </>\r\n    );\r\n}\r\nexport default Update_Institute_Record;\r\n\r\nlet styles = {\r\n    fieldsDivStyling: {\r\n        marginBottom: '2%'\r\n    },\r\n    buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n    },\r\n    buttonStyling: {\r\n        width: '45%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Display_Institute_Record.jsx",["482","483","484"],"import React, { useState } from 'react';\r\n\r\nimport { TextField, InputLabel, NativeSelect } from '@material-ui/core';\r\n\r\n\r\n\r\nconst Display_Institute_Record = (props) => {\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"row\"\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    paddingLeft: '3%'\r\n                }}\r\n            >\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"name\"\r\n                        value={props.name}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase' , fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"email\"\r\n                        value={props.email}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase' , fontWeight: 'bold' , } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"contact No\"\r\n                        value={props.contactNo}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase' , fontWeight: 'bold' , } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"city\"\r\n                        value={props.city}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase' , fontWeight: 'bold' , } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"address\"\r\n                        value={props.address}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase' , fontWeight: 'bold' , } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"status\"\r\n                        value={props.status}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase' , fontWeight: 'bold' , } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"joining date\"\r\n                        value={props.joiningDate}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase' , fontWeight: 'bold' , } }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Display_Institute_Record;\r\n\r\nconst styles = {\r\n    textFieldDivStyling: {\r\n        marginBottom: '2.5%',\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Update_Person_Record.jsx",["485","486","487","488","489"],"import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { TextField, InputLabel, NativeSelect } from '@material-ui/core';\r\n\r\n//COMPONENTS\r\nimport DialogBox from './DialogBox';\r\nimport CustomSnackBar from './SnackBar';\r\nimport CustomDatePicker from './datePicker';\r\n\r\n\r\n//DATA\r\nimport { cities } from '../DATA/Cities';\r\nimport { villages } from '../DATA/Villages';\r\n\r\nconst Update_Person_Record = (props) => {\r\n    let updateUrl = `http://localhost:3000/updateOne${props.selectedOption}Record`;\r\n    // alert(updateUrl);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [hospitalNames, sethospitalNames] = useState([]);\r\n    const [dispensariesNames, setDispensariesNames] = useState([]);\r\n\r\n    var date = new Date().toLocaleDateString('en-GB', {\r\n        day: 'numeric',\r\n        month: 'numeric',\r\n        year: 'numeric'\r\n    });\r\n\r\n    const [snackBar, setSnackBar] = useState({\r\n        snackBarMessage: '',\r\n        showSnackBar: false,\r\n        isError: false\r\n    });\r\n\r\n    const [error, setError] = useState({\r\n        nameError: false,\r\n        genderError: false,\r\n        dobError: false,\r\n        emailError: false,\r\n        cityError: false,\r\n        cnicError: false,\r\n        contactNoError: false,\r\n        instituteNameError: false,\r\n    });\r\n\r\n    const [userInfo, setUserInfo] = useState({\r\n        name: props.name,\r\n        userName: props.userName,\r\n        gender: props.gender,\r\n        dob: props.dob,\r\n        email: props.email,\r\n        city: props.city,\r\n        cnic: props.cnic,\r\n        contactNo: props.contactNo,\r\n        instituteName: props.instituteName,\r\n        status: props.status,\r\n        joiningDate: props.joiningDate,\r\n        dp: props.dp\r\n    });\r\n\r\n    let parsedUserInfo = '';\r\n    useEffect(async () => {\r\n        if (props.actor !== 'Researcher') {\r\n            try {\r\n                let userInfo = await localStorage.getItem('userInfo');\r\n                parsedUserInfo = JSON.parse(userInfo);\r\n                console.log('parsed user info: ', parsedUserInfo);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n\r\n            await fetch(`http://localhost:3000/fetchAllDispensariesNames`, {\r\n                method: 'GET',\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.message) {\r\n                        console.log(data.message);\r\n                    } else {\r\n                        console.log('fetch dispensaries names: ', data);\r\n                        setDispensariesNames(data);\r\n                    }\r\n                }).catch(error => {\r\n                    console.log('catch error: ', error);\r\n                });\r\n\r\n\r\n            await fetch(`http://localhost:3000/fetchAllhospitalsNames`, {\r\n                method: 'GET',\r\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.message) {\r\n                        console.log(data.message);\r\n                    } else {\r\n                        console.log('fetch hospital names: ', data);\r\n                        sethospitalNames(data);\r\n                    }\r\n                }).catch(error => {\r\n                    console.log('catch error: ', error);\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setUserInfo({\r\n            ...userInfo,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handleDialogBoxYesButton = () => {\r\n        setOpen(false);\r\n        setUserInfo(prevState => {\r\n            return {\r\n                ...prevState,\r\n                name: props.name,\r\n                userName: props.userName,\r\n                gender: props.gender,\r\n                dob: props.dob,\r\n                email: props.email,\r\n                city: props.city,\r\n                cnic: props.cnic,\r\n                contactNo: props.contactNo,\r\n                password: props.password,\r\n                instituteName: props.instituteName,\r\n                status: props.status,\r\n                joiningDate: props.joiningDate,\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (\r\n            userInfo.name === props.name && userInfo.gender === props.gender\r\n            && userInfo.dob === props.dob && userInfo.contactNo === props.contactNo\r\n            && userInfo.email === props.email && userInfo.cnic === props.cnic\r\n            && userInfo.city === props.city && userInfo.instituteName === props.instituteName\r\n            && userInfo.status === props.status\r\n        ) {\r\n            alert('same Data');\r\n        } else {\r\n            alert('update else')\r\n            let parsedUserInfo = '';\r\n            try {\r\n                let userInfo = await localStorage.getItem('userInfo');\r\n                parsedUserInfo = JSON.parse(userInfo);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            await fetch(updateUrl, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + parsedUserInfo.authToken\r\n                },\r\n                body: JSON.stringify({\r\n                    id: props.userID,\r\n                    name: userInfo.name === props.name ? props.name : userInfo.name,\r\n                    userName: props.userName,\r\n                    gender: userInfo.gender === props.gender ? props.gender : userInfo.gender,\r\n                    dob: userInfo.dob === props.dob ? props.dob : userInfo.dob,\r\n                    contactNo: userInfo.contactNo === props.contactNo ? props.contactNo : userInfo.contactNo,\r\n                    email: userInfo.email === props.email ? props.email : userInfo.email,\r\n                    cnic: userInfo.cnic === props.cnic ? props.cnic : userInfo.cnic,\r\n                    city: userInfo.city === props.city ? props.city : userInfo.city,\r\n                    instituteName: userInfo.instituteName === props.instituteName ? props.instituteName : userInfo.instituteName,\r\n                    status: userInfo.status === props.status ? props.status : userInfo.status,\r\n                    joiningDate: props.joiningDate\r\n                })\r\n            })\r\n                .then(res => res.json())\r\n                .then(userInfo => {\r\n                    console.log(userInfo);\r\n                    if (userInfo.error) {\r\n                        setSnackBar((prevState) => {\r\n                            return {\r\n                                ...prevState,\r\n                                snackBarMessage: userInfo.error,\r\n                                isError: true,\r\n                                showSnackBar: true\r\n                            }\r\n                        });\r\n                    } else {\r\n                        props.handleIsUpdated(true);\r\n                        setSnackBar((prevState) => {\r\n                            return {\r\n                                ...prevState,\r\n                                snackBarMessage: userInfo.message,\r\n                                isError: false,\r\n                                showSnackBar: true\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    const handleRegisterButton = () => {\r\n        if (!userInfo.name) {\r\n            setUserInfo((prevState) => { return { ...prevState, nameError: true } });\r\n        }\r\n        if (!userInfo.userName) {\r\n            setUserInfo((prevState) => { return { ...prevState, userNameError: true } });\r\n        }\r\n        if (!userInfo.gender) {\r\n            setUserInfo((prevState) => { return { ...prevState, genderError: true } });\r\n        }\r\n        if (!userInfo.contactNo) {\r\n            setUserInfo((prevState) => { return { ...prevState, contactNoError: true } });\r\n        }\r\n        if (!userInfo.email) {\r\n            setUserInfo((prevState) => { return { ...prevState, emailError: true } });\r\n        }\r\n        if (!userInfo.cnic) {\r\n            setUserInfo((prevState) => { return { ...prevState, cnicError: true } });\r\n        }\r\n        if (!userInfo.city) {\r\n            setUserInfo((prevState) => { return { ...prevState, cityError: true } });\r\n        }\r\n        if (!userInfo.address) {\r\n            setUserInfo((prevState) => { return { ...prevState, addressError: true } });\r\n        }\r\n        if (!userInfo.instituteName) {\r\n            setUserInfo((prevState) => { return { ...prevState, instituteNameError: true } });\r\n        }\r\n    }\r\n\r\n    const handleSnackBar = () => {\r\n        setSnackBar((prevState) => { return { ...prevState, showSnackBar: false } });\r\n    }\r\n\r\n\r\n    const handleDateChange = (date) => {\r\n        let newDob = date.toLocaleString('en-GB', {\r\n            day: 'numeric',\r\n            month: 'short',\r\n            year: 'numeric'\r\n        });\r\n        setUserInfo((prevState) => { return { ...prevState, dob: newDob } });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div >\r\n                <div style={{ visibility: snackBar.showSnackBar ? 'visible' : 'hidden' }} >\r\n                    <CustomSnackBar onClick={handleSnackBar} message={snackBar.snackBarMessage} isError={snackBar.isError} />\r\n                </div>\r\n                <div className=\"col-md-12 col-sm-12\"\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        justifyContent: 'center',\r\n                        marginBottom: 30,\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={\"data:image/png;base64,\" + props.dp}\r\n                        style={{\r\n                            marginRight: 20,\r\n                            height: 250,\r\n                            width: 250\r\n                        }}\r\n                    />\r\n                </div>\r\n                <form onSubmit={handleSubmit} method=\"POST\">\r\n                    <div className=\"d-flex flex-column\">\r\n                        <div className=\"col-md-12\" >\r\n                            <div style={styles.fieldsDivStyling}>\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"Full Name\"\r\n                                    inputProps={{ pattern: '[a-z A-z -]{3,}' }}\r\n                                    style={{ width: '45%' }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            color: error.nameError ? 'red' : '#4169e1',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase',\r\n                                            fontWeight: 'bold'\r\n                                        }\r\n                                    }}\r\n                                    required={true}\r\n                                    value={userInfo.name}\r\n                                    name=\"name\"\r\n                                    onChange={handleChange}\r\n                                    error={error.nameError}\r\n                                />\r\n\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"user name\"\r\n                                    contentEditable={false}\r\n                                    style={{ width: '45%' }}\r\n                                    InputLabelProps={{ style: { fontWeight: 'bold', color: error.userNameError ? 'red' : '#4169e1', fontSize: 22, textTransform: 'uppercase' } }}\r\n                                    value={userInfo.userName}\r\n                                    name=\"userName\"\r\n                                    error={error.userNameError}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"col-md-12 my-3\" >\r\n                            <div style={styles.fieldsDivStyling}>\r\n                                <div style={{ width: '45%' }}>\r\n                                    <InputLabel\r\n                                        required\r\n                                        style={{\r\n                                            fontSize: 20,\r\n                                            color: error.genderError ? 'red' : '#4169e1',\r\n                                            fontWeight: 'bold'\r\n                                        }}\r\n                                        htmlFor=\"gender-dropdown\">\r\n                                        Gender\r\n                                    </InputLabel>\r\n                                    <NativeSelect\r\n                                        value={userInfo.gender}\r\n                                        onChange={handleChange}\r\n                                        inputProps={{\r\n                                            name: 'gender',\r\n                                            id: 'gender-dropdown',\r\n                                        }}\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        error={error.genderError}\r\n                                    >\r\n                                        {/* <option aria-label=\"None\" value=\"\" /> */}\r\n                                        <option value=\"MALE\">Male</option>\r\n                                        <option value=\"FEMALE\">Female</option>\r\n                                        <option value=\"OTHER\">Other</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n\r\n                                <div style={{ width: '45%', marginTop: '1%' }}>\r\n                                    <CustomDatePicker\r\n                                        label=\"DOB\"\r\n                                        onChange={handleDateChange}\r\n                                        value={userInfo.dob}\r\n                                        isError={error.dobError}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12 my-3\">\r\n                            <div style={styles.fieldsDivStyling}>\r\n\r\n\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"contactNo\"\r\n                                    inputProps={{ pattern: \"03[0-9]{9}\", maxLength: 11 }}\r\n                                    placeholder=\"03001234567\"\r\n                                    style={{ width: '45%' }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            color: error.contactNoError ? 'red' : '#4169e1',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase',\r\n                                            fontWeight: 'bold'\r\n                                        }\r\n                                    }}\r\n                                    required={true}\r\n                                    value={userInfo.contactNo}\r\n                                    name=\"contactNo\"\r\n                                    onChange={handleChange}\r\n                                    error={error.contactNoError}\r\n                                />\r\n\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"email\"\r\n                                    type=\"email\"\r\n                                    // inputProps={{ pattern: \"[0-9]{5}-[0-9]{7}-[0-9]{1}\" }}\r\n                                    style={{ width: '45%' }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            color: error.emailError ? 'red' : '#4169e1',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase',\r\n                                            fontWeight: 'bold'\r\n                                        }\r\n                                    }}\r\n                                    value={userInfo.email}\r\n                                    name=\"email\"\r\n                                    onChange={handleChange}\r\n                                    error={error.emailError}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-12 my-3\">\r\n\r\n                            <div style={styles.fieldsDivStyling}>\r\n\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    label=\"cnic\"\r\n                                    inputProps={{ pattern: \"[0-9]{5}-[0-9]{7}-[0-9]{1}\" }}\r\n                                    style={{ width: '45%' }}\r\n                                    InputLabelProps={{\r\n                                        style: {\r\n                                            color: error.cnicError ? 'red' : '#4169e1',\r\n                                            fontSize: 22,\r\n                                            textTransform: 'uppercase',\r\n                                            fontWeight: 'bold'\r\n                                        }\r\n                                    }}\r\n                                    value={userInfo.cnic}\r\n                                    name=\"cnic\"\r\n                                    onChange={handleChange}\r\n                                    error={error.cnicError}\r\n                                    required\r\n                                />\r\n\r\n\r\n                                <div style={{ width: '45%' }}>\r\n                                    <InputLabel\r\n                                        required\r\n                                        style={{\r\n                                            fontSize: 20,\r\n                                            color: error.cityError ? 'red' : '#4169e1',\r\n                                            marginBottom: 0,\r\n                                            fontWeight: 'bold'\r\n                                        }}\r\n                                        htmlFor=\"city-dropdown\">\r\n                                        City\r\n                                    </InputLabel>\r\n                                    <NativeSelect\r\n                                        value={userInfo.city}\r\n                                        onChange={handleChange}\r\n                                        inputProps={{\r\n                                            name: 'city',\r\n                                            id: 'city-dropdown',\r\n                                        }}\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        error={error.cityError}\r\n                                    >\r\n                                        <option label={userInfo.city} value={userInfo.city}></option>\r\n                                        {props.selectedOption === 'HealthWorkers' ?\r\n                                            villages.map((item, index) => {\r\n                                                return <option key={index} value={item}>{item}</option>\r\n                                            })\r\n                                            :\r\n                                            cities.map((item, index) => {\r\n                                                return <option key={index} value={item}>{item}</option>\r\n                                            })\r\n                                        }\r\n                                    </NativeSelect>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                        {/* {alert(props.selectedOption)} */}\r\n                        <div className=\"col-md-12 my-3\">\r\n                            <div style={styles.fieldsDivStyling}>\r\n                                <div style={{ width: '45%' }}>\r\n                                    {props.selectedOption === 'Researchers' ?\r\n                                        <>\r\n                                            <InputLabel\r\n                                                required\r\n                                                style={{\r\n                                                    fontSize: 20,\r\n                                                    color: '#4169e1',\r\n                                                    fontWeight: 'bold'\r\n                                                }}\r\n                                                htmlFor=\"status-dropdown\">\r\n                                                Status\r\n                                            </InputLabel>\r\n                                            <NativeSelect\r\n                                                value={userInfo.status}\r\n                                                onChange={handleChange}\r\n                                                inputProps={{\r\n                                                    name: 'status',\r\n                                                    id: 'status-dropdown',\r\n                                                }}\r\n                                                style={{ width: '100%' }}\r\n                                                required\r\n                                            >\r\n                                                <option value=\"ACTIVE\">Active</option>\r\n                                                <option value=\"NOT ACTIVE\">Not Active</option>\r\n                                            </NativeSelect>\r\n                                        </>\r\n                                        :\r\n                                        <>\r\n                                            <InputLabel\r\n                                                required\r\n                                                style={{\r\n                                                    fontSize: 20,\r\n                                                    color: error.instituteNameError ? 'red' : '#4169e1',\r\n                                                    fontWeight: 'bold'\r\n                                                }}\r\n                                                htmlFor=\"institute-dropdown\">\r\n                                                Associated {props.selectedOption === 'Doctors' ? 'Hospital' : \"Dispensary\"}\r\n                                            </InputLabel>\r\n                                            <NativeSelect\r\n                                                value={userInfo.instituteName}\r\n                                                onChange={handleChange}\r\n                                                inputProps={{\r\n                                                    name: 'instituteName',\r\n                                                    id: 'institute-dropdown',\r\n                                                }}\r\n                                                style={{ width: '100%' }}\r\n                                                required\r\n                                                error={error.instituteNameError}\r\n                                            >\r\n                                                <option label={userInfo.instituteName} value={userInfo.instituteName}></option>\r\n                                                {props.selectedOption === 'Doctors' ?\r\n                                                    hospitalNames.map((item, index) => {\r\n                                                        return <option key={index} value={item.name}>{item.name}</option>\r\n                                                    })\r\n                                                    :\r\n                                                    dispensariesNames.map((item, index) => {\r\n                                                        return <option key={index} value={item.name}>{item.name}</option>\r\n                                                    })\r\n                                                }\r\n                                            </NativeSelect>\r\n                                        </>\r\n                                    }\r\n                                </div>\r\n\r\n                                {props.selectedOption === 'Researchers' ?\r\n                                    <TextField\r\n                                        variant=\"standard\"\r\n                                        label=\"joining Date\"\r\n                                        style={{ width: '45%', marginTop: 5 }}\r\n                                        InputLabelProps={{ style: { fontWeight: 'bold', color: '#4169e1', fontSize: 22, textTransform: 'uppercase' } }}\r\n                                        contentEditable={false}\r\n                                        value={userInfo.joiningDate}\r\n                                        name=\"joiningDate\"\r\n                                    />\r\n                                    :\r\n                                    <>\r\n                                        <div style={{ width: '45%' }}>\r\n                                            <InputLabel\r\n                                                required\r\n                                                style={{\r\n                                                    fontSize: 20,\r\n                                                    color: '#4169e1',\r\n                                                    fontWeight: 'bold'\r\n                                                }}\r\n                                                htmlFor=\"status-dropdown\">\r\n                                                Status\r\n                                    </InputLabel>\r\n                                            <NativeSelect\r\n                                                value={userInfo.status}\r\n                                                onChange={handleChange}\r\n                                                inputProps={{\r\n                                                    name: 'status',\r\n                                                    id: 'status-dropdown',\r\n                                                }}\r\n                                                style={{ width: '100%' }}\r\n                                                required\r\n                                            >\r\n                                                <option value=\"active\">Active</option>\r\n                                                <option value=\"not active\">Not Active</option>\r\n                                            </NativeSelect>\r\n                                        </div>\r\n                                    </>\r\n                                }\r\n\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                        {props.selectedOption === 'Researchers' ?\r\n                            null\r\n                            :\r\n                            <div className=\"col-md-12 my-3\">\r\n                                <div style={{\r\n                                    width: '100%',\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    justifyContent: 'center'\r\n                                }}>\r\n                                    <TextField\r\n                                        variant=\"standard\"\r\n                                        label=\"joining Date\"\r\n                                        style={{ width: '45%', marginTop: 5 }}\r\n                                        InputLabelProps={{ style: { fontWeight: 'bold', color: '#4169e1', fontSize: 22, textTransform: 'uppercase' } }}\r\n                                        contentEditable={false}\r\n                                        value={userInfo.joiningDate}\r\n                                        name=\"joiningDate\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\" style={styles.buttonsDivStyling}>\r\n                        <Button\r\n                            variant=\"outline-primary\"\r\n                            onClick={() => setOpen(true)}\r\n                            style={styles.buttonStyling}\r\n                        >\r\n                            Cancel\r\n                            </Button>\r\n\r\n                        <Button\r\n                            variant=\"outline-primary\"\r\n                            type=\"submit\"\r\n                            onClick={() => handleRegisterButton()}\r\n                            style={styles.buttonStyling}\r\n                        >\r\n                            Update\r\n                            </Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            <DialogBox\r\n                open={open}\r\n                title=\"Are You Sure You Want To Discard Changes?\"\r\n                content=\"By Cliking on 'YES' All changes will be discarded.\"\r\n                leftButtonName=\"No\"\r\n                rightButtonName=\"Yes\"\r\n                handleClose={() => setOpen(false)}\r\n                handleDelete={() => handleDialogBoxYesButton()}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Update_Person_Record;\r\n\r\n\r\nlet styles = {\r\n    fieldsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        width: '100%',\r\n    },\r\n    buttonsDivStyling: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        marginBottom: 25\r\n    },\r\n    buttonStyling: {\r\n        width: '35%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontWeight: 'bold'\r\n    }\r\n}","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Reply_Form.jsx",["490","491","492"],"import React, { useEffect, useState } from 'react';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function Reply_Form(props) {\r\n\r\n    let parsedInfo = '';\r\n    let parsedUserInfo = '';\r\n    const [reportReply, setReportReply] = useState({\r\n        subject: '',\r\n        reportMessage: '',\r\n        reportStatus: 'resolved'\r\n    });\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            let info = await localStorage.getItem('recordsPassToNextScreen');\r\n            let userInfo = await localStorage.getItem('userInfo');\r\n            parsedInfo = JSON.parse(info);\r\n            parsedUserInfo = JSON.parse(userInfo);\r\n        } catch (error) {\r\n            console.log('catch error: ', error);\r\n        }\r\n    });\r\n\r\n    let replyUrl = '';\r\n    if (props.type === 'report') {\r\n        replyUrl = 'http://localhost:3000/reportReply';\r\n    } else {\r\n        replyUrl = 'http://localhost:3000/requestReply';\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        await fetch(replyUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + parsedUserInfo.authToken\r\n            },\r\n            body: JSON.stringify({\r\n                reportID: parsedInfo.reportID,\r\n                reporterID: parsedInfo.reporterID,\r\n                reporterRole: props.type === 'report' ? props.reporterRole : null,\r\n                subject: reportReply.subject,\r\n                reportStatus: reportReply.reportStatus,\r\n                message: reportReply.reportMessage,\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                if (data.error) {\r\n                    props.handleClose(true, false);\r\n                }\r\n                else {\r\n                    props.handleClose(true, true);\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setReportReply({\r\n            ...reportReply,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    return (\r\n        <Dialog\r\n            open={props.open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={() => props.handleClose(true)}\r\n        >\r\n            <DialogTitle>REPORT REPLY</DialogTitle>\r\n            <DialogContent>\r\n                <form method=\"POST\" onSubmit={handleSubmit}\r\n                    style={{ padding: 20 }}\r\n                >\r\n                    <TextField\r\n                        required\r\n                        variant=\"standard\"\r\n                        label=\"Subject\"\r\n                        value={reportReply.subject}\r\n                        style={{ width: '100%', marginBottom: 15 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 22, textTransform: 'uppercase' } }}\r\n                        name=\"subject\"\r\n                        inputProps={{ maxLength: 100 }}\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <TextField\r\n                        required\r\n                        variant=\"standard\"\r\n                        label=\"To\"\r\n                        value={props.to}\r\n                        contentEditable={false}\r\n                        style={{ width: '100%', marginBottom: 15 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 22, textTransform: 'uppercase' } }}\r\n                    />\r\n\r\n                    <FormControl style={{ width: '100%' }}>\r\n                        <InputLabel\r\n                            required\r\n                            style={{\r\n                                fontSize: 20,\r\n                                color: '#4169e1',\r\n                                textTransform: 'uppercase',\r\n                                marginBottom: 0,\r\n                                fontWeight: 'bold',\r\n                            }}\r\n                            htmlFor=\"reportStatus-dropdown\">\r\n                            {props.type === 'report' ? \"Report Status\" : \"Request Status\"}\r\n                        </InputLabel>\r\n                        <NativeSelect\r\n                            // variant=\"standard\"\r\n                            // label={props.type === 'report' ? \"Report Status\" : \"Request Status\"}\r\n                            value={reportReply.reportStatus}\r\n                            onChange={e => setReportReply({ ...reportReply, reportStatus: e.target.value })}\r\n                            inputProps={{\r\n                                name: 'reportStatus',\r\n                                id: 'reportStatus-dropdown',\r\n                            }}\r\n                            style={{ width: '100%' }}\r\n                            required\r\n                        >\r\n                            <option value=\"resolved\">Resolved</option>\r\n                            <option value=\"Pending\">Pending</option>\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        required\r\n                        variant=\"standard\"\r\n                        label=\"Message\"\r\n                        multiline\r\n                        value={reportReply.reportMessage}\r\n                        contentEditable={false}\r\n                        rows={7}\r\n                        rowsMax={Infinity}\r\n                        style={{ width: '100%', marginBottom: 15 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 22, textTransform: 'uppercase' } }}\r\n                        name=\"reportMessage\"\r\n                        inputProps={{ maxLength: 250 }}\r\n                        onChange={handleChange}\r\n                        helperText={`${reportReply.reportMessage.length} / ${props.messageMaxLength}`}\r\n                    />\r\n\r\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <Button\r\n                            variant=\"outline-primary\"\r\n                            style={styles.dialogBoxbuttonStyling}\r\n                            onClick={() => props.handleClose(true)}\r\n                        >\r\n                            {props.leftButtonName}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outline-primary\"\r\n                            style={styles.dialogBoxbuttonStyling}\r\n                            type=\"submit\"\r\n                        >\r\n                            {props.rightButtonName}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nconst styles = {\r\n    dialogBoxbuttonStyling: {\r\n        width: '30%',\r\n        textTransform: 'uppercase',\r\n        fontSize: 20,\r\n        fontFamily: 'sans-serif',\r\n    },\r\n}\r\n","E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Institiute_RegistrationForm.jsx",["493","494","495"],"import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport moment from 'moment';\nimport { TextField, InputLabel, NativeSelect, FormControl } from '@material-ui/core';\n\n//COMPONENTS\nimport CustomSnackBar from './SnackBar';\nimport DialogBox from './Update_User_Profile';\n\n//DATA\nimport { cities } from '../DATA/Cities';\nimport { villages } from '../DATA/Villages';\n\nconst Institiute_RegistrationForm = (props) => {\n\n    let date = moment().format('DD-MM-YYYY');\n    let addUrl = `http://localhost:3000/add${props.selectedOption}`;\n\n    const [data, setData] = useState({\n        name: \"\",\n        email: \"\",\n        contactNo: '',\n        city: \"\",\n        address: \"\",\n        status: 'active',\n        date: date,\n        nameError: false,\n        emailError: false,\n        cityError: false,\n        contactNoError: false,\n        addressError: false,\n        showSnackBar: false,\n        snackBarMessage: '',\n        isError: false\n    });\n\n    let parsedUserInfo = '';\n    useEffect(async () => {\n        try {\n            let userInfo = await localStorage.getItem('userInfo');\n            parsedUserInfo = JSON.parse(userInfo);\n        } catch (error) {\n            console.log(error);\n        }\n    });\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        setData({\n            ...data,\n            [name]: event.target.value,\n        });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        await fetch(addUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + parsedUserInfo.authToken\n            },\n            body: JSON.stringify({\n                name: data.name,\n                email: data.email,\n                city: data.city,\n                address: data.address,\n                contactNo: data.contactNo,\n                status: data.status,\n                joiningDate: data.date\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                if (data.error) {\n                    setData((prevState) => { return { ...prevState, isError: true } });\n                    setData((prevState) => { return { ...prevState, showSnackBar: true } });\n                    setData((prevState) => { return { ...prevState, snackBarMessage: data.error } });\n                } else {\n                    setData((prevState) => { return { ...prevState, isError: false } });\n                    setData((prevState) => { return { ...prevState, showSnackBar: true } });\n                    setData((prevState) => { return { ...prevState, snackBarMessage: data.message } });\n                    setData((prevState) => {\n                        return {\n                            ...prevState,\n                            name: \"\",\n                            email: \"\",\n                            contactNo: '',\n                            city: \"\",\n                            address: \"\",\n                            status: 'active',\n                            date: date,\n                            nameError: false,\n                            emailError: false,\n                            cityError: false,\n                            contactNoError: false,\n                            addressError: false\n                        }\n                    });\n                }\n            });\n    }\n\n    const handleRegisterButton = () => {\n        if (!data.name) {\n            setData((prevState) => { return { ...prevState, nameError: true } });\n        }\n        if (!data.contactNo) {\n            setData((prevState) => { return { ...prevState, contactNoError: true } });\n        }\n        if (data.city.length === 0) {\n            setData((prevState) => { return { ...prevState, cityError: true } });\n        }\n        if (!data.address) {\n            setData((prevState) => { return { ...prevState, addressError: true } });\n        }\n    }\n\n    const handleSnackBar = () => {\n        setData((prevState) => { return { ...prevState, showSnackBar: false } });\n    }\n\n    const handleDialogBox = () => {\n        return (\n            <DialogBox />\n        );\n    };\n\n    return (\n        <>\n            <div>\n\n                <div style={{ visibility: data.showSnackBar ? 'visible' : 'hidden' }} >\n                    <CustomSnackBar onClick={handleSnackBar} message={data.snackBarMessage} isError={data.isError} />\n                </div>\n\n                <form onSubmit={handleSubmit} method=\"POST\">\n                    <div className=\"d-flex flex-column\" >\n                        <div className=\"col-md-12 my-3\" >\n                            <div style={styles.filedsDivStyling}>\n                                <TextField\n                                    variant=\"standard\"\n                                    label={props.institute}\n                                    inputProps={{ pattern: '[a-z A-z -]{3,}' }}\n                                    style={{ width: '47%' }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.nameError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold',\n                                        }\n                                    }}\n                                    required={true}\n                                    value={data.name}\n                                    name=\"name\"\n                                    onChange={handleChange}\n                                    error={data.nameError}\n                                />\n\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"email\"\n                                    inputProps={{ pattern: \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\" }}\n                                    style={{\n                                        width: '47%',\n                                    }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: '#4169e1',\n                                            fontSize: 22,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold',\n                                        }\n                                    }}\n                                    value={data.email}\n                                    name=\"email\"\n                                    onChange={handleChange}\n                                    error={data.emailError}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"col-md-12 my-3\">\n                            <div style={styles.filedsDivStyling}>\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"contactNo\"\n                                    inputProps={{ pattern: \"([0-9]{4}[0-9]{7})|([0-9]{3}[0-9]{7})\", maxLength: 11 }}\n                                    placeholder=\"e.g 0611234567 OR 03001234567\"\n                                    style={{ width: '47%', marginTop: '0.1%' }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.contactNoError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold',\n                                        }\n                                    }}\n                                    required={true}\n                                    value={data.contactNo}\n                                    name=\"contactNo\"\n                                    onChange={handleChange}\n                                    error={data.contactNoError}\n                                />\n\n                                <FormControl style={{ width: '47%' }}>\n                                    <InputLabel\n                                        required\n                                        style={{\n                                            fontSize: 20,\n                                            color: data.cityError ? 'red' : '#4169e1',\n                                            fontWeight: 'bold',\n                                            textTransform: 'uppercase',\n                                            marginBottom: 0\n                                        }}\n                                        htmlFor=\"city-dropdown\">\n                                        {props.actor === 'doctor' ? 'city' : 'area'}\n                                    </InputLabel>\n                                    <NativeSelect\n                                        value={data.city}\n                                        onChange={handleChange}\n                                        inputProps={{\n                                            name: \"city\",\n                                            id: 'city-dropdown',\n                                        }}\n                                        style={{ width: '100%' }}\n                                        required\n                                        error={data.cityError}\n                                    >\n                                        <option arial-label=\"none\" value=\"\"></option>\n                                        {props.actor === 'doctor' ?\n                                            cities.map((item, index) => {\n                                                return <option key={index} value={item}>{item}</option>\n                                            })\n                                            :\n                                            villages.map((item, index) => {\n                                                return <option key={index} value={item}>{item}</option>\n                                            })\n                                        }\n                                    </NativeSelect>\n                                </FormControl>\n\n                            </div>\n\n                        </div>\n\n\n                        <div className=\"col-md-12 my-3\">\n\n                            <div style={styles.filedsDivStyling}>\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"address\"\n                                    inputProps={{ pattern: \"[a-zA-Z 0-9 . , - #]{5,40}\" }}\n                                    style={{ width: '47%', marginBottom: 20 }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.addressError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }\n                                    }}\n                                    required={true}\n                                    value={data.address}\n                                    name=\"address\"\n                                    onChange={handleChange}\n                                    error={data.addressError}\n                                // onBlur={() => handleLoginbutton()}\n                                />\n\n                                <FormControl style={{ width: '47%' }}>\n                                    <InputLabel\n                                        style={{\n                                            fontSize: 20,\n                                            color: '#4169e1',\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold',\n                                            marginBottom: 0\n                                        }}\n                                        htmlFor=\"status-dropdown\">Status</InputLabel>\n                                    <NativeSelect\n                                        value={data.status}\n                                        onChange={handleChange}\n                                        inputProps={{\n                                            name: 'status',\n                                            id: 'status-dropdown',\n                                        }}\n                                        style={{ width: '100%' }}\n                                    >\n                                        <option aria-label=\"None\" value=\"\" />\n                                        <option value=\"active\">active</option>\n                                        <option value=\"not active\">Not Active</option>\n                                    </NativeSelect>\n                                </FormControl>\n                            </div>\n                        </div>\n\n                        <div className=\"col-md-12 my-3\">\n\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"date\"\n                                    style={{ width: '47%' }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold',\n                                        }\n                                    }}\n                                    contentEditable={false}\n                                    value={data.date}\n                                    name=\"date\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-12\"\n                        style={{ display: 'flex', justifyContent: 'center' }}\n                    >\n                        <div style={styles.buttonsDivStyling}>\n                            <Button\n                                variant=\"outline-primary\"\n                                onClick={() => handleDialogBox()}\n                                style={styles.buttonStyling}\n                            >\n                                Cancel\n                            </Button>\n\n                            <Button\n                                variant=\"outline-primary\"\n                                type=\"submit\"\n                                onClick={() => handleRegisterButton()}\n                                style={styles.buttonStyling}\n                            >\n                                Register\n                            </Button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </>\n    );\n}\nexport default Institiute_RegistrationForm;\n\nlet styles = {\n    filedsDivStyling: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        width: '100%',\n    },\n    buttonsDivStyling: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        width: '70%',\n        marginTop: 20\n    },\n    buttonStyling: {\n        width: '45%',\n        textTransform: 'uppercase',\n        fontSize: 20,\n        fontWeight: 'bold'\n    }\n}","E:\\FYP_WebApp\\fyp\\src\\DOCTOR_SCREENS\\Display_Patient_Record.jsx",["496","497","498","499","500"],"import React, { useState } from 'react';\r\n\r\nimport { TextField, InputLabel, NativeSelect } from '@material-ui/core';\r\nimport logo from '../images/comunication.png';\r\n\r\n\r\n\r\nconst Display_Patient_Record = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"row\"\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    paddingLeft: '3%',\r\n                    marginTop: '3%'\r\n                }}\r\n            >\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"Case ID\"\r\n                        value={props.caseID}\r\n                        // defaultValue=\"2604202103\"\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"Name\"\r\n                        value={props.name}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"gender\"\r\n                        value={props.gender}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"Age\"\r\n                        value={props.age}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"District\"\r\n                        value={props.district}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"Home Town\"\r\n                        value={props.homeTown}\r\n                        contentEditable={false}\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"Dengue Status\"\r\n                        value={props.dengueStatus}\r\n                        contentEditable={false}\r\n                        // disabled\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"Dispensary\"\r\n                        value={props.dispensary}\r\n                        contentEditable={false}\r\n                        // disabled\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 col-sm-12\"\r\n                    style={styles.textFieldDivStyling}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        label=\"Date\"\r\n                        value={props.date}\r\n                        contentEditable={false}\r\n                        // disabled\r\n                        style={{ width: '92%', marginBottom: 10 }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                </div>\r\n                <div className=\"row mt-5 my-5\">\r\n\r\n                    <TextField\r\n                        required\r\n                        variant=\"standard\"\r\n                        label=\"Symptoms\"\r\n                        multiline\r\n                        value={props.symptoms}\r\n                        contentEditable={false}\r\n                        rows={10}\r\n                        rowsMax={Infinity}\r\n                        style={{ width: '60%' }}\r\n                        InputLabelProps={{ style: { color: '#4169e1', fontSize: 20, textTransform: 'uppercase', fontWeight: 'bold', } }}\r\n                    />\r\n                    <div\r\n                        style={{ width: '30%', height: '25vh', visibility: props.symptomsImage ? 'visible' : 'hidden' }}>\r\n                        <img\r\n                            src={\"data:image/png;base64,\" + props.symptomsImage}\r\n                            style={{\r\n                                marginLeft: '40%',\r\n                                height: 200,\r\n                                width: 270\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Display_Patient_Record;\r\n\r\nconst styles = {\r\n    textFieldDivStyling: {\r\n        marginBottom: '2.5%',\r\n    }\r\n}",["501","502"],"E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\Person_RegistrationForm.jsx",["503","504","505","506"],"import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport moment from 'moment';\nimport { TextField, InputLabel, NativeSelect } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport { makeStyles } from '@material-ui/core/styles';\n\n//COMPONENTS\nimport CustomSnackBar from './SnackBar';\nimport CustomDatePicker from './datePicker';\n\n//DATA\nimport { cities } from '../DATA/Cities';\nimport { villages } from '../DATA/Villages';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst Person_RegistrationForm = (props) => {\n\n    const classes = useStyles();\n\n    let url = `http://localhost:3000/add${props.actor}/`;\n\n    let route = '';\n    if (props.actor === 'doctor') {\n        route = 'addDoctor'\n    } else if (props.actor === 'addDoctor') {\n        route = 'addHealthWorker'\n    } else if (props.actor === 'Researcher') {\n        route = 'addResearcher'\n    }\n\n    let date = moment().format('DD-MM-YYYY');\n    const [hospitalNames, sethospitalNames] = useState([]);\n    const [dispensariesNames, setDispensariesNames] = useState([]);\n\n    const [data, setData] = useState({\n        name: \"\",\n        userName: \"\",\n        gender: '',\n        dob: '01/01/2001',\n        email: \"\",\n        city: \"\",\n        cnic: \"\",\n        contactNo: \"\",\n        password: '',\n        instituteName: \"\",\n        status: 'active',\n        joiningDate: date,\n        nameError: false,\n        genderError: false,\n        dobError: false,\n        emailError: false,\n        cityError: false,\n        cnicError: false,\n        contactNoError: false,\n        instituteNameError: false,\n        showSnackBar: false,\n        snackBarMessage: '',\n        isError: false\n    });\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        setData({\n            ...data,\n            [name]: event.target.value,\n        });\n    };\n\n    let userInfo = '';\n    const getUserInfoFromLocalStorage = async () => {\n        try {\n            userInfo = await localStorage.getItem('userInfo');\n            parsedUserInfo = JSON.parse(userInfo);\n            console.log('parsed user info: ', parsedUserInfo);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    let parsedUserInfo = '';\n    useEffect(async () => {\n        if (props.actor !== 'Researcher') {\n            await getUserInfoFromLocalStorage();\n            await fetch(`http://localhost:3000/fetchAllDispensariesNames`, {\n                method: 'GET',\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\n            })\n                .then(res => res.json())\n                .then(data => {\n                    if (data.message) {\n                        console.log(data.message);\n                    } else {\n                        console.log('fetch dispensaries names: ', data);\n                        setDispensariesNames(data);\n                    }\n                }).catch(error => {\n                    console.log('catch error: ', error);\n                });\n\n\n            await fetch(`http://localhost:3000/fetchAllhospitalsNames`, {\n                method: 'GET',\n                headers: { 'Authorization': 'Bearer ' + parsedUserInfo.authToken }\n            })\n                .then(res => res.json())\n                .then(data => {\n                    if (data.message) {\n                        console.log(data.message);\n                    } else {\n                        console.log('fetch hospital names: ', data);\n                        sethospitalNames(data);\n                    }\n                }).catch(error => {\n                    console.log('catch error: ', error);\n                });\n        }\n    }, []);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        await getUserInfoFromLocalStorage();\n        await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + parsedUserInfo.authToken\n            },\n            body: JSON.stringify({\n                name: data.name,\n                userName: data.userName,\n                email: data.email,\n                password: data.password,\n                gender: data.gender,\n                dob: data.dob,\n                cnic: data.cnic,\n                contactNo: data.contactNo,\n                city: data.city,\n                instituteName: data.instituteName,\n                joiningDate: data.joiningDate,\n                status: data.status\n            })\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                if (data.error) {\n                    setData((prevState) => {\n                        return {\n                            ...prevState,\n                            isError: true,\n                            showSnackBar: true,\n                            snackBarMessage: data.error\n                        }\n                    });\n                } else {\n                    setData((prevState) => {\n                        return {\n                            ...prevState,\n                            isError: false,\n                            showSnackBar: true,\n                            snackBarMessage: data.message,\n                            name: \"\",\n                            userName: \"\",\n                            gender: '',\n                            dob: '01/01/2001',\n                            contactNo: \"\",\n                            email: \"\",\n                            cnic: \"\",\n                            city: \"\",\n                            address: '',\n                            instituteName: \"\",\n                            status: 'active',\n                            joiningDate: date,\n                            password: '',\n                            nameError: false,\n                            userNameError: false,\n                            genderError: false,\n                            dobError: false,\n                            contactNoError: false,\n                            emailError: false,\n                            cnicError: false,\n                            cityError: false,\n                            addressError: false,\n                            instituteNameError: false,\n                        }\n                    });\n                }\n            });\n    }\n\n    const handleRegisterButton = () => {\n        if (!data.name) {\n            setData((prevState) => { return { ...prevState, nameError: true } });\n        }\n        if (!data.userName) {\n            setData((prevState) => { return { ...prevState, userNameError: true } });\n        }\n        if (!data.gender) {\n            setData((prevState) => { return { ...prevState, genderError: true } });\n        }\n        if (!data.contactNo) {\n            setData((prevState) => { return { ...prevState, contactNoError: true } });\n        }\n        if (!data.email) {\n            setData((prevState) => { return { ...prevState, emailError: true } });\n        }\n        if (!data.cnic) {\n            setData((prevState) => { return { ...prevState, cnicError: true } });\n        }\n        if (!data.city) {\n            setData((prevState) => { return { ...prevState, cityError: true } });\n        }\n        if (!data.address) {\n            setData((prevState) => { return { ...prevState, addressError: true } });\n        }\n        if (!data.instituteName) {\n            setData((prevState) => { return { ...prevState, instituteNameError: true } });\n        }\n    }\n\n    const handleSnackBar = () => {\n        setData((prevState) => { return { ...prevState, showSnackBar: false } });\n    }\n\n    const handleNameFieldOnBlur = () => {\n        let getUserName = '';\n        let getPassword = '';\n        let str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n            'abcdefghijklmnopqrstuvwxyz0123456789@#$';\n\n        //USERNAME GENERATION\n        if (data.name) {\n            if (data.name.includes(' ')) {\n                getUserName = data.name.substr(0, data.name.indexOf(' '));\n            } else {\n                getUserName = data.name.substr(data.name.indexOf(' ') + 1);\n            }\n            getUserName = getUserName + '_' + Math.floor(1000 + Math.random() * 9000);\n            setData((prevState) => { return { ...prevState, userName: getUserName } });\n        } else {\n            setData((prevState) => { return { ...prevState, userName: '' } });\n        }\n\n\n        //password generation\n        for (let i = 1; i <= 8; i++) {\n            let char = Math.floor(Math.random() * str.length + 1);\n            getPassword += str.charAt(char)\n        }\n        setData((prevState) => { return { ...prevState, password: getPassword } });\n    }\n\n    const handleDateChange = (date) => {\n        let newDob = date.toLocaleString('en-GB', {\n            day: 'numeric',\n            month: 'short',\n            year: 'numeric'\n        });\n        setData((prevState) => { return { ...prevState, dob: newDob } });\n    };\n\n    return (\n        <>\n            <div >\n                <div style={{ visibility: data.showSnackBar ? 'visible' : 'hidden' }} >\n                    <CustomSnackBar onClick={handleSnackBar} message={data.snackBarMessage} isError={data.isError} />\n                </div>\n\n                <form onSubmit={handleSubmit} method=\"POST\">\n                    <div className=\"d-flex flex-column\">\n                        <div className=\"col-md-12 my-3\" >\n                            <div style={styles.fieldsDivStyling}>\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"Full Name\"\n                                    inputProps={{ pattern: '[a-z A-z -]{3,}' }}\n                                    style={{ width: '47%', marginBottom: 10 }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.nameError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }\n                                    }}\n                                    required={true}\n                                    value={data.name}\n                                    name=\"name\"\n                                    onChange={handleChange}\n                                    error={data.nameError}\n                                    onBlur={() => handleNameFieldOnBlur()}\n                                />\n\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"user name\"\n                                    contentEditable={false}\n                                    style={{ width: '47%', marginBottom: 10 }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.userNameError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }\n                                    }}\n                                    value={data.userName}\n                                    name=\"userName\"\n                                    onChange={handleChange}\n                                    error={data.userNameError}\n                                    required\n                                />\n                            </div>\n                        </div>\n\n\n                        <div className=\"col-md-12 my-3\" >\n                            <div style={styles.fieldsDivStyling}>\n                                <FormControl style={{ width: '47%' }}>\n                                    <InputLabel\n                                        required\n                                        style={{\n                                            fontSize: 20,\n                                            color: data.genderError ? 'red' : '#4169e1',\n                                            textTransform: 'uppercase',\n                                            marginBottom: 0,\n                                            fontWeight: 'bold',\n                                        }}\n                                        htmlFor=\"gender-dropdown\">\n                                        Gender\n                                    </InputLabel>\n                                    <NativeSelect\n                                        // variant=\"standard\"\n                                        label=\"user name\"\n                                        value={data.gender}\n                                        onChange={handleChange}\n                                        inputProps={{\n                                            name: 'gender',\n                                            id: 'gender-dropdown',\n                                        }}\n                                        style={{ width: '100%' }}\n                                        required\n                                        error={data.genderError}\n                                    >\n                                        <option aria-label=\"None\" value=\"\" />\n                                        <option value=\"male\">Male</option>\n                                        <option value=\"female\">Female</option>\n                                        <option value=\"other\">Other</option>\n                                    </NativeSelect>\n                                </FormControl>\n\n                                <div style={{ width: '47%' }}>\n                                    <CustomDatePicker\n                                        label=\"DOB\"\n                                        onChange={handleDateChange}\n                                        value={data.dob}\n                                        isError={data.dobError}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-12 my-3\">\n                            <div style={styles.fieldsDivStyling}>\n\n\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"contactNo\"\n                                    inputProps={{ pattern: \"03[0-9]{9}\", maxLength: 11 }}\n                                    placeholder=\"03001234767\"\n                                    style={{ width: '47%' }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.contactNoError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }\n                                    }}\n                                    required={true}\n                                    value={data.contactNo}\n                                    name=\"contactNo\"\n                                    onChange={handleChange}\n                                    error={data.contactNoError}\n                                />\n\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"email\"\n                                    type=\"email\"\n                                    // inputProps={{ pattern: \"[0-9]{5}-[0-9]{7}-[0-9]{1}\" }}\n                                    style={{ width: '47%', marginBottom: 10 }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.emailError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }\n                                    }}\n                                    value={data.email}\n                                    name=\"email\"\n                                    onChange={handleChange}\n                                    error={data.emailError}\n                                    required\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"col-md-12 my-3\">\n\n                            <div style={styles.fieldsDivStyling}>\n\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"cnic\"\n                                    inputProps={{ pattern: \"[0-9]{5}-[0-9]{7}-[0-9]{1}\" }}\n                                    style={{ width: '47%', marginBottom: 10 }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.cnicError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }\n                                    }}\n                                    value={data.cnic}\n                                    name=\"cnic\"\n                                    onChange={handleChange}\n                                    error={data.cnicError}\n                                    required\n                                />\n\n\n                                <FormControl style={{ width: '47%' }}>\n                                    <InputLabel\n                                        required\n                                        style={{\n                                            fontSize: 20,\n                                            color: data.cityError ? 'red' : '#4169e1',\n                                            marginBottom: 0,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }}\n                                        htmlFor=\"city-dropdown\">\n                                        City\n                                    </InputLabel>\n                                    <NativeSelect\n                                        value={data.city}\n                                        onChange={handleChange}\n                                        inputProps={{\n                                            name: 'city',\n                                            id: 'city-dropdown',\n                                        }}\n                                        style={{ width: '100%' }}\n                                        required\n                                        error={data.cityError}\n                                    >\n                                        <option aria-label=\"None\" value=\"\" />\n                                        {props.actor === 'HealthWorker' ?\n                                            villages.map((item, index) => {\n                                                return <option key={index} value={item}>{item}</option>\n                                            })\n                                            :\n                                            cities.map((item, index) => {\n                                                return <option key={index} value={item}>{item}</option>\n                                            })\n                                        }\n                                    </NativeSelect>\n                                </FormControl>\n\n\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-md-12 my-3\">\n                            <div style={styles.fieldsDivStyling}>\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"address\"\n                                    inputProps={{ pattern: \"[a-zA-Z 0-9 . , - #]{5,40}\" }}\n                                    style={{ width: '47%', marginBottom: 20 }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: data.addressError ? 'red' : '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold'\n                                        }\n                                    }}\n                                    required={true}\n                                    value={data.address}\n                                    name=\"address\"\n                                    onChange={handleChange}\n                                    error={data.addressError}\n                                // onBlur={() => handleLoginbutton()}\n                                />\n\n\n                                <FormControl style={{ width: '47%' }}>\n                                    {props.actor === 'Researcher' ?\n                                        <>\n                                            <InputLabel\n                                                required\n                                                style={{\n                                                    fontSize: 20,\n                                                    color: '#4169e1',\n                                                    fontWeight: 'bold',\n                                                    textTransform: 'uppercase',\n                                                }}\n                                                htmlFor=\"status-dropdown\">\n                                                Status\n                                            </InputLabel>\n                                            <NativeSelect\n                                                value={data.status}\n                                                onChange={handleChange}\n                                                inputProps={{\n                                                    name: 'status',\n                                                    id: 'status-dropdown',\n                                                }}\n                                                style={{ width: '100%' }}\n                                                required\n                                            >\n                                                <option value=\"active\">Active</option>\n                                                <option value=\"not active\">Not Active</option>\n                                            </NativeSelect>\n                                        </>\n                                        :\n                                        <>\n                                            <InputLabel\n                                                required\n                                                style={{\n                                                    fontSize: 20,\n                                                    color: data.instituteNameError ? 'red' : '#4169e1',\n                                                    marginBottom: 0,\n                                                    fontWeight: 'bold',\n                                                    textTransform: 'uppercase',\n                                                }}\n                                                htmlFor=\"institute-dropdown\">\n                                                Assocaited {props.institute}\n                                            </InputLabel>\n                                            <NativeSelect\n                                                value={data.instituteName}\n                                                onChange={handleChange}\n                                                inputProps={{\n                                                    name: 'instituteName',\n                                                    id: 'institute-dropdown',\n                                                }}\n                                                style={{ width: '100%' }}\n                                                required\n                                                error={data.instituteNameError}\n                                            >\n                                                <option aria-label=\"None\" value=\"\" />\n                                                {props.actor === 'Doctor' ?\n                                                    hospitalNames.map((item, index) => {\n                                                        return <option key={index} value={item.name}>{item.name}</option>\n                                                    })\n                                                    :\n                                                    dispensariesNames.map((item, index) => {\n                                                        return <option key={index} value={item.name}>{item.name}</option>\n                                                    })\n                                                }\n                                            </NativeSelect>\n                                        </>\n                                    }\n                                </FormControl>\n\n                            </div>\n\n\n                        </div>\n\n                        <div className=\"col-md-12 my-3\">\n                            <div style={{\n                                width: '100%',\n                                display: 'flex',\n                                flexDirection: 'row',\n                                justifyContent: props.actor === 'Researcher' ? 'center' : 'space-between'\n                            }}>\n                                {props.actor === 'Researcher' ?\n                                    null\n                                    :\n                                    <>\n                                        <FormControl style={{ width: '47%' }}>\n                                            <InputLabel\n                                                required\n                                                style={{\n                                                    fontSize: 20,\n                                                    color: '#4169e1',\n                                                    marginBottom: 0,\n                                                    fontWeight: 'bold',\n                                                    textTransform: 'uppercase',\n                                                }}\n                                                htmlFor=\"status-dropdown\">\n                                                Status\n                                            </InputLabel>\n                                            <NativeSelect\n                                                value={data.status}\n                                                onChange={handleChange}\n                                                inputProps={{\n                                                    name: 'status',\n                                                    id: 'status-dropdown',\n                                                }}\n                                                style={{ width: '100%' }}\n                                                required\n                                            >\n                                                <option value=\"active\">Active</option>\n                                                <option value=\"not active\">Not Active</option>\n                                            </NativeSelect>\n                                        </FormControl>\n                                    </>\n                                }\n\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"joining Date\"\n                                    style={{ width: '47%', marginTop: 5 }}\n                                    InputLabelProps={{\n                                        style: {\n                                            color: '#4169e1',\n                                            fontSize: 20,\n                                            textTransform: 'uppercase',\n                                            fontWeight: 'bold',\n                                        }\n                                    }}\n                                    contentEditable={false}\n                                    value={data.joiningDate}\n                                    name=\"joiningDate\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-12\"\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                        }}\n                    >\n                        <div style={styles.buttonsDivStyling}>\n                            <Button\n                                variant=\"outline-primary\"\n                                // onClick={() => handleDialogBox()}\n                                style={styles.buttonStyling}\n                            >\n                                Cancel\n                            </Button>\n\n                            <Button\n                                variant=\"outline-primary\"\n                                type=\"submit\"\n                                onClick={() => handleRegisterButton()}\n                                style={styles.buttonStyling}\n                            >\n                                Register\n                            </Button>\n                        </div>\n                    </div>\n                </form>\n            </div >\n        </>\n    );\n}\n\nexport default Person_RegistrationForm;\n\n\nlet styles = {\n    fieldsDivStyling: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        width: '100%',\n    },\n    buttonsDivStyling: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        width: '70%',\n        marginTop: 20\n\n    },\n    buttonStyling: {\n        width: '45%',\n        textTransform: 'uppercase',\n        fontSize: 20,\n        fontWeight: 'bold'\n    }\n}\n\n\n\n\n\n\n\n\n","E:\\FYP_WebApp\\fyp\\src\\DATA\\Villages.js",[],"E:\\FYP_WebApp\\fyp\\src\\DATA\\Cities.js",[],"E:\\FYP_WebApp\\fyp\\src\\COMPONENTS\\datePicker.jsx",["507"],"import 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n    DatePicker\r\n} from '@material-ui/pickers';\r\n\r\n\r\nexport default function CustomDatePicker(props) {\r\n    // const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\r\n\r\n    // const handleDateChange = (date) => {\r\n    //     setSelectedDate(date);\r\n    // };\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <Grid container justify=\"space-around\">\r\n                <KeyboardDatePicker\r\n                    id=\"date-picker-dialog\"\r\n                    label={props.label}\r\n                    format=\"dd MMM yyyy\"\r\n                    type=\"String\"\r\n                    value={props.value}\r\n                    required\r\n                    style={{\r\n                        width: '100%',\r\n                        color: props.dobError ? 'red' : '#4169e1',\r\n                    }}\r\n                    InputLabelProps={{\r\n                        style: {\r\n                            color: props.isError ? 'red' : '#4169e1',\r\n                            fontSize: 20,\r\n                            textTransform: 'uppercase',\r\n                            fontWeight: 'bold'\r\n                        }\r\n                    }}\r\n                    onChange={props.onChange}\r\n                    // KeyboardButtonProps={{\r\n                    //     'aria-label': 'change date',\r\n                    // }}\r\n                />\r\n            </Grid>\r\n        </MuiPickersUtilsProvider>\r\n    );\r\n}\r\n",{"ruleId":"508","replacedBy":"509"},{"ruleId":"510","replacedBy":"511"},{"ruleId":"512","severity":1,"message":"513","line":2,"column":10,"nodeType":"514","messageId":"515","endLine":2,"endColumn":18},{"ruleId":"512","severity":1,"message":"516","line":2,"column":52,"nodeType":"514","messageId":"515","endLine":2,"endColumn":58},{"ruleId":"512","severity":1,"message":"517","line":3,"column":10,"nodeType":"514","messageId":"515","endLine":3,"endColumn":25},{"ruleId":"518","severity":1,"message":"519","line":22,"column":29,"nodeType":"520","endLine":22,"endColumn":55},{"ruleId":"512","severity":1,"message":"521","line":4,"column":8,"nodeType":"514","messageId":"515","endLine":4,"endColumn":15},{"ruleId":"522","severity":1,"message":"523","line":67,"column":18,"nodeType":"520","endLine":67,"endColumn":49},{"ruleId":"518","severity":1,"message":"524","line":23,"column":29,"nodeType":"520","endLine":23,"endColumn":46},{"ruleId":"518","severity":1,"message":"525","line":22,"column":29,"nodeType":"520","endLine":22,"endColumn":50},{"ruleId":"512","severity":1,"message":"513","line":5,"column":19,"nodeType":"514","messageId":"515","endLine":5,"endColumn":27},{"ruleId":"512","severity":1,"message":"526","line":3,"column":8,"nodeType":"514","messageId":"515","endLine":3,"endColumn":15},{"ruleId":"518","severity":1,"message":"527","line":23,"column":29,"nodeType":"520","endLine":23,"endColumn":48},{"ruleId":"512","severity":1,"message":"528","line":4,"column":21,"nodeType":"514","messageId":"515","endLine":4,"endColumn":31},{"ruleId":"512","severity":1,"message":"529","line":4,"column":33,"nodeType":"514","messageId":"515","endLine":4,"endColumn":45},{"ruleId":"512","severity":1,"message":"530","line":4,"column":47,"nodeType":"514","messageId":"515","endLine":4,"endColumn":58},{"ruleId":"531","severity":1,"message":"532","line":55,"column":5,"nodeType":"514","endLine":55,"endColumn":14,"suggestions":"533"},{"ruleId":"531","severity":1,"message":"534","line":55,"column":15,"nodeType":"535","endLine":65,"endColumn":6},{"ruleId":"536","severity":1,"message":"537","line":248,"column":9,"nodeType":"538","messageId":"539","endLine":248,"endColumn":23},{"ruleId":"512","severity":1,"message":"540","line":4,"column":10,"nodeType":"514","messageId":"515","endLine":4,"endColumn":19},{"ruleId":"531","severity":1,"message":"534","line":47,"column":15,"nodeType":"535","endLine":68,"endColumn":6},{"ruleId":"531","severity":1,"message":"541","line":68,"column":8,"nodeType":"542","endLine":68,"endColumn":20,"suggestions":"543"},{"ruleId":"531","severity":1,"message":"544","line":78,"column":8,"nodeType":"542","endLine":78,"endColumn":24,"suggestions":"545"},{"ruleId":"546","severity":1,"message":"547","line":133,"column":25,"nodeType":"520","endLine":133,"endColumn":131},{"ruleId":"512","severity":1,"message":"548","line":7,"column":8,"nodeType":"514","messageId":"515","endLine":7,"endColumn":15},{"ruleId":"512","severity":1,"message":"549","line":13,"column":8,"nodeType":"514","messageId":"515","endLine":13,"endColumn":21},{"ruleId":"512","severity":1,"message":"550","line":41,"column":12,"nodeType":"514","messageId":"515","endLine":41,"endColumn":19},{"ruleId":"531","severity":1,"message":"534","line":51,"column":15,"nodeType":"535","endLine":88,"endColumn":6},{"ruleId":"531","severity":1,"message":"551","line":88,"column":8,"nodeType":"542","endLine":88,"endColumn":10,"suggestions":"552"},{"ruleId":"553","severity":1,"message":"554","line":337,"column":97,"nodeType":"535","messageId":"555","endLine":337,"endColumn":99},{"ruleId":"531","severity":1,"message":"534","line":41,"column":15,"nodeType":"535","endLine":66,"endColumn":6},{"ruleId":"531","severity":1,"message":"556","line":66,"column":8,"nodeType":"542","endLine":66,"endColumn":10,"suggestions":"557"},{"ruleId":"512","severity":1,"message":"540","line":3,"column":10,"nodeType":"514","messageId":"515","endLine":3,"endColumn":19},{"ruleId":"512","severity":1,"message":"558","line":8,"column":8,"nodeType":"514","messageId":"515","endLine":8,"endColumn":17},{"ruleId":"512","severity":1,"message":"559","line":9,"column":8,"nodeType":"514","messageId":"515","endLine":9,"endColumn":18},{"ruleId":"512","severity":1,"message":"560","line":10,"column":8,"nodeType":"514","messageId":"515","endLine":10,"endColumn":18},{"ruleId":"512","severity":1,"message":"561","line":11,"column":8,"nodeType":"514","messageId":"515","endLine":11,"endColumn":22},{"ruleId":"512","severity":1,"message":"562","line":27,"column":12,"nodeType":"514","messageId":"515","endLine":27,"endColumn":20},{"ruleId":"512","severity":1,"message":"563","line":27,"column":22,"nodeType":"514","messageId":"515","endLine":27,"endColumn":33},{"ruleId":"531","severity":1,"message":"534","line":46,"column":15,"nodeType":"535","endLine":67,"endColumn":6},{"ruleId":"531","severity":1,"message":"541","line":67,"column":8,"nodeType":"542","endLine":67,"endColumn":10,"suggestions":"564"},{"ruleId":"531","severity":1,"message":"544","line":77,"column":8,"nodeType":"542","endLine":77,"endColumn":24,"suggestions":"565"},{"ruleId":"546","severity":1,"message":"547","line":114,"column":25,"nodeType":"520","endLine":114,"endColumn":126},{"ruleId":"512","severity":1,"message":"530","line":3,"column":47,"nodeType":"514","messageId":"515","endLine":3,"endColumn":58},{"ruleId":"531","severity":1,"message":"534","line":71,"column":15,"nodeType":"535","endLine":107,"endColumn":6},{"ruleId":"531","severity":1,"message":"566","line":107,"column":8,"nodeType":"542","endLine":107,"endColumn":10,"suggestions":"567"},{"ruleId":"518","severity":1,"message":"568","line":193,"column":41,"nodeType":"520","endLine":205,"endColumn":43},{"ruleId":"531","severity":1,"message":"534","line":19,"column":15,"nodeType":"535","endLine":38,"endColumn":6},{"ruleId":"531","severity":1,"message":"551","line":38,"column":8,"nodeType":"542","endLine":38,"endColumn":10,"suggestions":"569"},{"ruleId":"531","severity":1,"message":"534","line":32,"column":15,"nodeType":"535","endLine":55,"endColumn":6},{"ruleId":"531","severity":1,"message":"541","line":55,"column":8,"nodeType":"542","endLine":55,"endColumn":10,"suggestions":"570"},{"ruleId":"546","severity":1,"message":"547","line":89,"column":25,"nodeType":"520","endLine":89,"endColumn":126},{"ruleId":"512","severity":1,"message":"571","line":1,"column":17,"nodeType":"514","messageId":"515","endLine":1,"endColumn":25},{"ruleId":"512","severity":1,"message":"540","line":4,"column":10,"nodeType":"514","messageId":"515","endLine":4,"endColumn":19},{"ruleId":"518","severity":1,"message":"572","line":96,"column":41,"nodeType":"520","endLine":96,"endColumn":112},{"ruleId":"518","severity":1,"message":"572","line":99,"column":45,"nodeType":"520","endLine":99,"endColumn":108},{"ruleId":"518","severity":1,"message":"572","line":102,"column":49,"nodeType":"520","endLine":102,"endColumn":95},{"ruleId":"531","severity":1,"message":"573","line":23,"column":5,"nodeType":"514","endLine":23,"endColumn":14,"suggestions":"574"},{"ruleId":"531","severity":1,"message":"534","line":23,"column":15,"nodeType":"535","endLine":39,"endColumn":6},{"ruleId":"512","severity":1,"message":"575","line":30,"column":11,"nodeType":"514","messageId":"515","endLine":30,"endColumn":26},{"ruleId":"512","severity":1,"message":"576","line":97,"column":9,"nodeType":"514","messageId":"515","endLine":97,"endColumn":17},{"ruleId":"531","severity":1,"message":"534","line":99,"column":15,"nodeType":"535","endLine":119,"endColumn":6},{"ruleId":"531","severity":1,"message":"577","line":119,"column":8,"nodeType":"542","endLine":119,"endColumn":24,"suggestions":"578"},{"ruleId":"531","severity":1,"message":"534","line":121,"column":15,"nodeType":"535","endLine":170,"endColumn":6},{"ruleId":"531","severity":1,"message":"579","line":170,"column":8,"nodeType":"542","endLine":170,"endColumn":15,"suggestions":"580"},{"ruleId":"518","severity":1,"message":"581","line":371,"column":45,"nodeType":"520","endLine":379,"endColumn":47},{"ruleId":"518","severity":1,"message":"582","line":381,"column":45,"nodeType":"520","endLine":396,"endColumn":47},{"ruleId":"518","severity":1,"message":"583","line":91,"column":37,"nodeType":"520","endLine":95,"endColumn":39},{"ruleId":"518","severity":1,"message":"583","line":98,"column":41,"nodeType":"520","endLine":102,"endColumn":43},{"ruleId":"531","severity":1,"message":"534","line":82,"column":15,"nodeType":"535","endLine":134,"endColumn":6},{"ruleId":"531","severity":1,"message":"584","line":134,"column":8,"nodeType":"542","endLine":134,"endColumn":10,"suggestions":"585"},{"ruleId":"518","severity":1,"message":"581","line":240,"column":41,"nodeType":"520","endLine":248,"endColumn":43},{"ruleId":"518","severity":1,"message":"582","line":250,"column":41,"nodeType":"520","endLine":265,"endColumn":43},{"ruleId":"531","severity":1,"message":"534","line":52,"column":15,"nodeType":"535","endLine":91,"endColumn":6},{"ruleId":"531","severity":1,"message":"577","line":91,"column":8,"nodeType":"542","endLine":91,"endColumn":20,"suggestions":"586"},{"ruleId":"587","severity":1,"message":"588","line":94,"column":9,"nodeType":"589","messageId":"590","endLine":100,"endColumn":10},{"ruleId":"531","severity":1,"message":"591","line":101,"column":8,"nodeType":"542","endLine":101,"endColumn":24,"suggestions":"592"},{"ruleId":"546","severity":1,"message":"547","line":185,"column":25,"nodeType":"520","endLine":185,"endColumn":126},{"ruleId":"512","severity":1,"message":"540","line":4,"column":10,"nodeType":"514","messageId":"515","endLine":4,"endColumn":19},{"ruleId":"531","severity":1,"message":"534","line":46,"column":15,"nodeType":"535","endLine":67,"endColumn":6},{"ruleId":"531","severity":1,"message":"577","line":67,"column":8,"nodeType":"542","endLine":67,"endColumn":20,"suggestions":"593"},{"ruleId":"531","severity":1,"message":"544","line":77,"column":8,"nodeType":"542","endLine":77,"endColumn":24,"suggestions":"594"},{"ruleId":"546","severity":1,"message":"547","line":151,"column":25,"nodeType":"520","endLine":151,"endColumn":152},{"ruleId":"546","severity":1,"message":"547","line":152,"column":25,"nodeType":"520","endLine":152,"endColumn":152},{"ruleId":"531","severity":1,"message":"534","line":52,"column":15,"nodeType":"535","endLine":92,"endColumn":6},{"ruleId":"531","severity":1,"message":"595","line":92,"column":8,"nodeType":"542","endLine":92,"endColumn":10,"suggestions":"596"},{"ruleId":"518","severity":1,"message":"597","line":298,"column":37,"nodeType":"520","endLine":307,"endColumn":39},{"ruleId":"536","severity":1,"message":"598","line":334,"column":9,"nodeType":"538","messageId":"539","endLine":334,"endColumn":19},{"ruleId":"512","severity":1,"message":"528","line":3,"column":21,"nodeType":"514","messageId":"515","endLine":3,"endColumn":31},{"ruleId":"512","severity":1,"message":"529","line":3,"column":33,"nodeType":"514","messageId":"515","endLine":3,"endColumn":45},{"ruleId":"531","severity":1,"message":"534","line":51,"column":15,"nodeType":"535","endLine":90,"endColumn":6},{"ruleId":"531","severity":1,"message":"595","line":90,"column":8,"nodeType":"542","endLine":90,"endColumn":10,"suggestions":"599"},{"ruleId":"518","severity":1,"message":"597","line":299,"column":37,"nodeType":"520","endLine":307,"endColumn":39},{"ruleId":"536","severity":1,"message":"598","line":334,"column":9,"nodeType":"538","messageId":"539","endLine":334,"endColumn":19},{"ruleId":"512","severity":1,"message":"600","line":3,"column":8,"nodeType":"514","messageId":"515","endLine":3,"endColumn":14},{"ruleId":"512","severity":1,"message":"601","line":10,"column":8,"nodeType":"514","messageId":"515","endLine":10,"endColumn":29},{"ruleId":"512","severity":1,"message":"602","line":47,"column":14,"nodeType":"514","messageId":"515","endLine":47,"endColumn":25},{"ruleId":"531","severity":1,"message":"534","line":81,"column":15,"nodeType":"535","endLine":133,"endColumn":6},{"ruleId":"531","severity":1,"message":"584","line":133,"column":8,"nodeType":"542","endLine":133,"endColumn":19,"suggestions":"603"},{"ruleId":"518","severity":1,"message":"604","line":194,"column":41,"nodeType":"520","endLine":205,"endColumn":43},{"ruleId":"518","severity":1,"message":"605","line":207,"column":41,"nodeType":"520","endLine":224,"endColumn":43},{"ruleId":"512","severity":1,"message":"606","line":239,"column":7,"nodeType":"514","messageId":"515","endLine":239,"endColumn":13},{"ruleId":"512","severity":1,"message":"540","line":3,"column":10,"nodeType":"514","messageId":"515","endLine":3,"endColumn":19},{"ruleId":"531","severity":1,"message":"534","line":46,"column":15,"nodeType":"535","endLine":67,"endColumn":6},{"ruleId":"531","severity":1,"message":"577","line":67,"column":8,"nodeType":"542","endLine":67,"endColumn":20,"suggestions":"607"},{"ruleId":"531","severity":1,"message":"544","line":77,"column":8,"nodeType":"542","endLine":77,"endColumn":24,"suggestions":"608"},{"ruleId":"546","severity":1,"message":"547","line":146,"column":25,"nodeType":"520","endLine":146,"endColumn":154},{"ruleId":"546","severity":1,"message":"547","line":147,"column":25,"nodeType":"520","endLine":147,"endColumn":134},{"ruleId":"512","severity":1,"message":"609","line":10,"column":12,"nodeType":"514","messageId":"515","endLine":10,"endColumn":17},{"ruleId":"531","severity":1,"message":"610","line":19,"column":5,"nodeType":"514","endLine":19,"endColumn":14,"suggestions":"611"},{"ruleId":"531","severity":1,"message":"534","line":19,"column":15,"nodeType":"535","endLine":29,"endColumn":6},{"ruleId":"531","severity":1,"message":"610","line":20,"column":5,"nodeType":"514","endLine":20,"endColumn":14,"suggestions":"612"},{"ruleId":"531","severity":1,"message":"534","line":20,"column":15,"nodeType":"535","endLine":30,"endColumn":6},{"ruleId":"512","severity":1,"message":"613","line":21,"column":23,"nodeType":"514","messageId":"515","endLine":21,"endColumn":35},{"ruleId":"531","severity":1,"message":"534","line":75,"column":15,"nodeType":"535","endLine":87,"endColumn":6},{"ruleId":"531","severity":1,"message":"614","line":87,"column":8,"nodeType":"542","endLine":87,"endColumn":21,"suggestions":"615"},{"ruleId":"518","severity":1,"message":"582","line":145,"column":37,"nodeType":"520","endLine":160,"endColumn":39},{"ruleId":"518","severity":1,"message":"616","line":178,"column":25,"nodeType":"520","endLine":187,"endColumn":27},{"ruleId":"512","severity":1,"message":"540","line":4,"column":10,"nodeType":"514","messageId":"515","endLine":4,"endColumn":19},{"ruleId":"531","severity":1,"message":"534","line":47,"column":15,"nodeType":"535","endLine":68,"endColumn":6},{"ruleId":"531","severity":1,"message":"541","line":68,"column":8,"nodeType":"542","endLine":68,"endColumn":20,"suggestions":"617"},{"ruleId":"531","severity":1,"message":"544","line":78,"column":8,"nodeType":"542","endLine":78,"endColumn":24,"suggestions":"618"},{"ruleId":"546","severity":1,"message":"547","line":133,"column":25,"nodeType":"520","endLine":133,"endColumn":131},{"ruleId":"512","severity":1,"message":"600","line":2,"column":8,"nodeType":"514","messageId":"515","endLine":2,"endColumn":14},{"ruleId":"512","severity":1,"message":"540","line":4,"column":10,"nodeType":"514","messageId":"515","endLine":4,"endColumn":19},{"ruleId":"512","severity":1,"message":"528","line":4,"column":21,"nodeType":"514","messageId":"515","endLine":4,"endColumn":31},{"ruleId":"512","severity":1,"message":"529","line":4,"column":33,"nodeType":"514","messageId":"515","endLine":4,"endColumn":45},{"ruleId":"512","severity":1,"message":"530","line":4,"column":47,"nodeType":"514","messageId":"515","endLine":4,"endColumn":58},{"ruleId":"512","severity":1,"message":"619","line":6,"column":20,"nodeType":"514","messageId":"515","endLine":6,"endColumn":23},{"ruleId":"512","severity":1,"message":"620","line":9,"column":8,"nodeType":"514","messageId":"515","endLine":9,"endColumn":22},{"ruleId":"512","severity":1,"message":"621","line":15,"column":9,"nodeType":"514","messageId":"515","endLine":15,"endColumn":13},{"ruleId":"531","severity":1,"message":"532","line":30,"column":5,"nodeType":"514","endLine":30,"endColumn":14,"suggestions":"622"},{"ruleId":"531","severity":1,"message":"534","line":30,"column":15,"nodeType":"535","endLine":40,"endColumn":6},{"ruleId":"512","severity":1,"message":"606","line":128,"column":5,"nodeType":"514","messageId":"515","endLine":128,"endColumn":11},{"ruleId":"536","severity":1,"message":"537","line":134,"column":9,"nodeType":"538","messageId":"539","endLine":134,"endColumn":23},{"ruleId":"531","severity":1,"message":"534","line":41,"column":15,"nodeType":"535","endLine":66,"endColumn":6},{"ruleId":"531","severity":1,"message":"556","line":66,"column":8,"nodeType":"542","endLine":66,"endColumn":10,"suggestions":"623"},{"ruleId":"512","severity":1,"message":"528","line":4,"column":21,"nodeType":"514","messageId":"515","endLine":4,"endColumn":31},{"ruleId":"512","severity":1,"message":"529","line":4,"column":33,"nodeType":"514","messageId":"515","endLine":4,"endColumn":45},{"ruleId":"512","severity":1,"message":"530","line":4,"column":47,"nodeType":"514","messageId":"515","endLine":4,"endColumn":58},{"ruleId":"531","severity":1,"message":"532","line":56,"column":5,"nodeType":"514","endLine":56,"endColumn":14,"suggestions":"624"},{"ruleId":"531","severity":1,"message":"534","line":56,"column":15,"nodeType":"535","endLine":66,"endColumn":6},{"ruleId":"536","severity":1,"message":"537","line":249,"column":9,"nodeType":"538","messageId":"539","endLine":249,"endColumn":23},{"ruleId":"531","severity":1,"message":"573","line":18,"column":5,"nodeType":"514","endLine":18,"endColumn":14,"suggestions":"625"},{"ruleId":"531","severity":1,"message":"534","line":18,"column":15,"nodeType":"535","endLine":34,"endColumn":6},{"ruleId":"512","severity":1,"message":"513","line":2,"column":19,"nodeType":"514","messageId":"515","endLine":2,"endColumn":27},{"ruleId":"512","severity":1,"message":"571","line":1,"column":27,"nodeType":"514","messageId":"515","endLine":1,"endColumn":35},{"ruleId":"512","severity":1,"message":"626","line":4,"column":8,"nodeType":"514","messageId":"515","endLine":4,"endColumn":17},{"ruleId":"512","severity":1,"message":"571","line":1,"column":17,"nodeType":"514","messageId":"515","endLine":1,"endColumn":25},{"ruleId":"512","severity":1,"message":"626","line":4,"column":8,"nodeType":"514","messageId":"515","endLine":4,"endColumn":17},{"ruleId":"522","severity":1,"message":"523","line":83,"column":12,"nodeType":"520","endLine":83,"endColumn":42},{"ruleId":"512","severity":1,"message":"627","line":4,"column":23,"nodeType":"514","messageId":"515","endLine":4,"endColumn":34},{"ruleId":"512","severity":1,"message":"627","line":62,"column":23,"nodeType":"514","messageId":"515","endLine":62,"endColumn":34},{"ruleId":"512","severity":1,"message":"628","line":1,"column":15,"nodeType":"514","messageId":"515","endLine":1,"endColumn":24},{"ruleId":"512","severity":1,"message":"571","line":1,"column":17,"nodeType":"514","messageId":"515","endLine":1,"endColumn":25},{"ruleId":"512","severity":1,"message":"571","line":1,"column":17,"nodeType":"514","messageId":"515","endLine":1,"endColumn":25},{"ruleId":"512","severity":1,"message":"629","line":2,"column":8,"nodeType":"514","messageId":"515","endLine":2,"endColumn":15},{"ruleId":"512","severity":1,"message":"630","line":5,"column":8,"nodeType":"514","messageId":"515","endLine":5,"endColumn":20},{"ruleId":"512","severity":1,"message":"606","line":31,"column":7,"nodeType":"514","messageId":"515","endLine":31,"endColumn":13},{"ruleId":"512","severity":1,"message":"631","line":2,"column":10,"nodeType":"514","messageId":"515","endLine":2,"endColumn":17},{"ruleId":"512","severity":1,"message":"571","line":1,"column":17,"nodeType":"514","messageId":"515","endLine":1,"endColumn":25},{"ruleId":"632","severity":1,"message":"633","line":28,"column":21,"nodeType":"520","endLine":35,"endColumn":23},{"ruleId":"512","severity":1,"message":"528","line":14,"column":21,"nodeType":"514","messageId":"515","endLine":14,"endColumn":31},{"ruleId":"512","severity":1,"message":"529","line":14,"column":33,"nodeType":"514","messageId":"515","endLine":14,"endColumn":45},{"ruleId":"512","severity":1,"message":"634","line":25,"column":12,"nodeType":"514","messageId":"515","endLine":25,"endColumn":25},{"ruleId":"632","severity":1,"message":"633","line":180,"column":33,"nodeType":"520","endLine":180,"endColumn":111},{"ruleId":"512","severity":1,"message":"635","line":24,"column":12,"nodeType":"514","messageId":"515","endLine":24,"endColumn":17},{"ruleId":"512","severity":1,"message":"636","line":128,"column":11,"nodeType":"514","messageId":"515","endLine":128,"endColumn":31},{"ruleId":"637","severity":1,"message":"638","line":197,"column":99,"nodeType":"639","messageId":"640","endLine":197,"endColumn":100,"suggestions":"641"},{"ruleId":"512","severity":1,"message":"571","line":1,"column":17,"nodeType":"514","messageId":"515","endLine":1,"endColumn":25},{"ruleId":"512","severity":1,"message":"528","line":3,"column":21,"nodeType":"514","messageId":"515","endLine":3,"endColumn":31},{"ruleId":"512","severity":1,"message":"529","line":3,"column":33,"nodeType":"514","messageId":"515","endLine":3,"endColumn":45},{"ruleId":"512","severity":1,"message":"621","line":23,"column":9,"nodeType":"514","messageId":"515","endLine":23,"endColumn":13},{"ruleId":"512","severity":1,"message":"642","line":35,"column":19,"nodeType":"514","messageId":"515","endLine":35,"endColumn":27},{"ruleId":"531","severity":1,"message":"534","line":62,"column":15,"nodeType":"535","endLine":105,"endColumn":6},{"ruleId":"531","severity":1,"message":"643","line":66,"column":34,"nodeType":"644","endLine":66,"endColumn":54},{"ruleId":"632","severity":1,"message":"633","line":262,"column":21,"nodeType":"520","endLine":269,"endColumn":23},{"ruleId":"531","severity":1,"message":"534","line":24,"column":15,"nodeType":"535","endLine":33,"endColumn":6},{"ruleId":"531","severity":1,"message":"645","line":28,"column":26,"nodeType":"644","endLine":28,"endColumn":42},{"ruleId":"531","severity":1,"message":"643","line":29,"column":30,"nodeType":"644","endLine":29,"endColumn":50},{"ruleId":"531","severity":1,"message":"534","line":38,"column":15,"nodeType":"535","endLine":45,"endColumn":6},{"ruleId":"531","severity":1,"message":"643","line":41,"column":30,"nodeType":"644","endLine":41,"endColumn":50},{"ruleId":"637","severity":1,"message":"638","line":165,"column":111,"nodeType":"639","messageId":"640","endLine":165,"endColumn":112,"suggestions":"646"},{"ruleId":"512","severity":1,"message":"571","line":1,"column":17,"nodeType":"514","messageId":"515","endLine":1,"endColumn":25},{"ruleId":"512","severity":1,"message":"528","line":3,"column":21,"nodeType":"514","messageId":"515","endLine":3,"endColumn":31},{"ruleId":"512","severity":1,"message":"529","line":3,"column":33,"nodeType":"514","messageId":"515","endLine":3,"endColumn":45},{"ruleId":"512","severity":1,"message":"647","line":4,"column":8,"nodeType":"514","messageId":"515","endLine":4,"endColumn":12},{"ruleId":"632","severity":1,"message":"633","line":148,"column":25,"nodeType":"520","endLine":155,"endColumn":27},{"ruleId":"508","replacedBy":"648"},{"ruleId":"510","replacedBy":"649"},{"ruleId":"512","severity":1,"message":"650","line":28,"column":11,"nodeType":"514","messageId":"515","endLine":28,"endColumn":18},{"ruleId":"512","severity":1,"message":"651","line":38,"column":9,"nodeType":"514","messageId":"515","endLine":38,"endColumn":14},{"ruleId":"531","severity":1,"message":"534","line":91,"column":15,"nodeType":"535","endLine":127,"endColumn":6},{"ruleId":"531","severity":1,"message":"652","line":127,"column":8,"nodeType":"542","endLine":127,"endColumn":10,"suggestions":"653"},{"ruleId":"512","severity":1,"message":"654","line":8,"column":5,"nodeType":"514","messageId":"515","endLine":8,"endColumn":15},"no-native-reassign",["655"],"no-negated-in-lhs",["656"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'ContextProvider' is defined but never used.","react/jsx-pascal-case","Imported JSX component Confirmed_PatientsTable must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'Details' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","Imported JSX component HDeletion_Form must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Current_CasesTable must be in PascalCase or SCREAMING_SNAKE_CASE","'Buttons' is defined but never used.","Imported JSX component Hospital_Details must be in PascalCase or SCREAMING_SNAKE_CASE","'InputLabel' is defined but never used.","'NativeSelect' is defined but never used.","'FormControl' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setAuthorized'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [getUserInfoFromLocalStorage, parsedUserInfo, userRole, props.history] as a second argument to the useEffect Hook.",["657"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-dupe-keys","Duplicate key 'justifyContent'.","ObjectExpression","unexpected","'TextField' is defined but never used.","React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedUserInfo', 'props.history', and 'userRole'. Either include them or remove the dependency array.","ArrayExpression",["658"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSpecificData' needs the current value of 'data'.",["659"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DuoIcon' is defined but never used.","'VideoCallIcon' is defined but never used.","'calling' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["660"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedInfo', 'parsedUserInfo', 'props.history', and 'userRole'. Either include them or remove the dependency array.",["661"],"'BlockIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'UpdateIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'snackBar' is assigned a value but never used.","'setSnackBar' is assigned a value but never used.",["662"],["663"],"React Hook useEffect has missing dependencies: 'getpatientInfoFromLocalStorage', 'parsedInfo.patientID', 'parsedUserInfo', 'props.history', and 'userRole'. Either include them or remove the dependency array.",["664"],"Imported JSX component Display_Patient_Record must be in PascalCase or SCREAMING_SNAKE_CASE",["665"],["666"],"'useState' is defined but never used.","Imported JSX component Person_RegistrationForm must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect contains a call to 'setAuthorized'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.history] as a second argument to the useEffect Hook.",["667"],"'handleClickOpen' is assigned a value but never used.","'fetchUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedUserInfo', and 'props.history'. Either include them or remove the dependency array.",["668"],"React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedUserInfo.authToken', and 'selectedOption'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setUserInfo' needs the current value of 'selectedOption'.",["669"],"Imported JSX component Display_Institute_Record must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Display_Person_Record must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Institiute_RegistrationForm must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedInfo.selectedOption', 'parsedInfo.userID', 'parsedUserInfo', and 'props.history'. Either include them or remove the dependency array.",["670"],["671"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'fetchedData.dispensaries', 'fetchedData.doctors', 'fetchedData.healthWorkers', 'fetchedData.hospitals', and 'fetchedData.researchers'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setData' needs the current value of 'fetchedData.dispensaries'.",["672"],["673"],["674"],"React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedInfo', 'parsedUserInfo', and 'props.history'. Either include them or remove the dependency array.",["675"],"Imported JSX component Reply_Form must be in PascalCase or SCREAMING_SNAKE_CASE","Duplicate key 'fontWeight'.",["676"],"'Button' is defined but never used.","'Display_Person_Record' is defined but never used.","'resetStates' is defined but never used.",["677"],"Imported JSX component Update_Institute_Record must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Update_Person_Record must be in PascalCase or SCREAMING_SNAKE_CASE","'styles' is assigned a value but never used.",["678"],["679"],"'actor' is assigned a value but never used.","React Hook useEffect contains a call to 'setActor'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.history] as a second argument to the useEffect Hook.",["680"],["681"],"'setIsLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedUserInfo', 'parsedUserRole', and 'props.history'. Either include them or remove the dependency array.",["682"],"Imported JSX component Update_Profile_Form must be in PascalCase or SCREAMING_SNAKE_CASE",["683"],["684"],"'Pie' is defined but never used.","'CustomSnackBar' is defined but never used.","'date' is assigned a value but never used.",["685"],["686"],["687"],["688"],"'View_Edit' is defined but never used.","'setDeletion' is assigned a value but never used.","'Component' is defined but never used.","'Spinner' is defined but never used.","'CircleLoader' is defined but never used.","'NavLink' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'passwordError' is assigned a value but never used.","'error' is assigned a value but never used.","'handleRegisterButton' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["689","690"],"'setError' is assigned a value but never used.","Assignments to the 'parsedUserInfo' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'parsedInfo' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",["691","692"],"'logo' is defined but never used.",["655"],["656"],"'classes' is assigned a value but never used.","'route' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUserInfoFromLocalStorage', 'parsedUserInfo.authToken', and 'props.actor'. Either include them or remove the dependency array.",["693"],"'DatePicker' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"694","fix":"695"},{"desc":"696","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"702","fix":"703"},{"desc":"704","fix":"705"},{"desc":"698","fix":"706"},{"desc":"707","fix":"708"},{"desc":"700","fix":"709"},{"desc":"704","fix":"710"},{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},{"desc":"717","fix":"718"},{"desc":"719","fix":"720"},{"desc":"721","fix":"722"},{"desc":"719","fix":"723"},{"desc":"698","fix":"724"},{"desc":"725","fix":"726"},{"desc":"725","fix":"727"},{"desc":"728","fix":"729"},{"desc":"719","fix":"730"},{"desc":"698","fix":"731"},{"desc":"711","fix":"732"},{"desc":"711","fix":"733"},{"desc":"734","fix":"735"},{"desc":"696","fix":"736"},{"desc":"698","fix":"737"},{"desc":"694","fix":"738"},{"desc":"702","fix":"739"},{"desc":"694","fix":"740"},{"desc":"711","fix":"741"},{"messageId":"742","fix":"743","desc":"744"},{"messageId":"745","fix":"746","desc":"747"},{"messageId":"742","fix":"748","desc":"744"},{"messageId":"745","fix":"749","desc":"747"},{"desc":"750","fix":"751"},"Add dependencies array: [getUserInfoFromLocalStorage, parsedUserInfo, userRole, props.history]",{"range":"752","text":"753"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, hasDeleted, parsedUserInfo, props.history, userRole]",{"range":"754","text":"755"},"Update the dependencies array to be: [data, selectedOption]",{"range":"756","text":"757"},"Update the dependencies array to be: [props.history]",{"range":"758","text":"759"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, parsedInfo, parsedUserInfo, props.history, userRole]",{"range":"760","text":"761"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, parsedUserInfo, props.history, userRole]",{"range":"762","text":"763"},{"range":"764","text":"757"},"Update the dependencies array to be: [getpatientInfoFromLocalStorage, parsedInfo.patientID, parsedUserInfo, props.history, userRole]",{"range":"765","text":"766"},{"range":"767","text":"759"},{"range":"768","text":"763"},"Add dependencies array: [props.history]",{"range":"769","text":"770"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, parsedUserInfo, props.history, selectedOption]",{"range":"771","text":"772"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, parsedUserInfo.authToken, selectedOption, value]",{"range":"773","text":"774"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, parsedInfo.selectedOption, parsedInfo.userID, parsedUserInfo, props.history]",{"range":"775","text":"776"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, hasDeleted, parsedUserInfo, props.history]",{"range":"777","text":"778"},"Update the dependencies array to be: [fetchedData.dispensaries, fetchedData.doctors, fetchedData.healthWorkers, fetchedData.hospitals, fetchedData.researchers, selectedOption]",{"range":"779","text":"780"},{"range":"781","text":"778"},{"range":"782","text":"757"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, parsedInfo, parsedUserInfo, props.history]",{"range":"783","text":"784"},{"range":"785","text":"784"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, isUpdated, parsedInfo.selectedOption, parsedInfo.userID, parsedUserInfo, props.history]",{"range":"786","text":"787"},{"range":"788","text":"778"},{"range":"789","text":"757"},{"range":"790","text":"770"},{"range":"791","text":"770"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, infoUpdated, parsedUserInfo, parsedUserRole, props.history]",{"range":"792","text":"793"},{"range":"794","text":"755"},{"range":"795","text":"757"},{"range":"796","text":"753"},{"range":"797","text":"761"},{"range":"798","text":"753"},{"range":"799","text":"770"},"removeEscape",{"range":"800","text":"801"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"802","text":"803"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"804","text":"801"},{"range":"805","text":"803"},"Update the dependencies array to be: [getUserInfoFromLocalStorage, parsedUserInfo.authToken, props.actor]",{"range":"806","text":"807"},[1927,1927],", [getUserInfoFromLocalStorage, parsedUserInfo, userRole, props.history]",[2457,2469],"[getUserInfoFromLocalStorage, hasDeleted, parsedUserInfo, props.history, userRole]",[2740,2756],"[data, selectedOption]",[3228,3230],"[props.history]",[2126,2128],"[getUserInfoFromLocalStorage, parsedInfo, parsedUserInfo, props.history, userRole]",[2327,2329],"[getUserInfoFromLocalStorage, parsedUserInfo, props.history, userRole]",[2600,2616],[3726,3728],"[getpatientInfoFromLocalStorage, parsedInfo.patientID, parsedUserInfo, props.history, userRole]",[1177,1179],[1815,1817],[1065,1065],", [props.history]",[3540,3556],"[getUserInfoFromLocalStorage, parsedUserInfo, props.history, selectedOption]",[5698,5705],"[getUserInfoFromLocalStorage, parsedUserInfo.authToken, selectedOption, value]",[4924,4926],"[getUserInfoFromLocalStorage, parsedInfo.selectedOption, parsedInfo.userID, parsedUserInfo, props.history]",[3321,3333],"[getUserInfoFromLocalStorage, hasDeleted, parsedUserInfo, props.history]",[3779,3795],"[fetchedData.dispensaries, fetchedData.doctors, fetchedData.healthWorkers, fetchedData.hospitals, fetchedData.researchers, selectedOption]",[2238,2250],[2521,2537],[3253,3255],"[getUserInfoFromLocalStorage, parsedInfo, parsedUserInfo, props.history]",[3220,3222],[4834,4845],"[getUserInfoFromLocalStorage, isUpdated, parsedInfo.selectedOption, parsedInfo.userID, parsedUserInfo, props.history]",[2249,2261],[2533,2549],[931,931],[706,706],[2609,2622],"[getUserInfoFromLocalStorage, infoUpdated, parsedUserInfo, parsedUserRole, props.history]",[2471,2483],[2754,2770],[1341,1341],[2134,2136],[1945,1945],[1014,1014],[7261,7262],"",[7261,7261],"\\",[6117,6118],[6117,6117],[3881,3883],"[getUserInfoFromLocalStorage, parsedUserInfo.authToken, props.actor]"]